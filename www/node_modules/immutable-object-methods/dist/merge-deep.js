'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign2 = require('./assign');

var _assign3 = _interopRequireDefault(_assign2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isObject = function isObject(obj) {
  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null && !Array.isArray(obj);
};

var mergeDeep = function mergeDeep() {
  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var changes = arguments[1];

  var result = input;

  Object.keys(changes).forEach(function (key) {
    var child = changes[key];
    var newChild = isObject(child) ? mergeDeep(input[key], child) : child;

    if (result[key] !== newChild) {
      if (result === input) {
        result = (0, _assign3.default)(input, _defineProperty({}, key, newChild));
      } else {
        result[key] = newChild;
      }
    }
  });

  return result;
};

exports.default = mergeDeep;