"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const visit = require(`unist-util-visit`);

const Viz = require(`viz.js`);

const _require = require(`viz.js/full.render.js`),
      Module = _require.Module,
      render = _require.render;

const viz = new Viz({
  Module,
  render
});
const validLanguages = [`dot`, `circo`];

module.exports =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(function* ({
    markdownAST
  }, pluginOptions = {}) {
    let codeNodes = [];
    visit(markdownAST, `code`, node => {
      // Only act on languages supported by graphviz
      if (validLanguages.includes(node.lang)) {
        codeNodes.push(node);
      }

      return node;
    });
    yield Promise.all(codeNodes.map(
    /*#__PURE__*/
    function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (node) {
        const value = node.value,
              lang = node.lang;

        try {
          // Perform actual render
          const svgString = yield viz.renderString(value, {
            engine: lang
          }); // Mutate the current node. Converting from a code block to
          // HTML (with svg content)

          node.type = `html`;
          node.value = svgString;
        } catch (error) {
          console.log(`Error during viz.js execution. Leaving code block unchanged`);
          console.log(error);
        }

        return node;
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();