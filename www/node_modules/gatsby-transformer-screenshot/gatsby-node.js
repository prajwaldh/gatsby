"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const axios = require(`axios`);

const Queue = require(`better-queue`);

const _require = require(`gatsby-source-filesystem`),
      createRemoteFileNode = _require.createRemoteFileNode;

const SCREENSHOT_ENDPOINT = `https://h7iqvn4842.execute-api.us-east-2.amazonaws.com/prod/screenshot`;
const LAMBDA_CONCURRENCY_LIMIT = 50;
const USE_PLACEHOLDER_IMAGE = process.env.GATSBY_SCREENSHOT_PLACEHOLDER;
const screenshotQueue = new Queue((input, cb) => {
  createScreenshotNode(input).then(r => cb(null, r)).catch(e => cb(e));
}, {
  concurrent: LAMBDA_CONCURRENCY_LIMIT,
  maxRetries: 3,
  retryDelay: 1000
});

exports.onPreBootstrap = ({
  store,
  cache,
  actions,
  createNodeId,
  getNodesByType,
  createContentDigest
}, pluginOptions) => {
  const createNode = actions.createNode,
        touchNode = actions.touchNode;
  const screenshotNodes = getNodesByType(`Screenshot`);

  if (screenshotNodes.length === 0) {
    return null;
  }

  let anyQueued = false; // Check for updated screenshots and placeholder flag
  // and prevent Gatsby from garbage collecting remote file nodes

  screenshotNodes.forEach(n => {
    if (n.expires && new Date() >= new Date(n.expires) || USE_PLACEHOLDER_IMAGE !== n.usingPlaceholder) {
      anyQueued = true; // Screenshot expired, re-run Lambda

      screenshotQueue.push({
        url: n.url,
        parent: n.parent,
        store,
        cache,
        createNode,
        createNodeId,
        createContentDigest
      });
    } else {
      // Screenshot hasn't yet expired, touch the image node
      // to prevent garbage collection
      touchNode({
        nodeId: n.screenshotFile___NODE
      });
    }
  });

  if (!anyQueued) {
    return null;
  }

  return new Promise((resolve, reject) => {
    screenshotQueue.on(`drain`, () => {
      resolve();
    });
  });
};

exports.onCreateNode =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(function* ({
    node,
    actions,
    store,
    cache,
    createNodeId,
    createContentDigest
  }, pluginOptions) {
    const createNode = actions.createNode,
          createParentChildLink = actions.createParentChildLink;
    /*
     * Check if node is of a type we care about, and has a url field
     * (originally only checked sites.yml, hence including by default)
     */

    const validNodeTypes = [`SitesYaml`].concat(pluginOptions.nodeTypes || []);

    if (!validNodeTypes.includes(node.internal.type) || !node.url) {
      return;
    }

    try {
      const screenshotNode = yield new Promise((resolve, reject) => {
        screenshotQueue.push({
          url: node.url,
          parent: node.id,
          store,
          cache,
          createNode,
          createNodeId,
          createContentDigest
        }).on(`finish`, r => {
          resolve(r);
        }).on(`failed`, e => {
          reject(e);
        });
      });
      createParentChildLink({
        parent: node,
        child: screenshotNode
      });
    } catch (e) {
      return;
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const createScreenshotNode =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* ({
    url,
    parent,
    store,
    cache,
    createNode,
    createNodeId,
    createContentDigest
  }) {
    try {
      let fileNode, expires;

      if (USE_PLACEHOLDER_IMAGE) {
        const getPlaceholderFileNode = require(`./placeholder-file-node`);

        fileNode = yield getPlaceholderFileNode({
          createNode,
          createNodeId
        });
        expires = new Date(2999, 1, 1).getTime();
      } else {
        const screenshotResponse = yield axios.post(SCREENSHOT_ENDPOINT, {
          url
        });
        fileNode = yield createRemoteFileNode({
          url: screenshotResponse.data.url,
          store,
          cache,
          createNode,
          createNodeId
        });
        expires = screenshotResponse.data.expires;

        if (!fileNode) {
          throw new Error(`Remote file node is null`, screenshotResponse.data.url);
        }
      }

      const screenshotNode = {
        id: createNodeId(`${parent} >>> Screenshot`),
        url,
        expires,
        parent,
        children: [],
        internal: {
          type: `Screenshot`
        },
        screenshotFile___NODE: fileNode.id,
        usingPlaceholder: USE_PLACEHOLDER_IMAGE
      };
      screenshotNode.internal.contentDigest = createContentDigest(screenshotNode);
      createNode(screenshotNode);
      return screenshotNode;
    } catch (e) {
      console.log(`Failed to screenshot ${url}. Retrying...`);
      throw e;
    }
  });

  return function createScreenshotNode(_x3) {
    return _ref2.apply(this, arguments);
  };
}();