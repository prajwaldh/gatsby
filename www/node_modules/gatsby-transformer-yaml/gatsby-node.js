"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const jsYaml = require(`js-yaml`);

const _ = require(`lodash`);

const path = require(`path`);

function onCreateNode(_x) {
  return _onCreateNode.apply(this, arguments);
}

function _onCreateNode() {
  _onCreateNode = (0, _asyncToGenerator2.default)(function* ({
    node,
    actions,
    loadNodeContent,
    createNodeId,
    createContentDigest
  }) {
    function transformObject(obj, id, type) {
      const yamlNode = Object.assign({}, obj, {
        id,
        children: [],
        parent: node.id,
        internal: {
          contentDigest: createContentDigest(obj),
          type
        }
      });
      createNode(yamlNode);
      createParentChildLink({
        parent: node,
        child: yamlNode
      });
    }

    const createNode = actions.createNode,
          createParentChildLink = actions.createParentChildLink;

    if (node.internal.mediaType !== `text/yaml`) {
      return;
    }

    const content = yield loadNodeContent(node);
    const parsedContent = jsYaml.load(content);

    if (_.isArray(parsedContent)) {
      parsedContent.forEach((obj, i) => {
        transformObject(obj, obj.id ? obj.id : createNodeId(`${node.id} [${i}] >>> YAML`), _.upperFirst(_.camelCase(`${node.name} Yaml`)));
      });
    } else if (_.isPlainObject(parsedContent)) {
      transformObject(parsedContent, parsedContent.id ? parsedContent.id : createNodeId(`${node.id} >>> YAML`), _.upperFirst(_.camelCase(`${path.basename(node.dir)} Yaml`)));
    }
  });
  return _onCreateNode.apply(this, arguments);
}

exports.onCreateNode = onCreateNode;