"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var calculateDirs = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(store) {
    var program, dirsToCache, _iterator, _isArray, _i, _ref2, dir, netlifyCacheDir;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            program = store.getState().program;
            dirsToCache = [resolve(program.directory, `public`), resolve(program.directory, `.cache`)];
            _iterator = dirsToCache, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

          case 3:
            if (!_isArray) {
              _context.next = 9;
              break;
            }

            if (!(_i >= _iterator.length)) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("break", 18);

          case 6:
            _ref2 = _iterator[_i++];
            _context.next = 13;
            break;

          case 9:
            _i = _iterator.next();

            if (!_i.done) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("break", 18);

          case 12:
            _ref2 = _i.value;

          case 13:
            dir = _ref2;
            _context.next = 16;
            return ensureDir(dir);

          case 16:
            _context.next = 3;
            break;

          case 18:
            netlifyCacheDir = resolve(process.env.NETLIFY_BUILD_BASE, `cache`, `gatsby`);
            _context.next = 21;
            return ensureDir(netlifyCacheDir);

          case 21:
            return _context.abrupt("return", {
              dirsToCache,
              netlifyCacheDir
            });

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function calculateDirs(_x) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require(`path`),
    resolve = _require.resolve,
    basename = _require.basename;

var _require2 = require(`fs-extra`),
    ensureDir = _require2.ensureDir,
    readdir = _require2.readdir,
    copy = _require2.copy;

exports.onPreBootstrap = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref3) {
    var store = _ref3.store;

    var _ref5, dirsToCache, netlifyCacheDir, _iterator2, _isArray2, _i2, _ref6, dirPath, dirName, cachePath, dirFiles, cacheFiles;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (process.env.NETLIFY_BUILD_BASE) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            _context2.next = 4;
            return calculateDirs(store);

          case 4:
            _ref5 = _context2.sent;
            dirsToCache = _ref5.dirsToCache;
            netlifyCacheDir = _ref5.netlifyCacheDir;
            _iterator2 = dirsToCache, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();

          case 8:
            if (!_isArray2) {
              _context2.next = 14;
              break;
            }

            if (!(_i2 >= _iterator2.length)) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("break", 34);

          case 11:
            _ref6 = _iterator2[_i2++];
            _context2.next = 18;
            break;

          case 14:
            _i2 = _iterator2.next();

            if (!_i2.done) {
              _context2.next = 17;
              break;
            }

            return _context2.abrupt("break", 34);

          case 17:
            _ref6 = _i2.value;

          case 18:
            dirPath = _ref6;
            dirName = basename(dirPath);
            cachePath = resolve(netlifyCacheDir, dirName);
            _context2.next = 23;
            return ensureDir(cachePath);

          case 23:
            _context2.next = 25;
            return readdir(dirPath);

          case 25:
            dirFiles = _context2.sent;
            _context2.next = 28;
            return readdir(cachePath);

          case 28:
            cacheFiles = _context2.sent;


            console.log(`Found ${cacheFiles.length} cached files for ${dirName} directory with ${dirFiles.length} files.`);

            _context2.next = 32;
            return copy(cachePath, dirPath);

          case 32:
            _context2.next = 8;
            break;

          case 34:

            console.log(`Netlify cache restored`);

          case 35:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
}();

exports.onPostBuild = function () {
  var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref7) {
    var store = _ref7.store;

    var _ref9, dirsToCache, netlifyCacheDir, _iterator3, _isArray3, _i3, _ref10, dirPath, dirName, cachePath, dirFiles, cacheFiles;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (process.env.NETLIFY_BUILD_BASE) {
              _context3.next = 2;
              break;
            }

            return _context3.abrupt("return");

          case 2:
            _context3.next = 4;
            return calculateDirs(store);

          case 4:
            _ref9 = _context3.sent;
            dirsToCache = _ref9.dirsToCache;
            netlifyCacheDir = _ref9.netlifyCacheDir;
            _iterator3 = dirsToCache, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();

          case 8:
            if (!_isArray3) {
              _context3.next = 14;
              break;
            }

            if (!(_i3 >= _iterator3.length)) {
              _context3.next = 11;
              break;
            }

            return _context3.abrupt("break", 32);

          case 11:
            _ref10 = _iterator3[_i3++];
            _context3.next = 18;
            break;

          case 14:
            _i3 = _iterator3.next();

            if (!_i3.done) {
              _context3.next = 17;
              break;
            }

            return _context3.abrupt("break", 32);

          case 17:
            _ref10 = _i3.value;

          case 18:
            dirPath = _ref10;
            dirName = basename(dirPath);
            cachePath = resolve(netlifyCacheDir, dirName);
            _context3.next = 23;
            return readdir(dirPath);

          case 23:
            dirFiles = _context3.sent;
            _context3.next = 26;
            return readdir(cachePath);

          case 26:
            cacheFiles = _context3.sent;


            console.log(`Found ${dirFiles.length} files in ${dirName} directory with ${cacheFiles.length} already cached files.`);

            _context3.next = 30;
            return copy(dirPath, cachePath);

          case 30:
            _context3.next = 8;
            break;

          case 32:

            console.log(`Netlify cache refilled`);

          case 33:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x3) {
    return _ref8.apply(this, arguments);
  };
}();