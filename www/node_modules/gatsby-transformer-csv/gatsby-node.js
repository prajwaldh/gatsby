"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const Promise = require(`bluebird`);

const csv = require(`csvtojson`);

const _ = require(`lodash`);

const convertToJson = (data, options) => new Promise((res, rej) => {
  csv(options).fromString(data).on(`end_parsed`, jsonData => {
    if (!jsonData) {
      rej(`CSV to JSON conversion failed!`);
    }

    res(jsonData);
  });
});

function onCreateNode(_x, _x2) {
  return _onCreateNode.apply(this, arguments);
}

function _onCreateNode() {
  _onCreateNode = (0, _asyncToGenerator2.default)(function* ({
    node,
    actions,
    loadNodeContent,
    createNodeId,
    createContentDigest
  }, options) {
    const createNode = actions.createNode,
          createParentChildLink = actions.createParentChildLink; // Filter out non-csv content

    if (node.extension !== `csv`) {
      return;
    } // Load CSV contents


    const content = yield loadNodeContent(node); // Parse

    let parsedContent = yield convertToJson(content, options);

    if (_.isArray(parsedContent)) {
      const csvArray = parsedContent.map((obj, i) => {
        return Object.assign({}, obj, {
          id: obj.id ? obj.id : createNodeId(`${node.id} [${i}] >>> CSV`),
          children: [],
          parent: node.id,
          internal: {
            contentDigest: createContentDigest(obj),
            // TODO make choosing the "type" a lot smarter. This assumes
            // the parent node is a file.
            // PascalCase
            type: _.upperFirst(_.camelCase(`${node.name} Csv`))
          }
        });
      });

      _.each(csvArray, y => {
        createNode(y);
        createParentChildLink({
          parent: node,
          child: y
        });
      });
    }

    return;
  });
  return _onCreateNode.apply(this, arguments);
}

exports.onCreateNode = onCreateNode;