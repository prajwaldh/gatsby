'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _asyncCache = require('async-cache');

var _asyncCache2 = _interopRequireDefault(_asyncCache);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _immutableObjectMethods = require('immutable-object-methods');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

module.exports = function (_AsyncCache) {
  _inherits(AsyncCachePromise, _AsyncCache);

  function AsyncCachePromise(_opts) {
    _classCallCheck(this, AsyncCachePromise);

    var load = _opts.load;

    var opts = (0, _immutableObjectMethods.set)(_opts, 'load', function (key, cb) {
      load(key).then(function (data) {
        return cb(null, data);
      }, cb);
    });
    return _possibleConstructorReturn(this, Object.getPrototypeOf(AsyncCachePromise).call(this, opts));
  }

  _createClass(AsyncCachePromise, [{
    key: 'get',
    value: function get(value) {
      var _this2 = this;

      return _bluebird2.default.promisify(function (cb) {
        _get(Object.getPrototypeOf(AsyncCachePromise.prototype), 'get', _this2).call(_this2, value, cb);
      })();
    }
  }]);

  return AsyncCachePromise;
}(_asyncCache2.default);