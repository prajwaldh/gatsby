{"expireTime":9007200804686340000,"key":"transformer-remark-markdown-html-d0bcae82ac12ee6c03845107aec1acf7-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>In the <a href=\"/docs/production-app/\">previous section</a>, we saw how Gatsby uses webpack to build the JavaScript bundles required to take over the user experience once the first HTML page has finished loading. But how do the original HTML pages get generated?</p>\n<p>The high level process is:</p>\n<ol>\n<li>Create a webpack configuration for Node.js Server Side Rendering (SSR)</li>\n<li>Build a <code class=\"language-text\">page-renderer.js</code> that takes a page path and renders its HTML</li>\n<li>For each page in redux, call <code class=\"language-text\">page-renderer.js</code></li>\n</ol>\n<h2 id=\"webpack\"><a href=\"#webpack\" aria-label=\"webpack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack</h2>\n<p>For the first step, we use webpack to build an optimized Node.js bundle. The entry point for this is called <code class=\"language-text\">static-entry.js</code></p>\n<h2 id=\"static-entryjs\"><a href=\"#static-entryjs\" aria-label=\"static entryjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static-entry.js</h2>\n<p><a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js\">static-entry.js</a> exports a function that takes a path and returns rendered HTML. Hereâ€™s what it does to create that HTML:</p>\n<ol>\n<li><a href=\"/docs/html-generation/#1-require-page-json-and-webpack-chunk-data-sources\">Require page, json, and webpack chunk data sources</a></li>\n<li><a href=\"/docs/html-generation/#2-create-html-react-container\">Create HTML React Container</a></li>\n<li><a href=\"/docs/html-generation/#3-load-page-and-data\">Load Page and Data</a></li>\n<li><a href=\"/docs/html-generation/#4-create-page-component\">Create Page Component</a></li>\n<li><a href=\"/docs/html-generation/#5-add-preload-link-and-script-tags\">Add Preload Link and Script Tags</a></li>\n<li><a href=\"/docs/html-generation/#6-inject-page-info-to-cdata\">Inject Page Info to CDATA</a></li>\n<li><a href=\"/docs/html-generation/#7-render-final-html-document\">Render Final HTML Document</a></li>\n</ol>\n<h4 id=\"1-require-page-json-and-webpack-chunk-data-sources\"><a href=\"#1-require-page-json-and-webpack-chunk-data-sources\" aria-label=\"1 require page json and webpack chunk data sources permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Require page, json, and webpack chunk data sources</h4>\n<p>In order to perform the rest of the operations, we need some data sources to work off. These are:</p>\n<h5 id=\"sync-requiresjs\"><a href=\"#sync-requiresjs\" aria-label=\"sync requiresjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sync-requires.js</h5>\n<p>Exports <code class=\"language-text\">components</code> which is a map of componentChunkName to require statements for the disk location of the component. See <a href=\"/docs/write-pages/#sync-requiresjs\">Write Out Pages</a>.</p>\n<h5 id=\"datajson\"><a href=\"#datajson\" aria-label=\"datajson permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>data.json</h5>\n<p>Contains all the pages (with componentChunkName, jsonName, and path) and the dataPaths which map jsonName to dataPath. See <a href=\"/docs/write-pages/#datajson\">Write Out Pages</a> for more.</p>\n<h5 id=\"webpackstatsjson\"><a href=\"#webpackstatsjson\" aria-label=\"webpackstatsjson permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack.stats.json</h5>\n<p>Contains a mapping from componentChunkName to the webpack chunks comprising it. See <a href=\"/docs/how-code-splitting-works/#webpackstatsjson\">Code Splitting</a> for more.</p>\n<h5 id=\"chunk-mapjson\"><a href=\"#chunk-mapjson\" aria-label=\"chunk mapjson permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>chunk-map.json</h5>\n<p>Contains a mapping from componentChunkName to their core (non-shared) chunks. See <a href=\"/docs/how-code-splitting-works/#chunk-mapjson\">Code Splitting</a> for more.</p>\n<h4 id=\"2-create-html-react-container\"><a href=\"#2-create-html-react-container\" aria-label=\"2 create html react container permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Create HTML React Container</h4>\n<p>We create an <code class=\"language-text\">html</code> React component that will eventually be rendered to a file. It will have props for each section (e.g <code class=\"language-text\">head</code>, <code class=\"language-text\">preBodyComponents</code>, <code class=\"language-text\">postBodyComponents</code>). This is owned by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/default-html.js\">default-html.js</a>.</p>\n<h4 id=\"3-load-page-and-data\"><a href=\"#3-load-page-and-data\" aria-label=\"3 load page and data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Load Page and Data</h4>\n<p>The only input to <code class=\"language-text\">static-entry.js</code> is a path. So we must look up the page for that path in order to find its <code class=\"language-text\">componentChunkName</code> and <code class=\"language-text\">jsonName</code>. This is achieved by simply looking up the pages array contained in <code class=\"language-text\">data.json</code>. We can then load its data by looking it up in <code class=\"language-text\">dataPaths</code>.</p>\n<h4 id=\"4-create-page-component\"><a href=\"#4-create-page-component\" aria-label=\"4 create page component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Create Page Component</h4>\n<p>Now weâ€™re ready to create a React component for the page (inside the Html container). This is handled by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L123\">RouteHandler</a>. Its render will create an element from the component in <code class=\"language-text\">sync-requires.js</code>.</p>\n<h4 id=\"5-add-preload-link-and-script-tags\"><a href=\"#5-add-preload-link-and-script-tags\" aria-label=\"5 add preload link and script tags permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Add Preload Link and Script Tags</h4>\n<p>This is covered by the <a href=\"/docs/how-code-splitting-works/#construct-link-and-script-tags-for-current-page\">Code Splitting</a> docs. We essentially create a <code class=\"language-text\">&lt;link rel=&quot;preload&quot; href=&quot;component.js&quot;&gt;</code> in the document head, and a follow up <code class=\"language-text\">&lt;script src=&quot;component.js&quot;&gt;</code> at the end of the document. For each component and page JSON.</p>\n<h4 id=\"6-inject-page-info-to-cdata\"><a href=\"#6-inject-page-info-to-cdata\" aria-label=\"6 inject page info to cdata permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Inject Page Info to CDATA</h4>\n<p>The <a href=\"/docs/production-app/#first-load\">production-app.js</a> needs to know the page that itâ€™s rendering. The way we pass this information is by setting it in CDATA during HTML generation, since we know that page at this point. So we add the following to the <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L325\">top of the HTML document</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">/*\n&lt;![\n  CDATA[ */\n    window.page={\n      \"path\": \"/blog/2.js\",\n      \"componentChunkName\": \"component---src-blog-2-js\",\n      jsonName\": \"blog-2-995\"\n    };\n    window.dataPath=\"621/path---blog-2-995-a74-dwfQIanOJGe2gi27a9CLKHjamc\";\n  */ ]\n]>\n*/</code></pre></div>\n<h4 id=\"7-render-final-html-document\"><a href=\"#7-render-final-html-document\" aria-label=\"7 render final html document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Render Final HTML Document</h4>\n<p>Finally, we call <a href=\"https://reactjs.org/docs/react-dom.html\">react-dom</a> and render our top level Html component to a string and return it.</p>\n<h2 id=\"build-htmljs\"><a href=\"#build-htmljs\" aria-label=\"build htmljs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>build-html.js</h2>\n<p>So, weâ€™ve built the means to generate HTML for a page. This webpack bundle is saved to <code class=\"language-text\">public/page-renderer.js</code>. Next, we need to use it to generate HTML for all the siteâ€™s pages.</p>\n<p>Page HTML does not depend on other pages. So we can perform this step in parallel. We use the <a href=\"https://github.com/facebook/jest/tree/master/packages/jest-worker\">jest-worker</a> library to make this easier. The <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/html-renderer-queue.js\">html-renderer-queue.js</a> creates a pool of workers equal to the number of cores on your machine. It then partitions the pages into groups and sends them to the workers, which run <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/worker.js\">worker.js</a>.</p>\n<p>The workers simply iterate over each page in their partition, and call the <code class=\"language-text\">page-renderer.js</code> with the page. It then saves the html for the pageâ€™s path in <code class=\"language-text\">/public</code>.</p>\n<p>Once all workers have finished, weâ€™re done!</p>"}