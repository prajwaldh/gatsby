{"expireTime":9007200804686342000,"key":"transformer-remark-markdown-ast-5eec251e9d5864b33d30f7ef5849847e-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Nodes are created by calling the ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":34,"offset":34},"indent":[]}},{"type":"link","title":null,"url":"/docs/actions/#createNode","children":[{"type":"text","value":"createNode","position":{"start":{"line":2,"column":35,"offset":35},"end":{"line":2,"column":45,"offset":45},"indent":[]}}],"position":{"start":{"line":2,"column":34,"offset":34},"end":{"line":2,"column":73,"offset":73},"indent":[]}},{"type":"text","value":" action. Nodes can be any object.","position":{"start":{"line":2,"column":73,"offset":73},"end":{"line":2,"column":106,"offset":106},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":106,"offset":106},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A node is stored in redux under the ","position":{"start":{"line":4,"column":1,"offset":108},"end":{"line":4,"column":37,"offset":144},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nodes</code>","position":{"start":{"line":4,"column":37,"offset":144},"end":{"line":4,"column":44,"offset":151},"indent":[]}},{"type":"text","value":" namespace, whose state is a map of the node ID to the actual node object.","position":{"start":{"line":4,"column":44,"offset":151},"end":{"line":4,"column":118,"offset":225},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":108},"end":{"line":4,"column":118,"offset":225},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#sourcing-nodes","title":null,"data":{"hProperties":{"aria-label":"sourcing nodes permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Sourcing Nodes","position":{"start":{"line":6,"column":4,"offset":230},"end":{"line":6,"column":18,"offset":244},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":227},"end":{"line":6,"column":18,"offset":244},"indent":[]},"data":{"id":"sourcing-nodes","htmlAttributes":{"id":"sourcing-nodes"},"hProperties":{"id":"sourcing-nodes"}}},{"type":"paragraph","children":[{"type":"text","value":"The creation of nodes occurs primarily in the ","position":{"start":{"line":8,"column":1,"offset":246},"end":{"line":8,"column":47,"offset":292},"indent":[]}},{"type":"link","title":null,"url":"/docs/node-apis/#sourceNodes","children":[{"type":"text","value":"sourceNodes","position":{"start":{"line":8,"column":48,"offset":293},"end":{"line":8,"column":59,"offset":304},"indent":[]}}],"position":{"start":{"line":8,"column":47,"offset":292},"end":{"line":8,"column":90,"offset":335},"indent":[]}},{"type":"text","value":" bootstrap phase. Nodes created during this phase are top level nodes. I.e, they have no parent. This is represented by source plugins setting the node’s ","position":{"start":{"line":8,"column":90,"offset":335},"end":{"line":8,"column":244,"offset":489},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">parent</code>","position":{"start":{"line":8,"column":244,"offset":489},"end":{"line":8,"column":252,"offset":497},"indent":[]}},{"type":"text","value":" field to ","position":{"start":{"line":8,"column":252,"offset":497},"end":{"line":8,"column":262,"offset":507},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":8,"column":262,"offset":507},"end":{"line":8,"column":268,"offset":513},"indent":[]}},{"type":"text","value":". Nodes created via transform plugins (who implement ","position":{"start":{"line":8,"column":268,"offset":513},"end":{"line":8,"column":321,"offset":566},"indent":[]}},{"type":"link","title":null,"url":"/docs/node-apis/#onCreateNode","children":[{"type":"text","value":"onCreateNode","position":{"start":{"line":8,"column":322,"offset":567},"end":{"line":8,"column":334,"offset":579},"indent":[]}}],"position":{"start":{"line":8,"column":321,"offset":566},"end":{"line":8,"column":366,"offset":611},"indent":[]}},{"type":"text","value":") will have source nodes as their parents, or other transformed nodes. For a rough overview of what happens when source nodes run, see the ","position":{"start":{"line":8,"column":366,"offset":611},"end":{"line":8,"column":505,"offset":750},"indent":[]}},{"type":"link","title":null,"url":"/docs/how-plugins-apis-are-run/#using-traceid-to-await-downstream-api-calls","children":[{"type":"text","value":"traceID illustration","position":{"start":{"line":8,"column":506,"offset":751},"end":{"line":8,"column":526,"offset":771},"indent":[]}}],"position":{"start":{"line":8,"column":505,"offset":750},"end":{"line":8,"column":604,"offset":849},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":8,"column":604,"offset":849},"end":{"line":8,"column":605,"offset":850},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":246},"end":{"line":8,"column":605,"offset":850},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#parentchildrefs","title":null,"data":{"hProperties":{"aria-label":"parentchildrefs permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Parent/Child/Refs","position":{"start":{"line":10,"column":4,"offset":855},"end":{"line":10,"column":21,"offset":872},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":852},"end":{"line":10,"column":21,"offset":872},"indent":[]},"data":{"id":"parentchildrefs","htmlAttributes":{"id":"parentchildrefs"},"hProperties":{"id":"parentchildrefs"}}},{"type":"paragraph","children":[{"type":"text","value":"There are a few different scenarios for creating parent/child relationships.","position":{"start":{"line":12,"column":1,"offset":874},"end":{"line":12,"column":77,"offset":950},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":874},"end":{"line":12,"column":77,"offset":950},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#node-relationship-storage-model","title":null,"data":{"hProperties":{"aria-label":"node relationship storage model permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Node relationship storage model","position":{"start":{"line":14,"column":5,"offset":956},"end":{"line":14,"column":36,"offset":987},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":952},"end":{"line":14,"column":36,"offset":987},"indent":[]},"data":{"id":"node-relationship-storage-model","htmlAttributes":{"id":"node-relationship-storage-model"},"hProperties":{"id":"node-relationship-storage-model"}}},{"type":"paragraph","children":[{"type":"text","value":"All nodes in Gatsby are stored in a flat structure in the redux ","position":{"start":{"line":16,"column":1,"offset":989},"end":{"line":16,"column":65,"offset":1053},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nodes</code>","position":{"start":{"line":16,"column":65,"offset":1053},"end":{"line":16,"column":72,"offset":1060},"indent":[]}},{"type":"text","value":" namespace. A node’s ","position":{"start":{"line":16,"column":72,"offset":1060},"end":{"line":16,"column":93,"offset":1081},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":16,"column":93,"offset":1081},"end":{"line":16,"column":103,"offset":1091},"indent":[]}},{"type":"text","value":" field is an array of node IDS, whose nodes are also at the top level of the redux namespace. Here’s an example of the ","position":{"start":{"line":16,"column":103,"offset":1091},"end":{"line":16,"column":222,"offset":1210},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nodes</code>","position":{"start":{"line":16,"column":222,"offset":1210},"end":{"line":16,"column":229,"offset":1217},"indent":[]}},{"type":"text","value":" namespace.","position":{"start":{"line":16,"column":229,"offset":1217},"end":{"line":16,"column":240,"offset":1228},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":989},"end":{"line":16,"column":240,"offset":1228},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id1`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`File`</span></span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`id2`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`id3`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id2`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`markdownRemark`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id3`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`postsJson`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":1230},"end":{"line":24,"column":4,"offset":1423},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An important note here is that we do not store a distinct collection of each type of child. Rather we store a single collection that they’re all packed into. This has some implications on ","position":{"start":{"line":26,"column":1,"offset":1425},"end":{"line":26,"column":189,"offset":1613},"indent":[]}},{"type":"link","title":null,"url":"/docs/schema-gql-type/#child-fields-creation","children":[{"type":"text","value":"child field inference","position":{"start":{"line":26,"column":190,"offset":1614},"end":{"line":26,"column":211,"offset":1635},"indent":[]}}],"position":{"start":{"line":26,"column":189,"offset":1613},"end":{"line":26,"column":258,"offset":1682},"indent":[]}},{"type":"text","value":" in the Schema Generation phase.","position":{"start":{"line":26,"column":258,"offset":1682},"end":{"line":26,"column":290,"offset":1714},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1425},"end":{"line":26,"column":290,"offset":1714},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#explicitly-recording-a-parentchild-relationship","title":null,"data":{"hProperties":{"aria-label":"explicitly recording a parentchild relationship permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Explicitly recording a parent/child relationship","position":{"start":{"line":28,"column":5,"offset":1720},"end":{"line":28,"column":53,"offset":1768},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1716},"end":{"line":28,"column":53,"offset":1768},"indent":[]},"data":{"id":"explicitly-recording-a-parentchild-relationship","htmlAttributes":{"id":"explicitly-recording-a-parentchild-relationship"},"hProperties":{"id":"explicitly-recording-a-parentchild-relationship"}}},{"type":"paragraph","children":[{"type":"text","value":"This occurs when a transformer plugin implements ","position":{"start":{"line":30,"column":1,"offset":1770},"end":{"line":30,"column":50,"offset":1819},"indent":[]}},{"type":"link","title":null,"url":"/docs/node-apis/#onCreateNode","children":[{"type":"text","value":"onCreateNode","position":{"start":{"line":30,"column":51,"offset":1820},"end":{"line":30,"column":63,"offset":1832},"indent":[]}}],"position":{"start":{"line":30,"column":50,"offset":1819},"end":{"line":30,"column":95,"offset":1864},"indent":[]}},{"type":"text","value":" in order to create some child of the originally created node. In this case, the transformer plugin will call ","position":{"start":{"line":30,"column":95,"offset":1864},"end":{"line":30,"column":205,"offset":1974},"indent":[]}},{"type":"link","title":null,"url":"/docs/actions/#createParentChildLink","children":[{"type":"text","value":"createParentChildLink","position":{"start":{"line":30,"column":206,"offset":1975},"end":{"line":30,"column":227,"offset":1996},"indent":[]}}],"position":{"start":{"line":30,"column":205,"offset":1974},"end":{"line":30,"column":266,"offset":2035},"indent":[]}},{"type":"text","value":", with the original node, and the newly created node. All this does is push the child’s node ID onto the parent’s ","position":{"start":{"line":30,"column":266,"offset":2035},"end":{"line":30,"column":380,"offset":2149},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":30,"column":380,"offset":2149},"end":{"line":30,"column":390,"offset":2159},"indent":[]}},{"type":"text","value":" collection and resave the parent to redux.","position":{"start":{"line":30,"column":390,"offset":2159},"end":{"line":30,"column":433,"offset":2202},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1770},"end":{"line":30,"column":433,"offset":2202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This does ","position":{"start":{"line":32,"column":1,"offset":2204},"end":{"line":32,"column":11,"offset":2214},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":32,"column":13,"offset":2216},"end":{"line":32,"column":16,"offset":2219},"indent":[]}}],"position":{"start":{"line":32,"column":11,"offset":2214},"end":{"line":32,"column":18,"offset":2221},"indent":[]}},{"type":"text","value":" automatically create a ","position":{"start":{"line":32,"column":18,"offset":2221},"end":{"line":32,"column":42,"offset":2245},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">parent</code>","position":{"start":{"line":32,"column":42,"offset":2245},"end":{"line":32,"column":50,"offset":2253},"indent":[]}},{"type":"text","value":" field on the child node. If a plugin author wishes to allow child nodes to navigate to their parents in GraphQL queries, they must explicitly set ","position":{"start":{"line":32,"column":50,"offset":2253},"end":{"line":32,"column":197,"offset":2400},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">childNode.parent: &#39;parent.id&#39;</code>","position":{"start":{"line":32,"column":197,"offset":2400},"end":{"line":32,"column":228,"offset":2431},"indent":[]}},{"type":"text","value":" when creating the child node.","position":{"start":{"line":32,"column":228,"offset":2431},"end":{"line":32,"column":258,"offset":2461},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2204},"end":{"line":32,"column":258,"offset":2461},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#foreign-key-reference-___node","title":null,"data":{"hProperties":{"aria-label":"foreign key reference ___node permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Foreign Key reference (","position":{"start":{"line":34,"column":5,"offset":2467},"end":{"line":34,"column":28,"offset":2490},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">___NODE</code>","position":{"start":{"line":34,"column":28,"offset":2490},"end":{"line":34,"column":37,"offset":2499},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":34,"column":37,"offset":2499},"end":{"line":34,"column":38,"offset":2500},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2463},"end":{"line":34,"column":38,"offset":2500},"indent":[]},"data":{"id":"foreign-key-reference-___node","htmlAttributes":{"id":"foreign-key-reference-___node"},"hProperties":{"id":"foreign-key-reference-___node"}}},{"type":"paragraph","children":[{"type":"text","value":"We’ve established that child nodes are stored at the top level in redux, and are referenced via ids in their parent’s ","position":{"start":{"line":36,"column":1,"offset":2502},"end":{"line":36,"column":119,"offset":2620},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">children</code>","position":{"start":{"line":36,"column":119,"offset":2620},"end":{"line":36,"column":129,"offset":2630},"indent":[]}},{"type":"text","value":" collection. The same mechanism drives foreign key relationships. Foreign key fields have a ","position":{"start":{"line":36,"column":129,"offset":2630},"end":{"line":36,"column":221,"offset":2722},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">___NODE</code>","position":{"start":{"line":36,"column":221,"offset":2722},"end":{"line":36,"column":230,"offset":2731},"indent":[]}},{"type":"text","value":" suffix on the field name. At query time, Gatsby will take the field’s value as an ID, and search redux for a matching node. This is explained in more detail in ","position":{"start":{"line":36,"column":230,"offset":2731},"end":{"line":36,"column":391,"offset":2892},"indent":[]}},{"type":"link","title":null,"url":"/docs/schema-gql-type#foreign-key-reference-___node","children":[{"type":"text","value":"schema gqlTypes","position":{"start":{"line":36,"column":392,"offset":2893},"end":{"line":36,"column":407,"offset":2908},"indent":[]}}],"position":{"start":{"line":36,"column":391,"offset":2892},"end":{"line":36,"column":461,"offset":2962},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":36,"column":461,"offset":2962},"end":{"line":36,"column":462,"offset":2963},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2502},"end":{"line":36,"column":462,"offset":2963},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#plain-objects-at-creation-time","title":null,"data":{"hProperties":{"aria-label":"plain objects at creation time permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Plain objects at creation time","position":{"start":{"line":38,"column":5,"offset":2969},"end":{"line":38,"column":35,"offset":2999},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2965},"end":{"line":38,"column":35,"offset":2999},"indent":[]},"data":{"id":"plain-objects-at-creation-time","htmlAttributes":{"id":"plain-objects-at-creation-time"},"hProperties":{"id":"plain-objects-at-creation-time"}}},{"type":"paragraph","children":[{"type":"text","value":"Let’s say you create the following node by passing it to ","position":{"start":{"line":40,"column":1,"offset":3001},"end":{"line":40,"column":58,"offset":3058},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">createNode</code>","position":{"start":{"line":40,"column":58,"offset":3058},"end":{"line":40,"column":70,"offset":3070},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":3001},"end":{"line":40,"column":70,"offset":3070},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    car<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":42,"column":1,"offset":3072},"end":{"line":49,"column":4,"offset":3132},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The value for ","position":{"start":{"line":51,"column":1,"offset":3134},"end":{"line":51,"column":15,"offset":3148},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">baz</code>","position":{"start":{"line":51,"column":15,"offset":3148},"end":{"line":51,"column":20,"offset":3153},"indent":[]}},{"type":"text","value":" is itself an object. That value’s parent is the top level object. In this case, Gatsby simply saves the top level node as is to redux. It doesn’t attempt to extract ","position":{"start":{"line":51,"column":20,"offset":3153},"end":{"line":51,"column":186,"offset":3319},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">baz</code>","position":{"start":{"line":51,"column":186,"offset":3319},"end":{"line":51,"column":191,"offset":3324},"indent":[]}},{"type":"text","value":" into its own node. It does however track the subobject’s root NodeID using ","position":{"start":{"line":51,"column":191,"offset":3324},"end":{"line":51,"column":267,"offset":3400},"indent":[]}},{"type":"link","title":null,"url":"/docs/node-tracking/","children":[{"type":"text","value":"Node Tracking","position":{"start":{"line":51,"column":268,"offset":3401},"end":{"line":51,"column":281,"offset":3414},"indent":[]}}],"position":{"start":{"line":51,"column":267,"offset":3400},"end":{"line":51,"column":304,"offset":3437},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":3134},"end":{"line":51,"column":304,"offset":3437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"During schema compilation, Gatsby will infer the sub object’s type while ","position":{"start":{"line":53,"column":1,"offset":3439},"end":{"line":53,"column":74,"offset":3512},"indent":[]}},{"type":"link","title":null,"url":"/docs/schema-gql-type#plain-object-or-value-field","children":[{"type":"text","value":"creating the gqlType","position":{"start":{"line":53,"column":75,"offset":3513},"end":{"line":53,"column":95,"offset":3533},"indent":[]}}],"position":{"start":{"line":53,"column":74,"offset":3512},"end":{"line":53,"column":147,"offset":3585},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":53,"column":147,"offset":3585},"end":{"line":53,"column":148,"offset":3586},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":3439},"end":{"line":53,"column":148,"offset":3586},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#freshstale-nodes","title":null,"data":{"hProperties":{"aria-label":"freshstale nodes permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Fresh/stale nodes","position":{"start":{"line":55,"column":4,"offset":3591},"end":{"line":55,"column":21,"offset":3608},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3588},"end":{"line":55,"column":21,"offset":3608},"indent":[]},"data":{"id":"freshstale-nodes","htmlAttributes":{"id":"freshstale-nodes"},"hProperties":{"id":"freshstale-nodes"}}},{"type":"paragraph","children":[{"type":"text","value":"Every time a build is re-run, there is a chance that a node that exists in the redux store no longer exists in the original data source. E.g a file might be deleted from disk between runs. We need a way to indicate that fact to Gatsby.","position":{"start":{"line":57,"column":1,"offset":3610},"end":{"line":57,"column":236,"offset":3845},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3610},"end":{"line":57,"column":236,"offset":3845},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To track this, there is a redux ","position":{"start":{"line":59,"column":1,"offset":3847},"end":{"line":59,"column":33,"offset":3879},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nodesTouched</code>","position":{"start":{"line":59,"column":33,"offset":3879},"end":{"line":59,"column":47,"offset":3893},"indent":[]}},{"type":"text","value":" namespace that tracks whether a particular node ID has been touched. This occurs whenever a node is created (handled by ","position":{"start":{"line":59,"column":47,"offset":3893},"end":{"line":59,"column":168,"offset":4014},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/redux/reducers/nodes-touched.js","children":[{"type":"text","value":"CREATE_NODE","position":{"start":{"line":59,"column":169,"offset":4015},"end":{"line":59,"column":180,"offset":4026},"indent":[]}}],"position":{"start":{"line":59,"column":168,"offset":4014},"end":{"line":59,"column":281,"offset":4127},"indent":[]}},{"type":"text","value":"), or an explicit call to ","position":{"start":{"line":59,"column":281,"offset":4127},"end":{"line":59,"column":307,"offset":4153},"indent":[]}},{"type":"link","title":null,"url":"/docs/actions/#touchNode","children":[{"type":"text","value":"touchNode","position":{"start":{"line":59,"column":308,"offset":4154},"end":{"line":59,"column":317,"offset":4163},"indent":[]}}],"position":{"start":{"line":59,"column":307,"offset":4153},"end":{"line":59,"column":344,"offset":4190},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":59,"column":344,"offset":4190},"end":{"line":59,"column":345,"offset":4191},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3847},"end":{"line":59,"column":345,"offset":4191},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When a ","position":{"start":{"line":61,"column":1,"offset":4193},"end":{"line":61,"column":8,"offset":4200},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">source-nodes</code>","position":{"start":{"line":61,"column":8,"offset":4200},"end":{"line":61,"column":22,"offset":4214},"indent":[]}},{"type":"text","value":" plugin runs again, it generally recreates nodes (which automatically touches them too). But in some cases, such as ","position":{"start":{"line":61,"column":22,"offset":4214},"end":{"line":61,"column":138,"offset":4330},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/src/gatsby-node.js#L56","children":[{"type":"text","value":"transformer-screenshot","position":{"start":{"line":61,"column":139,"offset":4331},"end":{"line":61,"column":161,"offset":4353},"indent":[]}}],"position":{"start":{"line":61,"column":138,"offset":4330},"end":{"line":61,"column":272,"offset":4464},"indent":[]}},{"type":"text","value":", a node might not change, but we still want to keep it around for the build. In these cases, we must explicitly call ","position":{"start":{"line":61,"column":272,"offset":4464},"end":{"line":61,"column":390,"offset":4582},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">touchNode</code>","position":{"start":{"line":61,"column":390,"offset":4582},"end":{"line":61,"column":401,"offset":4593},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":61,"column":401,"offset":4593},"end":{"line":61,"column":402,"offset":4594},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":4193},"end":{"line":61,"column":402,"offset":4594},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Any nodes that aren’t touched by the end of the ","position":{"start":{"line":63,"column":1,"offset":4596},"end":{"line":63,"column":49,"offset":4644},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">source-nodes</code>","position":{"start":{"line":63,"column":49,"offset":4644},"end":{"line":63,"column":63,"offset":4658},"indent":[]}},{"type":"text","value":" phase, are deleted. This is performed via a diff between the ","position":{"start":{"line":63,"column":63,"offset":4658},"end":{"line":63,"column":125,"offset":4720},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nodesTouched</code>","position":{"start":{"line":63,"column":125,"offset":4720},"end":{"line":63,"column":139,"offset":4734},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":63,"column":139,"offset":4734},"end":{"line":63,"column":144,"offset":4739},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nodes</code>","position":{"start":{"line":63,"column":144,"offset":4739},"end":{"line":63,"column":151,"offset":4746},"indent":[]}},{"type":"text","value":" redux namespaces, in ","position":{"start":{"line":63,"column":151,"offset":4746},"end":{"line":63,"column":173,"offset":4768},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/source-nodes.js","children":[{"type":"text","value":"source-nodes.js","position":{"start":{"line":63,"column":174,"offset":4769},"end":{"line":63,"column":189,"offset":4784},"indent":[]}}],"position":{"start":{"line":63,"column":173,"offset":4768},"end":{"line":63,"column":280,"offset":4875},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":4596},"end":{"line":63,"column":280,"offset":4875},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#changing-a-nodes-fields","title":null,"data":{"hProperties":{"aria-label":"changing a nodes fields permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Changing a node’s fields","position":{"start":{"line":65,"column":4,"offset":4880},"end":{"line":65,"column":28,"offset":4904},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":4877},"end":{"line":65,"column":28,"offset":4904},"indent":[]},"data":{"id":"changing-a-nodes-fields","htmlAttributes":{"id":"changing-a-nodes-fields"},"hProperties":{"id":"changing-a-nodes-fields"}}},{"type":"paragraph","children":[{"type":"text","value":"From a site developer’s point of view, nodes are immutable. In the sense that if you simply change a node object, those changes will not be seen by other parts of Gatsby. To make a change to a node, it must be persisted to redux via an action.","position":{"start":{"line":67,"column":1,"offset":4906},"end":{"line":67,"column":244,"offset":5149},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":4906},"end":{"line":67,"column":244,"offset":5149},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, how do you add a field to an existing node? E.g perhaps in onCreateNode, you want to add a transformer specific field? You can call ","position":{"start":{"line":69,"column":1,"offset":5151},"end":{"line":69,"column":137,"offset":5287},"indent":[]}},{"type":"link","title":null,"url":"","children":[{"type":"text","value":"createNodeField","position":{"start":{"line":69,"column":138,"offset":5288},"end":{"line":69,"column":153,"offset":5303},"indent":[]}}],"position":{"start":{"line":69,"column":137,"offset":5287},"end":{"line":69,"column":156,"offset":5306},"indent":[]}},{"type":"text","value":" and this will simply add your field to the node’s ","position":{"start":{"line":69,"column":156,"offset":5306},"end":{"line":69,"column":207,"offset":5357},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">node.fields</code>","position":{"start":{"line":69,"column":207,"offset":5357},"end":{"line":69,"column":220,"offset":5370},"indent":[]}},{"type":"text","value":" object and then persists it to redux. This can then be referenced by other parts of your plugin at later stages of the build.","position":{"start":{"line":69,"column":220,"offset":5370},"end":{"line":69,"column":346,"offset":5496},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":5151},"end":{"line":69,"column":346,"offset":5496},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#node-tracking","title":null,"data":{"hProperties":{"aria-label":"node tracking permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Node Tracking","position":{"start":{"line":71,"column":4,"offset":5501},"end":{"line":71,"column":17,"offset":5514},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":5498},"end":{"line":71,"column":17,"offset":5514},"indent":[]},"data":{"id":"node-tracking","htmlAttributes":{"id":"node-tracking"},"hProperties":{"id":"node-tracking"}}},{"type":"paragraph","children":[{"type":"text","value":"When a node is created, ","position":{"start":{"line":73,"column":1,"offset":5516},"end":{"line":73,"column":25,"offset":5540},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">createNode</code>","position":{"start":{"line":73,"column":25,"offset":5540},"end":{"line":73,"column":37,"offset":5552},"indent":[]}},{"type":"text","value":" will track all its fields against its nodeId. See ","position":{"start":{"line":73,"column":37,"offset":5552},"end":{"line":73,"column":88,"offset":5603},"indent":[]}},{"type":"link","title":null,"url":"/docs/node-tracking/","children":[{"type":"text","value":"Node Tracking Docs","position":{"start":{"line":73,"column":89,"offset":5604},"end":{"line":73,"column":107,"offset":5622},"indent":[]}}],"position":{"start":{"line":73,"column":88,"offset":5603},"end":{"line":73,"column":130,"offset":5645},"indent":[]}},{"type":"text","value":" for more.","position":{"start":{"line":73,"column":130,"offset":5645},"end":{"line":73,"column":140,"offset":5655},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":5516},"end":{"line":73,"column":140,"offset":5655},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":74,"column":1,"offset":5656}}}}