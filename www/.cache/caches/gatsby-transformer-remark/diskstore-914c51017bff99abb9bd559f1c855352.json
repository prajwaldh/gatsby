{"expireTime":9007200804686346000,"key":"transformer-remark-markdown-ast-87bf1b4838fc3ac1b6e0441f493c5efe-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","url":"#input-filters-vs-gqltype","title":null,"data":{"hProperties":{"aria-label":"input filters vs gqltype permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Input Filters vs gqlType","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":28,"offset":28},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":28,"offset":28},"indent":[]},"data":{"id":"input-filters-vs-gqltype","htmlAttributes":{"id":"input-filters-vs-gqltype"},"hProperties":{"id":"input-filters-vs-gqltype"}}},{"type":"paragraph","children":[{"type":"text","value":"In ","position":{"start":{"line":4,"column":1,"offset":30},"end":{"line":4,"column":4,"offset":33},"indent":[]}},{"type":"link","title":null,"url":"/docs/schema-gql-type","children":[{"type":"text","value":"gqlTypes","position":{"start":{"line":4,"column":5,"offset":34},"end":{"line":4,"column":13,"offset":42},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":33},"end":{"line":4,"column":37,"offset":66},"indent":[]}},{"type":"text","value":", we inferred a Gatsby Node’s main fields. These allow us to query a node’s children, parent and object fields. But these are only useful once a top level GraphQL Query has returned results. In order to query by those fields, we must create GraphQL objects for input filters. E.g, querying for all markdownRemark nodes that have 4 paragraphs.","position":{"start":{"line":4,"column":37,"offset":66},"end":{"line":4,"column":379,"offset":408},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":30},"end":{"line":4,"column":379,"offset":408},"indent":[]}},{"type":"html","lang":"graphql","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  markdownRemark<span class=\"token punctuation\">(</span><span class=\"token attr-name\">wordCount</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">paragraphs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    html\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":6,"column":1,"offset":410},"end":{"line":12,"column":4,"offset":498},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The arguments (","position":{"start":{"line":14,"column":1,"offset":500},"end":{"line":14,"column":16,"offset":515},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">wordcount: {paragraphs: {eq: 4}}</code>","position":{"start":{"line":14,"column":16,"offset":515},"end":{"line":14,"column":50,"offset":549},"indent":[]}},{"type":"text","value":") to the query are known as Input filters. In graphql-js, they are the ","position":{"start":{"line":14,"column":50,"offset":549},"end":{"line":14,"column":121,"offset":620},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.org/graphql-js/type/#graphqlinputobjecttype","children":[{"type":"text","value":"GraphQLInputObjectType","position":{"start":{"line":14,"column":122,"offset":621},"end":{"line":14,"column":144,"offset":643},"indent":[]}}],"position":{"start":{"line":14,"column":121,"offset":620},"end":{"line":14,"column":206,"offset":705},"indent":[]}},{"type":"text","value":". This section covers how these Input filters are inferred.","position":{"start":{"line":14,"column":206,"offset":705},"end":{"line":14,"column":265,"offset":764},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":500},"end":{"line":14,"column":265,"offset":764},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#inferring-input-filters-from-example-node-values","title":null,"data":{"hProperties":{"aria-label":"inferring input filters from example node values permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Inferring input filters from example node values","position":{"start":{"line":16,"column":5,"offset":770},"end":{"line":16,"column":53,"offset":818},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":766},"end":{"line":16,"column":53,"offset":818},"indent":[]},"data":{"id":"inferring-input-filters-from-example-node-values","htmlAttributes":{"id":"inferring-input-filters-from-example-node-values"},"hProperties":{"id":"inferring-input-filters-from-example-node-values"}}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to generate an input field for each type of field on the redux nodes. For example, we might want to query markdown nodes by their front matter author:","position":{"start":{"line":18,"column":1,"offset":820},"end":{"line":18,"column":169,"offset":988},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":820},"end":{"line":18,"column":169,"offset":988},"indent":[]}},{"type":"html","lang":"graphql","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  markdownRemark<span class=\"token punctuation\">(</span><span class=\"token attr-name\">frontmatter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"F. Scott Fitzgerald\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    id\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":20,"column":1,"offset":990},"end":{"line":26,"column":4,"offset":1094},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This step is handled by ","position":{"start":{"line":28,"column":1,"offset":1096},"end":{"line":28,"column":25,"offset":1120},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-input-fields.js#L235","children":[{"type":"text","value":"inferInputObjectStrctureFromNodes","position":{"start":{"line":28,"column":26,"offset":1121},"end":{"line":28,"column":59,"offset":1154},"indent":[]}}],"position":{"start":{"line":28,"column":25,"offset":1120},"end":{"line":28,"column":170,"offset":1265},"indent":[]}},{"type":"text","value":". First, we generate an example Value (see ","position":{"start":{"line":28,"column":170,"offset":1265},"end":{"line":28,"column":213,"offset":1308},"indent":[]}},{"type":"link","title":null,"url":"/docs/schema-gql-type#gqltype-creation","children":[{"type":"text","value":"gqlTypes","position":{"start":{"line":28,"column":214,"offset":1309},"end":{"line":28,"column":222,"offset":1317},"indent":[]}}],"position":{"start":{"line":28,"column":213,"offset":1308},"end":{"line":28,"column":263,"offset":1358},"indent":[]}},{"type":"text","value":"). For each field on the example value (e.g ","position":{"start":{"line":28,"column":263,"offset":1358},"end":{"line":28,"column":307,"offset":1402},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">author</code>","position":{"start":{"line":28,"column":307,"offset":1402},"end":{"line":28,"column":315,"offset":1410},"indent":[]}},{"type":"text","value":"), we create a ","position":{"start":{"line":28,"column":315,"offset":1410},"end":{"line":28,"column":330,"offset":1425},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.org/graphql-js/type/#graphqlinputobjecttype","children":[{"type":"text","value":"GraphQLInputObjectType","position":{"start":{"line":28,"column":331,"offset":1426},"end":{"line":28,"column":353,"offset":1448},"indent":[]}}],"position":{"start":{"line":28,"column":330,"offset":1425},"end":{"line":28,"column":415,"offset":1510},"indent":[]}},{"type":"text","value":" with an appropriate name. The fields for Input Objects are predicates that depend on the value’s ","position":{"start":{"line":28,"column":415,"offset":1510},"end":{"line":28,"column":513,"offset":1608},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">typeof</code>","position":{"start":{"line":28,"column":513,"offset":1608},"end":{"line":28,"column":521,"offset":1616},"indent":[]}},{"type":"text","value":" result. E.g for a String, we need to be able to query by ","position":{"start":{"line":28,"column":521,"offset":1616},"end":{"line":28,"column":579,"offset":1674},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">eq</code>","position":{"start":{"line":28,"column":579,"offset":1674},"end":{"line":28,"column":583,"offset":1678},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":28,"column":583,"offset":1678},"end":{"line":28,"column":585,"offset":1680},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">regex</code>","position":{"start":{"line":28,"column":585,"offset":1680},"end":{"line":28,"column":592,"offset":1687},"indent":[]}},{"type":"text","value":" etc. If the value is an object itself, then we recurse, building its fields as above.","position":{"start":{"line":28,"column":592,"offset":1687},"end":{"line":28,"column":678,"offset":1773},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1096},"end":{"line":28,"column":678,"offset":1773},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the key is a foreign key reference (ends in ","position":{"start":{"line":30,"column":1,"offset":1775},"end":{"line":30,"column":48,"offset":1822},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">___NODE</code>","position":{"start":{"line":30,"column":48,"offset":1822},"end":{"line":30,"column":57,"offset":1831},"indent":[]}},{"type":"text","value":"), then we find the field’s linked Type first, and progress as above (for more on how foreign keys are implemented, see ","position":{"start":{"line":30,"column":57,"offset":1831},"end":{"line":30,"column":177,"offset":1951},"indent":[]}},{"type":"link","title":null,"url":"/docs/schema-gql-type#foreign-key-reference-___node","children":[{"type":"text","value":"gqlType","position":{"start":{"line":30,"column":178,"offset":1952},"end":{"line":30,"column":185,"offset":1959},"indent":[]}}],"position":{"start":{"line":30,"column":177,"offset":1951},"end":{"line":30,"column":239,"offset":2013},"indent":[]}},{"type":"text","value":"). After this step, we will end up with an Input Object type such as .","position":{"start":{"line":30,"column":239,"offset":2013},"end":{"line":30,"column":309,"offset":2083},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1775},"end":{"line":30,"column":309,"offset":2083},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkFrontmatterAuthor`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkFrontmatterAuthorInputObject`</span></span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkFrontmatterAuthorName`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkFrontmatterAuthorNameQueryString`</span></span><span class=\"token punctuation\">,</span>\n        fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          eq<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          ne<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          regex<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          glob<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLList</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":32,"column":1,"offset":2085},"end":{"line":50,"column":4,"offset":2590},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#inferring-input-filters-from-plugin-fields","title":null,"data":{"hProperties":{"aria-label":"inferring input filters from plugin fields permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Inferring input filters from plugin fields","position":{"start":{"line":52,"column":5,"offset":2596},"end":{"line":52,"column":47,"offset":2638},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2592},"end":{"line":52,"column":47,"offset":2638},"indent":[]},"data":{"id":"inferring-input-filters-from-plugin-fields","htmlAttributes":{"id":"inferring-input-filters-from-plugin-fields"},"hProperties":{"id":"inferring-input-filters-from-plugin-fields"}}},{"type":"paragraph","children":[{"type":"text","value":"Plugins themselves have the opportunity to create custom fields that apply to ALL nodes of a particular type, as opposed to having to explicitly add the field on every node creation. An example would be ","position":{"start":{"line":54,"column":1,"offset":2640},"end":{"line":54,"column":204,"offset":2843},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">markdownRemark</code>","position":{"start":{"line":54,"column":204,"offset":2843},"end":{"line":54,"column":220,"offset":2859},"indent":[]}},{"type":"text","value":" which adds a ","position":{"start":{"line":54,"column":220,"offset":2859},"end":{"line":54,"column":234,"offset":2873},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">wordcount</code>","position":{"start":{"line":54,"column":234,"offset":2873},"end":{"line":54,"column":245,"offset":2884},"indent":[]}},{"type":"text","value":" field to each node automatically. This section deals with the generation of input filters so that we can query by these fields as well. E.g:","position":{"start":{"line":54,"column":245,"offset":2884},"end":{"line":54,"column":386,"offset":3025},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2640},"end":{"line":54,"column":386,"offset":3025},"indent":[]}},{"type":"html","lang":"graphql","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  markdownRemark<span class=\"token punctuation\">(</span><span class=\"token attr-name\">wordCount</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">paragraphs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    html\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":56,"column":1,"offset":3027},"end":{"line":62,"column":4,"offset":3115},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Plugins add custom fields by implementing the ","position":{"start":{"line":64,"column":1,"offset":3117},"end":{"line":64,"column":47,"offset":3163},"indent":[]}},{"type":"link","title":null,"url":"/docs/node-apis/#setFieldsOnGraphQLNodeType","children":[{"type":"text","value":"setFieldsOnGraphQLNodeType","position":{"start":{"line":64,"column":48,"offset":3164},"end":{"line":64,"column":74,"offset":3190},"indent":[]}}],"position":{"start":{"line":64,"column":47,"offset":3163},"end":{"line":64,"column":120,"offset":3236},"indent":[]}},{"type":"text","value":" API. They must return a full GraphQLObjectType, complete with ","position":{"start":{"line":64,"column":120,"offset":3236},"end":{"line":64,"column":183,"offset":3299},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">resolve</code>","position":{"start":{"line":64,"column":183,"offset":3299},"end":{"line":64,"column":192,"offset":3308},"indent":[]}},{"type":"text","value":" function. Once this API has been run, the fields are passed to ","position":{"start":{"line":64,"column":192,"offset":3308},"end":{"line":64,"column":256,"offset":3372},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-input-fields-from-fields.js#L195","children":[{"type":"text","value":"inferInputObjectStructureFromFields","position":{"start":{"line":64,"column":257,"offset":3373},"end":{"line":64,"column":292,"offset":3408},"indent":[]}}],"position":{"start":{"line":64,"column":256,"offset":3372},"end":{"line":64,"column":415,"offset":3531},"indent":[]}},{"type":"text","value":", which will generate input filters for the new fields. The result would look something like:","position":{"start":{"line":64,"column":415,"offset":3531},"end":{"line":64,"column":508,"offset":3624},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3117},"end":{"line":64,"column":508,"offset":3624},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span> <span class=\"token comment\">//GraphQLInputObjectType</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`WordCountwordcountInputObject`</span></span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token template-string\"><span class=\"token string\">`paragraphs`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// GraphQLInputObjectType</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`WordCountParagraphsQueryInt`</span></span><span class=\"token punctuation\">,</span>\n        fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          eq<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          ne<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          gt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          gte<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          lt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          lte<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLList</span><span class=\"token punctuation\">(</span>GraphQLInt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":66,"column":1,"offset":3626},"end":{"line":86,"column":4,"offset":4147},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As usual, the input filter fields (","position":{"start":{"line":88,"column":1,"offset":4149},"end":{"line":88,"column":36,"offset":4184},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">eq</code>","position":{"start":{"line":88,"column":36,"offset":4184},"end":{"line":88,"column":40,"offset":4188},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":88,"column":40,"offset":4188},"end":{"line":88,"column":42,"offset":4190},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lt</code>","position":{"start":{"line":88,"column":42,"offset":4190},"end":{"line":88,"column":46,"offset":4194},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":88,"column":46,"offset":4194},"end":{"line":88,"column":48,"offset":4196},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">gt</code>","position":{"start":{"line":88,"column":48,"offset":4196},"end":{"line":88,"column":52,"offset":4200},"indent":[]}},{"type":"text","value":", etc) are based on the type of the field (","position":{"start":{"line":88,"column":52,"offset":4200},"end":{"line":88,"column":95,"offset":4243},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Int</code>","position":{"start":{"line":88,"column":95,"offset":4243},"end":{"line":88,"column":100,"offset":4248},"indent":[]}},{"type":"text","value":" in this case), which is defined by the plugin.","position":{"start":{"line":88,"column":100,"offset":4248},"end":{"line":88,"column":147,"offset":4295},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":4149},"end":{"line":88,"column":147,"offset":4295},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#merged-result","title":null,"data":{"hProperties":{"aria-label":"merged result permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Merged result","position":{"start":{"line":90,"column":5,"offset":4301},"end":{"line":90,"column":18,"offset":4314},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":4297},"end":{"line":90,"column":18,"offset":4314},"indent":[]},"data":{"id":"merged-result","htmlAttributes":{"id":"merged-result"},"hProperties":{"id":"merged-result"}}},{"type":"paragraph","children":[{"type":"text","value":"Now that we’ve generated input fields from the redux nodes and from custom plugin fields, we merge them together. E.g","position":{"start":{"line":92,"column":1,"offset":4316},"end":{"line":92,"column":118,"offset":4433},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":4316},"end":{"line":92,"column":118,"offset":4433},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// from infer input fields from object</span>\n  <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkAuthor`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkAuthorInputObject`</span></span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkAuthorName`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`MarkdownRemarkAuthorNameQueryString`</span></span><span class=\"token punctuation\">,</span>\n        fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          eq<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          ne<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          regex<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          glob<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLList</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// From infer input fields from fields</span>\n  <span class=\"token template-string\"><span class=\"token string\">`wordCount`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//GraphQLInputObjectType</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`WordCountwordcountInputObject`</span></span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token template-string\"><span class=\"token string\">`paragraphs`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// GraphQLInputObjectType</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`WordCountParagraphsQueryInt`</span></span><span class=\"token punctuation\">,</span>\n          fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            eq<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            ne<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            gt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            gte<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            lt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            lte<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLList</span><span class=\"token punctuation\">(</span>GraphQLInt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":94,"column":1,"offset":4435},"end":{"line":135,"column":4,"offset":5536},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":136,"column":1,"offset":5537}}}}