{"expireTime":9007200804686348000,"key":"transformer-remark-markdown-html-ast-9bfa782e3485d078f309ac27e70c4e85-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you try to run unit tests on components that use GraphQL queries, you will\ndiscover that you have no data. Jest can’t run your queries, so if you are\ntesting components that rely on GraphQL data, you will need to provide the data\nyourself. This is a good thing, as otherwise your tests could break if your data\nchanges, and in the case of remote data sources it would need network access to\nrun tests.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":7,"column":11,"offset":405}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":7,"column":11,"offset":405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In general it is best practice to test the smallest components possible, so the\nsimplest thing to do is to test the individual page components with mock data,\nrather than trying to test a full page. However, if you do want to test the full\npage you’ll need to provide the equivalent data to the component. Luckily\nthere’s a simple way to get the data you need.","position":{"start":{"line":9,"column":1,"offset":407},"end":{"line":13,"column":47,"offset":767}}}],"position":{"start":{"line":9,"column":1,"offset":407},"end":{"line":13,"column":47,"offset":767}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First you should make sure you have read\n","position":{"start":{"line":15,"column":1,"offset":769},"end":{"line":16,"column":1,"offset":810}}},{"type":"element","tagName":"a","properties":{"href":"/docs/unit-testing/"},"children":[{"type":"text","value":"the unit testing guide","position":{"start":{"line":16,"column":2,"offset":811},"end":{"line":16,"column":24,"offset":833}}}],"position":{"start":{"line":16,"column":1,"offset":810},"end":{"line":16,"column":46,"offset":855}}},{"type":"text","value":" and set up your project as\ndescribed. This guide is based on the same blog starter project. You will be\nwriting a simple snapshot test for the index page.","position":{"start":{"line":16,"column":46,"offset":855},"end":{"line":18,"column":51,"offset":1010}}}],"position":{"start":{"line":15,"column":1,"offset":769},"end":{"line":18,"column":51,"offset":1010}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As Jest doesn’t run or compile away your GraphQL queries you need to mock the\n","position":{"start":{"line":20,"column":1,"offset":1012},"end":{"line":21,"column":1,"offset":1090}}},{"type":"raw","value":"<code class=\"language-text\">graphql</code>","position":{"start":{"line":21,"column":1,"offset":1090},"end":{"line":21,"column":10,"offset":1099}}},{"type":"text","value":" function to stop it throwing an error. If you set your project up with\na mock for ","position":{"start":{"line":21,"column":10,"offset":1099},"end":{"line":22,"column":12,"offset":1182}}},{"type":"raw","value":"<code class=\"language-text\">gatsby</code>","position":{"start":{"line":22,"column":12,"offset":1182},"end":{"line":22,"column":20,"offset":1190}}},{"type":"text","value":" as described in the unit testing guide then this is already\ndone.","position":{"start":{"line":22,"column":20,"offset":1190},"end":{"line":23,"column":6,"offset":1256}}}],"position":{"start":{"line":20,"column":1,"offset":1012},"end":{"line":23,"column":6,"offset":1256}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"testing-page-queries"},"children":[{"type":"element","tagName":"a","properties":{"href":"#testing-page-queries","aria-label":"testing page queries permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Testing page queries","position":{"start":{"line":25,"column":4,"offset":1261},"end":{"line":25,"column":24,"offset":1281}}}],"position":{"start":{"line":25,"column":1,"offset":1258},"end":{"line":25,"column":24,"offset":1281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As this is testing a page component you will need to put your tests in another\nfolder so that Gatsby doesn’t try to turn the tests into pages.","position":{"start":{"line":27,"column":1,"offset":1283},"end":{"line":28,"column":64,"offset":1425}}}],"position":{"start":{"line":27,"column":1,"offset":1283},"end":{"line":28,"column":64,"offset":1425}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">src/pages/__tests__/index.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span>\n<span class=\"token keyword\">import</span> Index <span class=\"token keyword\">from</span> <span class=\"token string\">\"../index\"</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Index <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":30,"column":1,"offset":1427},"end":{"line":40,"column":4,"offset":1722}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you run this test you will get an error, as the StaticQuery in the ","position":{"start":{"line":42,"column":1,"offset":1724},"end":{"line":42,"column":71,"offset":1794}}},{"type":"raw","value":"<code class=\"language-text\">Layout</code>","position":{"start":{"line":42,"column":71,"offset":1794},"end":{"line":42,"column":79,"offset":1802}}},{"type":"text","value":" component is not mocked. You can fix this by mocking it, like so:","position":{"start":{"line":42,"column":79,"offset":1802},"end":{"line":42,"column":145,"offset":1868}}}],"position":{"start":{"line":42,"column":1,"offset":1724},"end":{"line":42,"column":145,"offset":1868}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">src/__tests__/index.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n<span class=\"token keyword\">import</span> Index <span class=\"token keyword\">from</span> <span class=\"token string\">\"../pages/index\"</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  StaticQuery<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementationOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      site<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          title<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Default Starter`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>BlogIndex <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":44,"column":1,"offset":1870},"end":{"line":67,"column":4,"offset":2400}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This should fix the ","position":{"start":{"line":69,"column":1,"offset":2402},"end":{"line":69,"column":21,"offset":2422}}},{"type":"raw","value":"<code class=\"language-text\">StaticQuery</code>","position":{"start":{"line":69,"column":21,"offset":2422},"end":{"line":69,"column":34,"offset":2435}}},{"type":"text","value":" error, but in a more real-world example you may also be using a page query with the ","position":{"start":{"line":69,"column":34,"offset":2435},"end":{"line":69,"column":119,"offset":2520}}},{"type":"raw","value":"<code class=\"language-text\">graphql</code>","position":{"start":{"line":69,"column":119,"offset":2520},"end":{"line":69,"column":128,"offset":2529}}},{"type":"text","value":" helper from Gatsby. In this case, there is no GraphQL data being passed to the component. We can pass this in too,\nbut the structure is a little more complicated. Luckily there’s an easy way to\nget some suitable data. Run ","position":{"start":{"line":69,"column":128,"offset":2529},"end":{"line":71,"column":29,"offset":2752}}},{"type":"raw","value":"<code class=\"language-text\">npm run develop</code>","position":{"start":{"line":71,"column":29,"offset":2752},"end":{"line":71,"column":46,"offset":2769}}},{"type":"text","value":" and go to\n","position":{"start":{"line":71,"column":46,"offset":2769},"end":{"line":72,"column":1,"offset":2780}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/___graphql"},"children":[{"type":"text","value":"http://localhost:8000/___graphql","position":{"start":{"line":72,"column":1,"offset":2780},"end":{"line":72,"column":33,"offset":2812}}}],"position":{"start":{"line":72,"column":1,"offset":2780},"end":{"line":72,"column":33,"offset":2812}}},{"type":"text","value":" to load the GraphiQL IDE. You can now get the\nright data using the same query that you used on the page. If it is a simple\nquery with no fragments you can copy it directly. That is the case here, run\nthis query copied from the index page:","position":{"start":{"line":72,"column":33,"offset":2812},"end":{"line":75,"column":39,"offset":3051}}}],"position":{"start":{"line":69,"column":1,"offset":2402},"end":{"line":75,"column":39,"offset":3051}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> IndexQuery <span class=\"token punctuation\">{</span>\n  site <span class=\"token punctuation\">{</span>\n    siteMetadata <span class=\"token punctuation\">{</span>\n      author\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":77,"column":1,"offset":3053},"end":{"line":85,"column":4,"offset":3139}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The output panel should now give you a nice JSON object with the query result.\nHere it is, trimmed to one node for brevity:","position":{"start":{"line":87,"column":1,"offset":3141},"end":{"line":88,"column":45,"offset":3264}}}],"position":{"start":{"line":87,"column":1,"offset":3141},"end":{"line":88,"column":45,"offset":3264}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"siteMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your Name Here\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":90,"column":1,"offset":3266},"end":{"line":100,"column":4,"offset":3384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GraphiQL doesn’t know about any fragments defined by Gatsby, so if your query\nuses them then you’ll need to replace those with the content of the fragment. If\nyou’re using ","position":{"start":{"line":102,"column":1,"offset":3386},"end":{"line":104,"column":14,"offset":3558}}},{"type":"raw","value":"<code class=\"language-text\">gatsby-transformer-sharp</code>","position":{"start":{"line":104,"column":14,"offset":3558},"end":{"line":104,"column":40,"offset":3584}}},{"type":"text","value":" you’ll find the fragments in\n","position":{"start":{"line":104,"column":40,"offset":3584},"end":{"line":105,"column":1,"offset":3614}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/src/fragments.js"},"children":[{"type":"text","value":"gatsby-transformer-sharp/src/fragments.js","position":{"start":{"line":105,"column":2,"offset":3615},"end":{"line":105,"column":43,"offset":3656}}}],"position":{"start":{"line":105,"column":1,"offset":3614},"end":{"line":105,"column":143,"offset":3756}}},{"type":"text","value":".\nSo, for example if your query includes:","position":{"start":{"line":105,"column":143,"offset":3756},"end":{"line":106,"column":40,"offset":3797}}}],"position":{"start":{"line":102,"column":1,"offset":3386},"end":{"line":106,"column":40,"offset":3797}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    image <span class=\"token punctuation\">{</span>\n        childImageSharp <span class=\"token punctuation\">{</span>\n            fluid<span class=\"token punctuation\">(</span><span class=\"token attr-name\">maxWidth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>GatsbyImageSharpFluid\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":3799},"end":{"line":116,"column":4,"offset":3958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"…it becomes:","position":{"start":{"line":118,"column":1,"offset":3960},"end":{"line":118,"column":15,"offset":3974}}}],"position":{"start":{"line":118,"column":1,"offset":3960},"end":{"line":118,"column":15,"offset":3974}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    image <span class=\"token punctuation\">{</span>\n        childImageSharp <span class=\"token punctuation\">{</span>\n            fluid<span class=\"token punctuation\">(</span><span class=\"token attr-name\">maxWidth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                base64\n                aspectRatio\n                src\n                srcSet\n                sizes\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":120,"column":1,"offset":3976},"end":{"line":132,"column":4,"offset":4210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When you have the result, copy the ","position":{"start":{"line":134,"column":1,"offset":4212},"end":{"line":134,"column":36,"offset":4247}}},{"type":"raw","value":"<code class=\"language-text\">data</code>","position":{"start":{"line":134,"column":36,"offset":4247},"end":{"line":134,"column":42,"offset":4253}}},{"type":"text","value":" value from the output panel. Good\npractice is to store your fixtures in a separate file, but for simplicity here\nyou will be defining it directly inside your test file:","position":{"start":{"line":134,"column":42,"offset":4253},"end":{"line":136,"column":56,"offset":4422}}}],"position":{"start":{"line":134,"column":1,"offset":4212},"end":{"line":136,"column":56,"offset":4422}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">src/pages/__tests__/index.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span>\n<span class=\"token keyword\">import</span> Index <span class=\"token keyword\">from</span> <span class=\"token string\">\"../index\"</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  StaticQuery<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementationOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      site<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          title<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Default Starter`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      site<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          author<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Your name\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Index data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":138,"column":1,"offset":4424},"end":{"line":169,"column":4,"offset":5044}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Run the tests and they should now pass. Take a look in ","position":{"start":{"line":171,"column":1,"offset":5046},"end":{"line":171,"column":56,"offset":5101}}},{"type":"raw","value":"<code class=\"language-text\">__snapshots__</code>","position":{"start":{"line":171,"column":56,"offset":5101},"end":{"line":171,"column":71,"offset":5116}}},{"type":"text","value":" to see\nthe output.","position":{"start":{"line":171,"column":71,"offset":5116},"end":{"line":172,"column":12,"offset":5135}}}],"position":{"start":{"line":171,"column":1,"offset":5046},"end":{"line":172,"column":12,"offset":5135}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"testing-staticquery"},"children":[{"type":"element","tagName":"a","properties":{"href":"#testing-staticquery","aria-label":"testing staticquery permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Testing StaticQuery","position":{"start":{"line":174,"column":4,"offset":5140},"end":{"line":174,"column":23,"offset":5159}}}],"position":{"start":{"line":174,"column":1,"offset":5137},"end":{"line":174,"column":23,"offset":5159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The method above works for page queries, as you can pass the data in directly to\nthe component. This doesn’t work for components that use ","position":{"start":{"line":176,"column":1,"offset":5161},"end":{"line":177,"column":58,"offset":5299}}},{"type":"raw","value":"<code class=\"language-text\">StaticQuery</code>","position":{"start":{"line":177,"column":58,"offset":5299},"end":{"line":177,"column":71,"offset":5312}}},{"type":"text","value":" though,\nas that uses ","position":{"start":{"line":177,"column":71,"offset":5312},"end":{"line":178,"column":14,"offset":5334}}},{"type":"raw","value":"<code class=\"language-text\">context</code>","position":{"start":{"line":178,"column":14,"offset":5334},"end":{"line":178,"column":23,"offset":5343}}},{"type":"text","value":" rather than ","position":{"start":{"line":178,"column":23,"offset":5343},"end":{"line":178,"column":36,"offset":5356}}},{"type":"raw","value":"<code class=\"language-text\">props</code>","position":{"start":{"line":178,"column":36,"offset":5356},"end":{"line":178,"column":43,"offset":5363}}},{"type":"text","value":" so we need to take a slightly\ndifferent approach to testing these types of components.","position":{"start":{"line":178,"column":43,"offset":5363},"end":{"line":179,"column":57,"offset":5450}}}],"position":{"start":{"line":176,"column":1,"offset":5161},"end":{"line":179,"column":57,"offset":5450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using ","position":{"start":{"line":181,"column":1,"offset":5452},"end":{"line":181,"column":7,"offset":5458}}},{"type":"raw","value":"<code class=\"language-text\">StaticQuery</code>","position":{"start":{"line":181,"column":7,"offset":5458},"end":{"line":181,"column":20,"offset":5471}}},{"type":"text","value":" allows you to make queries in any component, not just pages.\nThis gives a lot of flexibility, and avoid having to pass the props down to\ndeeply-nested components. The pattern for enabling type checking described in\nthe docs is a good starting point for making these components testable, as it\nseparates the query from the definition of the component itself. However that\nexample doesn’t export the inner, pure component, which is what you’ll need to\ntest.","position":{"start":{"line":181,"column":20,"offset":5471},"end":{"line":187,"column":6,"offset":5927}}}],"position":{"start":{"line":181,"column":1,"offset":5452},"end":{"line":187,"column":6,"offset":5927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the example of a header component that queries the page data itself,\nrather than needing it to be passed from the layout:","position":{"start":{"line":189,"column":1,"offset":5929},"end":{"line":190,"column":53,"offset":6058}}}],"position":{"start":{"line":189,"column":1,"offset":5929},"end":{"line":190,"column":53,"offset":6058}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">src/components/header.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StaticQuery\n    query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>graphql<span class=\"token template-string\"><span class=\"token string\">`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `</span></span><span class=\"token punctuation\">}</span>\n    render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":192,"column":1,"offset":6060},"end":{"line":216,"column":4,"offset":6498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is almost ready: all you need to do is export the pure component that you\nare passing to StaticQuery. Rename it first to avoid confusion:","position":{"start":{"line":218,"column":1,"offset":6500},"end":{"line":219,"column":64,"offset":6642}}}],"position":{"start":{"line":218,"column":1,"offset":6500},"end":{"line":219,"column":64,"offset":6642}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">src/components/header.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticQuery<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PureHeader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>siteMetadata<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StaticQuery\n    query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>graphql<span class=\"token template-string\"><span class=\"token string\">`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `</span></span><span class=\"token punctuation\">}</span>\n    render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PureHeader</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header</code></pre></div>","position":{"start":{"line":221,"column":1,"offset":6644},"end":{"line":247,"column":4,"offset":7136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you have two components exported from the file: the component that includes\nthe StaticQuery data which is still the default export, and another component\nthat you can test. This means you can test the component independently of the\nGraphQL.","position":{"start":{"line":249,"column":1,"offset":7138},"end":{"line":252,"column":9,"offset":7382}}}],"position":{"start":{"line":249,"column":1,"offset":7138},"end":{"line":252,"column":9,"offset":7382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is a good example of the benefits of keeping components “pure”, meaning\nthey always generate the same output if given the same inputs and have no\nside-effects apart from their return value. This means we can be sure the tests\nare always reproducible and don’t fail if, for example, the network is down or\nthe data source changes. In this example, ","position":{"start":{"line":254,"column":1,"offset":7384},"end":{"line":258,"column":43,"offset":7736}}},{"type":"raw","value":"<code class=\"language-text\">Header</code>","position":{"start":{"line":258,"column":43,"offset":7736},"end":{"line":258,"column":51,"offset":7744}}},{"type":"text","value":" is impure as it makes a\nquery, so the output depends on something apart from its props. ","position":{"start":{"line":258,"column":51,"offset":7744},"end":{"line":259,"column":65,"offset":7833}}},{"type":"raw","value":"<code class=\"language-text\">PureHeader</code>","position":{"start":{"line":259,"column":65,"offset":7833},"end":{"line":259,"column":77,"offset":7845}}},{"type":"text","value":" is\npure because its return value is entirely dependent on the props passed to it.\nThis means it’s very easy to test, and a snapshot should never change.","position":{"start":{"line":259,"column":77,"offset":7845},"end":{"line":261,"column":71,"offset":7998}}}],"position":{"start":{"line":254,"column":1,"offset":7384},"end":{"line":261,"column":71,"offset":7998}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s how:","position":{"start":{"line":263,"column":1,"offset":8000},"end":{"line":263,"column":12,"offset":8011}}}],"position":{"start":{"line":263,"column":1,"offset":8000},"end":{"line":263,"column":12,"offset":8011}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-code-title\">src/components/__tests__/header.js</div>"},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PureHeader <span class=\"token keyword\">as</span> Header <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../header\"</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Created using the query from Header.js</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      site<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Gatsby Starter Blog\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":265,"column":1,"offset":8013},"end":{"line":285,"column":4,"offset":8522}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"using-typescript"},"children":[{"type":"element","tagName":"a","properties":{"href":"#using-typescript","aria-label":"using typescript permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Using TypeScript","position":{"start":{"line":287,"column":4,"offset":8527},"end":{"line":287,"column":20,"offset":8543}}}],"position":{"start":{"line":287,"column":1,"offset":8524},"end":{"line":287,"column":20,"offset":8543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are using TypeScript this is a lot easier to get right as the type errors\nwill tell you exactly what you should be passing to the components. This is why\nit is a good idea to define type interfaces for all of your GraphQL queries.","position":{"start":{"line":289,"column":1,"offset":8545},"end":{"line":291,"column":77,"offset":8782}}}],"position":{"start":{"line":289,"column":1,"offset":8545},"end":{"line":291,"column":77,"offset":8782}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":292,"column":1,"offset":8783}}}}