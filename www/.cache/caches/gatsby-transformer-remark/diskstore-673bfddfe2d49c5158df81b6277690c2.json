{"expireTime":9007200804686247000,"key":"transformer-remark-markdown-html-6725ae2dd1cbeaf656710cc0027f440b-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1 id=\"gatsby-plugin-node-fields\"><a href=\"#gatsby-plugin-node-fields\" aria-label=\"gatsby plugin node fields permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-plugin-node-fields</h1>\n<p>Important Change: There has been an important change to the API in reaching V2. All functions now recieve <code class=\"language-text\">boundActionCreators</code> as their final argument. Before, setters would receive <code class=\"language-text\">createNodeField</code>, however like the others they will now receive <code class=\"language-text\">boundActionCreators</code>, from which they can pull <code class=\"language-text\">createNodeField</code> if they need it. This also means that if you are using this as a function, you need to pass in <code class=\"language-text\">boundActionCreators</code> instead of <code class=\"language-text\">createNodeField</code>.</p>\n<p><code class=\"language-text\">gatsby-plugin-node-fields</code> offers you a simple, consistent way to manage the creation of fields on your nodes, with support for default values, transformations and validation of values. It is well tested and uses helpful error messages to guide you away from the rocks.</p>\n<h2 id=\"quickstart\"><a href=\"#quickstart\" aria-label=\"quickstart permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quickstart</h2>\n<h3 id=\"install\"><a href=\"#install\" aria-label=\"install permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add gatsby-plugin-node-fields</code></pre></div>\n<h3 id=\"plugin-vs-function\"><a href=\"#plugin-vs-function\" aria-label=\"plugin vs function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin vs Function</h3>\n<p>You can use <code class=\"language-text\">gatsby-plugin-node-fields</code> either as a standard Gatsby plugin, or you can use it as standalone function. Both will perform the same task, but you might prefer to keep node manipulation in your <code class=\"language-text\">gatsby-node.js</code> file instead of via a plugin defined in your <code class=\"language-text\">gatsby-config.js</code>.</p>\n<h4 id=\"plugin\"><a href=\"#plugin\" aria-label=\"plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin</h4>\n<p>If you want to use it as a plugin, add it as the last plugin. You can place it anywhere, but bear in mind that it will only see changes made by plugins that come before it. Unless you have a good reason not to, place it last.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// gatsby-config.js</span>\n\n<span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n …\n <span class=\"token punctuation\">{</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`gatsby-plugin-node-fields`</span></span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Your list of descriptors</span>\n    descriptors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      …\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"function\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function</h4>\n<p>If you’d prefer to use it as a function in your <code class=\"language-text\">gatsby-node.js</code> file, you need to hook into Gatsby’s <code class=\"language-text\">onCreateNode</code> yourself, passing in the three arguments it expects:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// gatsby-node.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> attachFields <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`gatsby-plugin-node-fields`</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Your list of descriptors</span>\n<span class=\"token keyword\">const</span> descriptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  …\n<span class=\"token punctuation\">]</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> boundActionCreators <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">attachFields</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> boundActionCreators<span class=\"token punctuation\">,</span> descriptors<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"some-examples\"><a href=\"#some-examples\" aria-label=\"some examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some Examples</h2>\n<h3 id=\"default-value-for-a-field\"><a href=\"#default-value-for-a-field\" aria-label=\"default value for a field permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default value for a field</h3>\n<p>Imagine you have a series of Markdown Articles. They are mainly written by the same person with an occasional guest author. You support an <code class=\"language-text\">author</code> field in your article pages’ front matter, but you don’t want your regular author to have to add their own name to every article. Effectively you need a default value for <code class=\"language-text\">author</code>. To implement this you would create the following descriptor:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    predicate<span class=\"token punctuation\">:</span> isArticleNode<span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span>\n        getter<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n        defaultValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>This would result in <code class=\"language-text\">node.fields.author</code> being populated with either the author field of the node’s front matter, or with a default value of ‘John Doe’. In reality you’d probably want to pull the default value from a config object or similar.</p>\n<h3 id=\"transforming-a-value\"><a href=\"#transforming-a-value\" aria-label=\"transforming a value permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transforming a value</h3>\n<p>Imagine you allow an author to add a <code class=\"language-text\">keywords</code> field to an article’s front matter which you use for the <code class=\"language-text\">keywords</code> metadata of the page (which will be a comma-separated list), and also extract for use as tags. To make these tags easier to work with you want to convert then to an array of strings.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    predicate<span class=\"token punctuation\">:</span> isArticleNode<span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'tags'</span><span class=\"token punctuation\">,</span>\n        getter<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>keywords<span class=\"token punctuation\">,</span>\n        defaultValue<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        transformer<span class=\"token punctuation\">:</span> value <span class=\"token operator\">=></span> <span class=\"token function\">isEmptyString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">cslToArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Here we again use <code class=\"language-text\">getter</code> to pull the value we want from the node’s <code class=\"language-text\">frontmatter</code>. We set it’s <code class=\"language-text\">defaultValue</code> to <code class=\"language-text\">&#39;&#39;</code>, then we use the <code class=\"language-text\">transformer</code> to either transform the value to an empty array, or to an array of strings using a helper function <code class=\"language-text\">cslToArray</code>. Note that it might seem strange to set a default value, then immediately check it and convert it to an array, but I’ve found that treating each stage discretely makes for much cleaner code. This way the transformer knows it will receive a string, making it more focused.</p>\n<h3 id=\"validating-a-value\"><a href=\"#validating-a-value\" aria-label=\"validating a value permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validating a value</h3>\n<p>It’s often better to handle invalid values at compile time rather than trying to handle these values in the UI. Imagine you allow an author to add a <code class=\"language-text\">title</code> keyword to an article’s frontmatter. Obviously without a title, an Article shouldn’t be valid and it doesn’t make sense to set a default title, so you add a validator to ensure the article’s title is a non-empty string.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    predicate<span class=\"token punctuation\">:</span> isArticleNode<span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span>\n        getter<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n        validator<span class=\"token punctuation\">:</span> isNonEmptyString\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>This will result in an error with a useful message if an article is encountered that doesn’t have a title set. For obvious reasons it’s better to set a sensible default in most cases, but in instances like this, a useful compile-time error is better than a potentially obscure runtime error, or invalid data being displayed.</p>\n<h2 id=\"overview\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>I have found that mixing queries for values stored in a node’s <code class=\"language-text\">frontmatter</code> with queries for values stored in generated fields is uneven and confusing, so I now transfer all values that I will use in the UI over to fields. This transfer gives us the opportunity to do a number of important things:</p>\n<ul>\n<li>set a default value</li>\n<li>validate a value</li>\n<li>transform a value</li>\n</ul>\n<h3 id=\"validation\"><a href=\"#validation\" aria-label=\"validation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation</h3>\n<p>Your descriptors will be validated against a schema when first used with useful error messages if you have added an invalid field or the value of required field is invalid or missing.</p>\n<h3 id=\"descriptors\"><a href=\"#descriptors\" aria-label=\"descriptors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Descriptors</h3>\n<p>The plugin automatically hooks into Gatsby’s <code class=\"language-text\">onCreateNode</code> life cycle hook and will check the node it receives against an array of descriptors you provide. Each descriptor must provide a <code class=\"language-text\">predicate</code> - a function that will be passed the node and decides whether the descriptor should be used to transform it. For example we might want to check if the node is Markdown node, or if it represents a file from a particular directory.</p>\n<p>If a descriptor’s <code class=\"language-text\">predicate</code> returns true, the descriptor will be used to create new fields on that node using the contents of the descriptor’s <code class=\"language-text\">fields</code> array. Each item in the <code class=\"language-text\">fields</code> array represents the creation of one or more fields and describes a series of steps</p>\n<p>Here is an example of a descriptor that will be run for all markdown nodes, validating that a title exists, then running is through a function called <code class=\"language-text\">preventOrphans</code> before saving it as a <code class=\"language-text\">title</code> field:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// Descriptor</span>\n  <span class=\"token punctuation\">{</span>\n    predicate<span class=\"token punctuation\">:</span> isMarkdownNode<span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span>\n        getter<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n        validator<span class=\"token punctuation\">:</span> isString<span class=\"token punctuation\">,</span>\n        transformer<span class=\"token punctuation\">:</span> preventOrphans<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"predicate-function\"><a href=\"#predicate-function\" aria-label=\"predicate function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>predicate</em> [function]</h4>\n<p>A function that receives the newly created node as its single argument and returns <code class=\"language-text\">true</code> if the descriptor should apply to that node and <code class=\"language-text\">false</code> if it doesn’t. Multiple descriptors can be applied to the same node if their predicates return true.</p>\n<h4 id=\"fields-array\"><a href=\"#fields-array\" aria-label=\"fields array permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>fields</em> [array]</h4>\n<p>An array of objects representing fields that will be created on the node. Each object comprises of a set of keys and values that describe the creation process of a new field. You can use as few or as many keys as needed. For example if all you want to do is set a default value you could use only the <code class=\"language-text\">name</code> and <code class=\"language-text\">defaultValue</code> keys:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'example'</span><span class=\"token punctuation\">,</span>\n  defaultValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'Unknown'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"fields\"><a href=\"#fields\" aria-label=\"fields permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields</h3>\n<p>A field can contain one or more of the following keys that describe which fields it should add, and how it should obtain and transform the data that will populate them. You can perform a one-to-one, many-to-one, or one-to-many mapping between values and fields. The order in which these fields are used is</p>\n<ul>\n<li><code class=\"language-text\">getter</code> or <code class=\"language-text\">name</code></li>\n<li><code class=\"language-text\">defaultValue</code></li>\n<li><code class=\"language-text\">validator</code></li>\n<li><code class=\"language-text\">transformer</code></li>\n<li><code class=\"language-text\">setter</code> or <code class=\"language-text\">name</code></li>\n</ul>\n<h4 id=\"name-string\"><a href=\"#name-string\" aria-label=\"name string permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>name</em> [string]</h4>\n<p>A <code class=\"language-text\">name</code> field represents the name of the field that will be created. If no <code class=\"language-text\">getter</code> field is present on the descriptor, it will also be used to access a value on the node. For example if the <code class=\"language-text\">name</code> is ‘alpha’, it will create a field on the node called ‘alpha’. If no <code class=\"language-text\">getter</code> field is present on the descriptor is will try and get the value for this field from <code class=\"language-text\">node.alpha</code>.</p>\n<h4 id=\"getter-functionnode-context-boundactioncreators\"><a href=\"#getter-functionnode-context-boundactioncreators\" aria-label=\"getter functionnode context boundactioncreators permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>getter</em> [function(node, context, boundActionCreators)]</h4>\n<p>A <code class=\"language-text\">getter</code> is a function that gets the value or values from the node. If a <code class=\"language-text\">getter</code> is not defined and a <code class=\"language-text\">name</code> is defined, <code class=\"language-text\">node[name]</code> will be used in its place.</p>\n<p>A simple getter might look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title</code></pre></div>\n<p>You could also pull the value from a config object or anywhere else you like.</p>\n<h4 id=\"defaultvalue---functionnode-context-boundactioncreators\"><a href=\"#defaultvalue---functionnode-context-boundactioncreators\" aria-label=\"defaultvalue   functionnode context boundactioncreators permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>defaultValue</em> [* | function(node, context, boundActionCreators)]</h4>\n<p>A <code class=\"language-text\">defaultValue</code> supplies a value in instances where no value exists on the node (the value is <code class=\"language-text\">undefined</code>), or no means of getting a value has been defined on the descriptor. In the following cases <code class=\"language-text\">defaultValue</code> will be used:</p>\n<ul>\n<li>Only a <code class=\"language-text\">name</code> was defined and there is no prop on the node with that name.</li>\n<li>A prop of <code class=\"language-text\">name</code> exists with but has a value of <code class=\"language-text\">undefined</code></li>\n<li>A <code class=\"language-text\">getter</code> was defined but returned <code class=\"language-text\">undefined</code>,</li>\n<li>Neither a <code class=\"language-text\">name</code> nor a <code class=\"language-text\">getter</code> were defined.</li>\n</ul>\n<p>If <code class=\"language-text\">defaultValue</code> is a function it should return a default value. If the value of <code class=\"language-text\">defaultValue</code> is not a function, that value will be used as the default value.</p>\n<p>For example by using a function, you could use supply a default value using another property of the node:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>someOtherValue</code></pre></div>\n<h4 id=\"validator-functionvalue-node-context-boundactioncreators\"><a href=\"#validator-functionvalue-node-context-boundactioncreators\" aria-label=\"validator functionvalue node context boundactioncreators permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>validator</em> [function(value, node, context, boundActionCreators)]</h4>\n<p>A <code class=\"language-text\">validator</code> is just a predicate that receives the value and returns true or false, depending if it deems it to be valid or not. For example we might have a descriptor that has looked up <code class=\"language-text\">node.Front Matter.slug</code>, but there is no slug defined, we use a sanitised version of the title instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">value <span class=\"token operator\">=></span> <span class=\"token function\">isValidDate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"transformer-functionvalue-node-context-boundactioncreators\"><a href=\"#transformer-functionvalue-node-context-boundactioncreators\" aria-label=\"transformer functionvalue node context boundactioncreators permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>transformer</em> [function(value, node, context, boundActionCreators)]</h4>\n<p>A <code class=\"language-text\">transformer</code> transforms the value in some way. For example it might run the value through a function that cleans it up or formats it. A transformer function will be called with three arguments: the value, the node and the context, if defined.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">value <span class=\"token operator\">=></span> <span class=\"token function\">preventOrphans</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"setter-functionvalue-node-context-boundactioncreators\"><a href=\"#setter-functionvalue-node-context-boundactioncreators\" aria-label=\"setter functionvalue node context boundactioncreators permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>setter</em> [function(value, node, context, boundActionCreators)]</h4>\n<p>A <em>setter</em> defines how the value(s) are translated to fields. If no <code class=\"language-text\">setter</code> is defined, the <em>name</em> field will be used to create a field of that name using Gatsby’s <code class=\"language-text\">createNodeField</code> , however using a <code class=\"language-text\">setter</code> function allows more flexibility. For example a value might be an object and we might want to transfer its values to multiple fields. A <code class=\"language-text\">setter</code> will receive three arguments: the value, <code class=\"language-text\">boundActionCreators</code>, and any context. If you define a setter, that setter is responsible for using <code class=\"language-text\">boundActionCreators.createNodeField</code> to create fields.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    node<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">.</span>beta\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"context\"><a href=\"#context\" aria-label=\"context permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context</h3>\n<p>To keep things as functional as possible and prevent the need for you to reach out to external data sources from within your functions, you can pass in a <code class=\"language-text\">context</code>. Context can be anything you like, but will probably be an object. <code class=\"language-text\">getter</code>, <code class=\"language-text\">defaultValue</code>, <code class=\"language-text\">validator</code>, <code class=\"language-text\">transformer</code>, and <code class=\"language-text\">setter</code> functions all receive the context as their second argument.</p>\n<p>If you are using the plugin, pass the context as an option:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`gatsby-plugin-node-fields`</span></span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    descriptors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      …\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      …\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you are using the function, pass it in as the fourth argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">attachFields</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> boundActionCreators<span class=\"token punctuation\">,</span> descriptors<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"maintenance\"><a href=\"#maintenance\" aria-label=\"maintenance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maintenance</h2>\n<p>Gatsby doesn’t support ES6 imports, so we need to compile our <code class=\"language-text\">./src</code> to <code class=\"language-text\">./lib</code>, then reference the compiled file from <code class=\"language-text\">gatsby-node.js</code>.</p>\n<h3 id=\"tests\"><a href=\"#tests\" aria-label=\"tests permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tests</h3>\n<p>Tests are written with Jest:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn <span class=\"token function\">test</span></code></pre></div>"}