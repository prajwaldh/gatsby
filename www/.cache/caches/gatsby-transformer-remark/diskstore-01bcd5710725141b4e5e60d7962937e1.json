{"expireTime":9007200804686281000,"key":"transformer-remark-markdown-ast-3ff3e81f5d75d622c4a07f5b224dc61a-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This blogpost explains how I learned to reduce the cost of maintaining a simple brochure or blog site. When using Drupal, you need at least a shared hosting platform (there is no Wordpress.com for Drupal sites). So, migrating to a static site generator, like Jekyll or Gatsby, seemed like a good idea. Gatsby is also a great opportunity to learn React and then get hosting for free using something like GitHub Pages. This post is going to describe how to migrate a simple blog—that has featured images on the posts, comments and tags—from Drupal to Gatsby.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":559,"offset":559},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":559,"offset":559},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To facilitate exporting the site, the first thing I did was export the database from the mysql database server to an sqlite file that I could use locally. To do this I used the ","position":{"start":{"line":4,"column":1,"offset":561},"end":{"line":4,"column":178,"offset":738},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/dumblob/mysql2sqlite","children":[{"type":"text","value":"mysql2sqlite","position":{"start":{"line":4,"column":179,"offset":739},"end":{"line":4,"column":191,"offset":751},"indent":[]}}],"position":{"start":{"line":4,"column":178,"offset":738},"end":{"line":4,"column":233,"offset":793},"indent":[]}},{"type":"text","value":" project, which, as described on the project page, can be done with two commands like:","position":{"start":{"line":4,"column":233,"offset":793},"end":{"line":4,"column":319,"offset":879},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":561},"end":{"line":4,"column":319,"offset":879},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysqldump --skip-extended-insert --compact DB_name &gt; dump_mysql.sql\n./mysql2sqlite dump_mysql.sql | sqlite3 mysqlite.db</code></pre></div>","position":{"start":{"line":6,"column":1,"offset":881},"end":{"line":9,"column":4,"offset":1008},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#how-to-export-a-drupal-site-to-gatsby-yourself","title":null,"data":{"hProperties":{"aria-label":"how to export a drupal site to gatsby yourself permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"How to export a Drupal site to Gatsby yourself","position":{"start":{"line":11,"column":4,"offset":1013},"end":{"line":11,"column":50,"offset":1059},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1010},"end":{"line":11,"column":50,"offset":1059},"indent":[]},"data":{"id":"how-to-export-a-drupal-site-to-gatsby-yourself","htmlAttributes":{"id":"how-to-export-a-drupal-site-to-gatsby-yourself"},"hProperties":{"id":"how-to-export-a-drupal-site-to-gatsby-yourself"}}},{"type":"paragraph","children":[{"type":"text","value":"To do this yourself, you’ll build a simple blog using the excellent ","position":{"start":{"line":13,"column":1,"offset":1061},"end":{"line":13,"column":69,"offset":1129},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gatsbyjs/gatsby-starter-blog","children":[{"type":"text","value":"gatsby-starter-blog","position":{"start":{"line":13,"column":70,"offset":1130},"end":{"line":13,"column":89,"offset":1149},"indent":[]}}],"position":{"start":{"line":13,"column":69,"offset":1129},"end":{"line":13,"column":139,"offset":1199},"indent":[]}},{"type":"text","value":" project. Create a new project and then add a ","position":{"start":{"line":13,"column":139,"offset":1199},"end":{"line":13,"column":185,"offset":1245},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/JoshuaWise/better-sqlite3","children":[{"type":"text","value":"sqlite library","position":{"start":{"line":13,"column":186,"offset":1246},"end":{"line":13,"column":200,"offset":1260},"indent":[]}}],"position":{"start":{"line":13,"column":185,"offset":1245},"end":{"line":13,"column":247,"offset":1307},"indent":[]}},{"type":"text","value":" as a dev dependency:","position":{"start":{"line":13,"column":247,"offset":1307},"end":{"line":13,"column":268,"offset":1328},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1061},"end":{"line":13,"column":268,"offset":1328},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx gatsby new gatsby-blog https://github.com/gatsbyjs/gatsby-starter-blog\ngit init # so you can keep track of the changes\nnpm i --save-dev better-sqlite3</code></pre></div>","position":{"start":{"line":15,"column":1,"offset":1330},"end":{"line":19,"column":4,"offset":1492},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The useful commands on an sqlite3 command line to explore are ","position":{"start":{"line":21,"column":1,"offset":1494},"end":{"line":21,"column":63,"offset":1556},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.tables</code>","position":{"start":{"line":21,"column":63,"offset":1556},"end":{"line":21,"column":72,"offset":1565},"indent":[]}},{"type":"text","value":" to see all tables :) and ","position":{"start":{"line":21,"column":72,"offset":1565},"end":{"line":21,"column":98,"offset":1591},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.schema table_name</code>","position":{"start":{"line":21,"column":98,"offset":1591},"end":{"line":21,"column":118,"offset":1611},"indent":[]}},{"type":"text","value":" to see information about a specific table. Oh! and ","position":{"start":{"line":21,"column":118,"offset":1611},"end":{"line":21,"column":170,"offset":1663},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.help</code>","position":{"start":{"line":21,"column":170,"offset":1663},"end":{"line":21,"column":177,"offset":1670},"indent":[]}},{"type":"text","value":" to know more.","position":{"start":{"line":21,"column":177,"offset":1670},"end":{"line":21,"column":191,"offset":1684},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1494},"end":{"line":21,"column":191,"offset":1684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next, you will be creating a new file on your project at ","position":{"start":{"line":23,"column":1,"offset":1686},"end":{"line":23,"column":58,"offset":1743},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">src/scripts/migrate.js</code>","position":{"start":{"line":23,"column":58,"offset":1743},"end":{"line":23,"column":82,"offset":1767},"indent":[]}},{"type":"text","value":". Initially, what you want is to iterate through all your posts and export basic data like title, created date, body and status (published or draft). All of that data is in two tables, the ","position":{"start":{"line":23,"column":82,"offset":1767},"end":{"line":23,"column":271,"offset":1956},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"node","position":{"start":{"line":23,"column":272,"offset":1957},"end":{"line":23,"column":276,"offset":1961},"indent":[]}}],"position":{"start":{"line":23,"column":271,"offset":1956},"end":{"line":23,"column":277,"offset":1962},"indent":[]}},{"type":"text","value":" table and the ","position":{"start":{"line":23,"column":277,"offset":1962},"end":{"line":23,"column":292,"offset":1977},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"field","position":{"start":{"line":23,"column":293,"offset":1978},"end":{"line":23,"column":298,"offset":1983},"indent":[]}}],"position":{"start":{"line":23,"column":292,"offset":1977},"end":{"line":23,"column":299,"offset":1984},"indent":[]}},{"type":"text","value":"data","position":{"start":{"line":23,"column":299,"offset":1984},"end":{"line":23,"column":303,"offset":1988},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"body","position":{"start":{"line":23,"column":304,"offset":1989},"end":{"line":23,"column":308,"offset":1993},"indent":[]}}],"position":{"start":{"line":23,"column":303,"offset":1988},"end":{"line":23,"column":309,"offset":1994},"indent":[]}},{"type":"text","value":". Initially, your script will look like this:","position":{"start":{"line":23,"column":309,"offset":1994},"end":{"line":23,"column":354,"offset":2039},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1686},"end":{"line":23,"column":354,"offset":2039},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Database <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'better-sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// argv[2] would be the first argument passed to > node src/scripts/import.js [database.db]</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>readonly<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`SELECT n.nid, n.title, n.created, b.body_value, n.status FROM node n\n  INNER JOIN field_data_body b ON b.entity_id = n.nid`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrows<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// taken from: https://gist.github.com/matthagemann/382adfc57adbd5af078dc93feef01fe1</span>\n  <span class=\"token keyword\">const</span> slug <span class=\"token operator\">=</span> <span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> folder <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>status <span class=\"token operator\">?</span> <span class=\"token string\">'/../pages/'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'/../../drafts/'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> __dirname <span class=\"token operator\">+</span> folder <span class=\"token operator\">+</span> slug<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// timestamp in Drupal is in seconds, Date() expects microseconds</span>\n  <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>created <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":25,"column":1,"offset":2041},"end":{"line":42,"column":4,"offset":2831},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The interesting thing here is the initial query, and this is based on a Drupal 7 database. A Drupal 8 or Drupal 6 database could be different, so check your schema. Next, load the tags on a simple Javascript array. Each post can have more than one tag, so you can take advantage of better-sqlite’s ","position":{"start":{"line":44,"column":1,"offset":2833},"end":{"line":44,"column":299,"offset":3131},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":".pluck()","position":{"start":{"line":44,"column":300,"offset":3132},"end":{"line":44,"column":308,"offset":3140},"indent":[]}}],"position":{"start":{"line":44,"column":299,"offset":3131},"end":{"line":44,"column":309,"offset":3141},"indent":[]}},{"type":"text","value":" function, which retrieves only the first column of a database query, and the ","position":{"start":{"line":44,"column":309,"offset":3141},"end":{"line":44,"column":387,"offset":3219},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":".all()","position":{"start":{"line":44,"column":388,"offset":3220},"end":{"line":44,"column":394,"offset":3226},"indent":[]}}],"position":{"start":{"line":44,"column":387,"offset":3219},"end":{"line":44,"column":395,"offset":3227},"indent":[]}},{"type":"text","value":" function, which retrieves all rows in a single array:","position":{"start":{"line":44,"column":395,"offset":3227},"end":{"line":44,"column":449,"offset":3281},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2833},"end":{"line":44,"column":449,"offset":3281},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> db\n  <span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token string\">`SELECT td.name FROM taxonomy_index ti\n    INNER JOIN taxonomy_term_data td ON td.tid = ti.tid AND ti.nid = ?\n    WHERE ti.tid NOT IN (SELECT tid FROM taxonomy_index GROUP BY tid HAVING count(nid) = 1)`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>nid<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":46,"column":1,"offset":3283},"end":{"line":55,"column":4,"offset":3566},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For the image, you will retrieve only the URL of the image, so you can download it and store it locally. And you will replace ","position":{"start":{"line":57,"column":1,"offset":3568},"end":{"line":57,"column":127,"offset":3694},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">public://</code>","position":{"start":{"line":57,"column":127,"offset":3694},"end":{"line":57,"column":138,"offset":3705},"indent":[]}},{"type":"text","value":" for the URL path of the images folder on your old site:","position":{"start":{"line":57,"column":138,"offset":3705},"end":{"line":57,"column":194,"offset":3761},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3568},"end":{"line":57,"column":194,"offset":3761},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> db\n  <span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token string\">`SELECT filename, uri FROM field_data_field_image i\n    INNER JOIN file_managed f ON f.fid = i.field_image_fid\n    WHERE i.entity_id = ?`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>nid<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  image<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public://\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://myblog.com/files/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":3763},"end":{"line":70,"column":4,"offset":4057},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And now that you have all the data you need, it is just a matter of creating a file with the metadata in yaml format and the body of the text in Markdown format. Luckily, a Drupal blog can also use Markdown or you can also look for an HTML to Markdown Javascript library like ","position":{"start":{"line":72,"column":1,"offset":4059},"end":{"line":72,"column":277,"offset":4335},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/domchristie/turndown","children":[{"type":"text","value":"turndown","position":{"start":{"line":72,"column":278,"offset":4336},"end":{"line":72,"column":286,"offset":4344},"indent":[]}}],"position":{"start":{"line":72,"column":277,"offset":4335},"end":{"line":72,"column":328,"offset":4386},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":72,"column":328,"offset":4386},"end":{"line":72,"column":329,"offset":4387},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":4059},"end":{"line":72,"column":329,"offset":4387},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">+</span> <span class=\"token string\">'/index.md'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> flags<span class=\"token punctuation\">:</span> <span class=\"token string\">'w'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// This is here incase any errors occur</span>\n  file<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title: \"'</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">'\"\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date: '</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aliases: '</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>aliases<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tags: '</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---\\n\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// taken from: https://stackoverflow.com/a/22907134/9055</span>\n      <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> image<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`![</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>image<span class=\"token punctuation\">.</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">](./</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>image<span class=\"token punctuation\">.</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)\\n\\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>body_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> slug<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>aliases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":74,"column":1,"offset":4389},"end":{"line":97,"column":4,"offset":5189},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This script is now finished and you can execute it in your shell with this command:","position":{"start":{"line":99,"column":1,"offset":5191},"end":{"line":99,"column":84,"offset":5274},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":5191},"end":{"line":99,"column":84,"offset":5274},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; node src/scripts/import.js mysqlite.db</code></pre></div>","position":{"start":{"line":101,"column":1,"offset":5276},"end":{"line":103,"column":4,"offset":5324},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To have comments on your site you can use a service like ","position":{"start":{"line":105,"column":1,"offset":5326},"end":{"line":105,"column":58,"offset":5383},"indent":[]}},{"type":"link","title":null,"url":"https://disqus.com/","children":[{"type":"text","value":"Disqus","position":{"start":{"line":105,"column":59,"offset":5384},"end":{"line":105,"column":65,"offset":5390},"indent":[]}}],"position":{"start":{"line":105,"column":58,"offset":5383},"end":{"line":105,"column":87,"offset":5412},"indent":[]}},{"type":"text","value":". Disqus has an import process that uses a ","position":{"start":{"line":105,"column":87,"offset":5412},"end":{"line":105,"column":130,"offset":5455},"indent":[]}},{"type":"link","title":null,"url":"https://help.disqus.com/developer/custom-xml-import-format","children":[{"type":"text","value":"custom XML import format","position":{"start":{"line":105,"column":131,"offset":5456},"end":{"line":105,"column":155,"offset":5480},"indent":[]}}],"position":{"start":{"line":105,"column":130,"offset":5455},"end":{"line":105,"column":216,"offset":5541},"indent":[]}},{"type":"text","value":" based on the WXR (WordPress eXtended RSS) schema. So the process would be the same. Create a script named ","position":{"start":{"line":105,"column":216,"offset":5541},"end":{"line":105,"column":323,"offset":5648},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">src/scripts/export_comments.js</code>","position":{"start":{"line":105,"column":323,"offset":5648},"end":{"line":105,"column":355,"offset":5680},"indent":[]}},{"type":"text","value":" to query the database and, in this case, write a single file containing all the comments of your old site:","position":{"start":{"line":105,"column":355,"offset":5680},"end":{"line":105,"column":462,"offset":5787},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5326},"end":{"line":105,"column":462,"offset":5787},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Database <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"better-sqlite3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> yourSite <span class=\"token operator\">=</span> <span class=\"token string\">\"http://username.github.io/yoursite/\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> readonly<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> db\n  <span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token string\">`SELECT n.nid, n.title, n.created, b.body_value, n.status,\n  c.cid, c.pid, c.name, c.mail, c.created created_comment, c.homepage, c.hostname, c.subject, cb.comment_body_value\n  FROM node n\n  INNER JOIN field_data_body b ON b.entity_id = n.nid\n  INNER JOIN comment c ON c.nid = n.nid AND c.status = 1\n  INNER JOIN field_data_comment_body cb ON cb.entity_id = c.cid\n  ORDER BY n.nid, c.cid`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;rss version=\"2.0\"\n  xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n  xmlns:dsq=\"http://www.disqus.com/\"\n  xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n  xmlns:wp=\"http://wordpress.org/export/1.0/\"\n>\n  &lt;channel>`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> previous_slug <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nrows<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> slug <span class=\"token operator\">=</span> <span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>created <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> date_comment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>created_comment <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slug <span class=\"token operator\">!=</span> previous_slug<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previous_slug <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`&lt;/item>`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`&lt;item>\n      &lt;title></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/title>\n      &lt;link></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>yourSite<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/link>\n      &lt;content:encoded>&lt;![CDATA[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>body_value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]]>&lt;/content:encoded>\n      &lt;dsq:thread_identifier></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>nid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/dsq:thread_identifier>\n      &lt;wp:post_date_gmt></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDisqusDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:post_date_gmt>\n      &lt;wp:comment_status>open&lt;/wp:comment_status>`</span></span><span class=\"token punctuation\">)</span>\n    previous_slug <span class=\"token operator\">=</span> slug\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n    &lt;wp:comment>\n      &lt;wp:comment_id></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>cid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_id>\n      &lt;wp:comment_author></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_author>\n      &lt;wp:comment_author_email></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>mail<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_author_email>\n      &lt;wp:comment_author_url></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>homepage<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_author_url>\n      &lt;wp:comment_author_IP></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_author_IP>\n      &lt;wp:comment_date_gmt></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDisqusDate</span><span class=\"token punctuation\">(</span>date_comment<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_date_gmt>\n      &lt;wp:comment_content>&lt;![CDATA[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        row<span class=\"token punctuation\">.</span>comment_body_value\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]]>&lt;/wp:comment_content>\n      &lt;wp:comment_approved>1&lt;/wp:comment_approved>\n      &lt;wp:comment_parent></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>row<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/wp:comment_parent>\n    &lt;/wp:comment>\n  `</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`&lt;/item>&lt;/channel>&lt;/rss>`</span></span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> scriptName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node \"</span> <span class=\"token operator\">+</span> scriptName <span class=\"token operator\">+</span> <span class=\"token string\">\" &lt;database.sqlite>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDisqusDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">slugify</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"àáäâãåèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;\"</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"aaaaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------\"</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> string\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s+/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Replace spaces with</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Replace special characters</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&amp;/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-and-\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Replace &amp; with ‘and’</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^\\w\\-]+/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Remove all non-word characters</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\-\\-+/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Replace multiple — with single -</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^-+/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Trim — from start of text .replace(/-+$/, '') // Trim — from end of text</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":107,"column":1,"offset":5789},"end":{"line":205,"column":4,"offset":9074},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Run ","position":{"start":{"line":207,"column":1,"offset":9076},"end":{"line":207,"column":5,"offset":9080},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">node src/scripts/export_comments.js ../mysqlite.db &gt; comments.xml</code>","position":{"start":{"line":207,"column":5,"offset":9080},"end":{"line":207,"column":72,"offset":9147},"indent":[]}},{"type":"text","value":" and that’s it. This will generate a ","position":{"start":{"line":207,"column":72,"offset":9147},"end":{"line":207,"column":109,"offset":9184},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"comments.xml","position":{"start":{"line":207,"column":111,"offset":9186},"end":{"line":207,"column":123,"offset":9198},"indent":[]}}],"position":{"start":{"line":207,"column":109,"offset":9184},"end":{"line":207,"column":125,"offset":9200},"indent":[]}},{"type":"text","value":" file that you can ","position":{"start":{"line":207,"column":125,"offset":9200},"end":{"line":207,"column":144,"offset":9219},"indent":[]}},{"type":"link","title":null,"url":"https://import.disqus.com/","children":[{"type":"text","value":"import into disqus","position":{"start":{"line":207,"column":145,"offset":9220},"end":{"line":207,"column":163,"offset":9238},"indent":[]}}],"position":{"start":{"line":207,"column":144,"offset":9219},"end":{"line":207,"column":192,"offset":9267},"indent":[]}},{"type":"text","value":". Just remember to change the ","position":{"start":{"line":207,"column":192,"offset":9267},"end":{"line":207,"column":222,"offset":9297},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"yourSite","position":{"start":{"line":207,"column":224,"offset":9299},"end":{"line":207,"column":232,"offset":9307},"indent":[]}}],"position":{"start":{"line":207,"column":222,"offset":9297},"end":{"line":207,"column":234,"offset":9309},"indent":[]}},{"type":"text","value":" variable in the script, and it will link each comment to the correct post in your new blog using the slug used in the posts import.","position":{"start":{"line":207,"column":234,"offset":9309},"end":{"line":207,"column":366,"offset":9441},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":9076},"end":{"line":207,"column":366,"offset":9441},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You now have all the posts and all comments ready to be used on your Gatsby blog. You can see a working example here: ","position":{"start":{"line":209,"column":1,"offset":9443},"end":{"line":209,"column":119,"offset":9561},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/jackbravo/joaquin.axai.mx","children":[{"type":"text","value":"https://github.com/jackbravo/joaquin.axai.mx","position":{"start":{"line":209,"column":119,"offset":9561},"end":{"line":209,"column":163,"offset":9605},"indent":[]}}],"position":{"start":{"line":209,"column":119,"offset":9561},"end":{"line":209,"column":163,"offset":9605},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":209,"column":163,"offset":9605},"end":{"line":209,"column":164,"offset":9606},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":9443},"end":{"line":209,"column":164,"offset":9606},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":210,"column":1,"offset":9607}}}}