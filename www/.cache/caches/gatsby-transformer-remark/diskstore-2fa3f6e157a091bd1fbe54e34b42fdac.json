{"expireTime":9007200804686333000,"key":"transformer-remark-markdown-html-d2c6ced85f87d6fa1dfa77b3a883e1a1-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2 id=\"creating-dynamic-navigation-in-gatsby\"><a href=\"#creating-dynamic-navigation-in-gatsby\" aria-label=\"creating dynamic navigation in gatsby permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating dynamic navigation in Gatsby</h2>\n<p>At times you will want to be able to edit your website’s navigation in response to a <em>change in requirements</em>. To achieve this, you can use Gatsby to dynamically generate your navigation. Where you store the data for your navigation can be anywhere - a backend API, CMS, headless CMS or even the filesystem.</p>\n<p>What this section will cover:</p>\n<ul>\n<li>Adding data to your site’s configuration</li>\n<li>Querying the data using GraphQL</li>\n<li>Pulling the data into a component using StaticQuery</li>\n<li>Dynamically rendering your navigation</li>\n</ul>\n<p>You will be using <code class=\"language-text\">gatsby-config.js</code> to store the data for your links. <code class=\"language-text\">gatsby-config.js</code> is a file used for configuring Gatsby, located in the root path of every Gatsby project. A plain old JavaScript object is exported from this file; this object contains the <code class=\"language-text\">siteMetadata</code> object which you can query through graphql when generating your static pages.</p>\n<p>This guide will use the Gatsby starter project <code class=\"language-text\">gatsby-starter-default</code>, which can be downloaded through the Gatsby command line interface tool using the command <code class=\"language-text\">npx gatsby new [project-name] https://github.com/gatsbyjs/gatsby-starter-default</code>.</p>\n<h3 id=\"creating-the-link-data\"><a href=\"#creating-the-link-data\" aria-label=\"creating the link data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating the link data</h3>\n<p>First, locate the <code class=\"language-text\">gatsby-config.js</code> file in the root directory of your project. Inside the <code class=\"language-text\">siteMetadata</code> object, add an array of menu link objects. These objects should contain two properties: <code class=\"language-text\">name</code> and <code class=\"language-text\">link</code>. <code class=\"language-text\">name</code> is the name of your navigation item and <code class=\"language-text\">link</code> is the page which will be navigated to when a menu item is clicked.</p>\n<div class=\"gatsby-code-title\">gatsby-config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">module.exports = {\n  siteMetadata: {\n    title: 'Gatsby Default Starter',\n<span class=\"token inserted\">+    menuLinks:[</span>\n<span class=\"token inserted\">+      {</span>\n<span class=\"token inserted\">+         name:'home',</span>\n<span class=\"token inserted\">+         link:'/'</span>\n<span class=\"token inserted\">+      },</span>\n<span class=\"token inserted\">+      {</span>\n<span class=\"token inserted\">+         name:'page2',</span>\n<span class=\"token inserted\">+         link:'/page-2'</span>\n<span class=\"token inserted\">+      }</span>\n<span class=\"token inserted\">+    ]</span>\n  },\n  plugins: []\n}</code></pre></div>\n<h3 id=\"viewing-the-sitemetadata-in-graphql\"><a href=\"#viewing-the-sitemetadata-in-graphql\" aria-label=\"viewing the sitemetadata in graphql permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Viewing the <code class=\"language-text\">siteMetadata</code> in GraphQL</h3>\n<p>GraphQL can be used to query for information contained in the <code class=\"language-text\">siteMetadata</code> object located in your project’s <code class=\"language-text\">gatsby-config.js</code>. In order to test this out, you can start the <code class=\"language-text\">default-starter-project</code> in development mode by running <code class=\"language-text\">npm run develop</code>.</p>\n<p>Navigate to <code class=\"language-text\">http://localhost:8000/___graphql</code> in your browser to view the GraphiQL editor, which enables you to test GraphQL queries on the underlying APIs. Using the documentation explorer you can view the current GraphQL schema for your project, which is an invaluable resource during development.</p>\n<p>Examining the available types in GraphQL you will notice that you can query <code class=\"language-text\">site</code>. This GraphQL type further returns the <code class=\"language-text\">siteMetadata</code> which needs to be accessed to create the dynamic navigation. At this point, it is useful if you know a little GraphQL in order to extract the menu links. If you are unfamiliar with GraphQL, there is some excellent documentation available at GraphQL’s official website found <a href=\"https://graphql.org/learn/\">here</a> that you can use to brush up on your skills! The query below will return the menu links.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> SiteQuery <span class=\"token punctuation\">{</span>\n  site <span class=\"token punctuation\">{</span>\n    siteMetadata <span class=\"token punctuation\">{</span>\n      title\n      menuLinks <span class=\"token punctuation\">{</span>\n        name\n        link\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When executing this query within the GraphiQL editor you see output that looks similar to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"siteMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Gatsby Default Starter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"menuLinks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"link\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"page2\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"link\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/page-2\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Perfect! You now have a way of obtaining data from the <code class=\"language-text\">gatsby-config.js</code> file. Let’s continue by pulling this data into the layout using the query you just formed.</p>\n<h3 id=\"pulling-data-inside-the-layout-component\"><a href=\"#pulling-data-inside-the-layout-component\" aria-label=\"pulling data inside the layout component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pulling data inside the layout component</h3>\n<p>Inside your project, locate the <code class=\"language-text\">src/components</code> folder and navigate to the <code class=\"language-text\">layout.js</code> file. Within this layout component, you should notice a component named <code class=\"language-text\">StaticQuery</code>.</p>\n<p>StaticQuery is a new component introduced in Gatsby V2, which allows you to run GraphQL queries within your components, not just pages. It allows developers to collocate data with their components.</p>\n<p>Let’s extend the query within this component to include the menu links, so it looks like so:</p>\n<div class=\"gatsby-code-title\">src/components/layout.js</div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">const Layout = ({ children }) => (\n  &lt;StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n<span class=\"token inserted\">+            menuLinks {</span>\n<span class=\"token inserted\">+              name</span>\n<span class=\"token inserted\">+              link</span>\n<span class=\"token inserted\">+            }</span>\n          }\n        }\n      }\n    `}\n    render={data => (\n      &lt;React.Fragment>\n        &lt;Helmet\n          title={'tite'}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n        &lt;/Helmet>\n        &lt;Header siteTitle={data.site.siteMetadata.title} />\n        &lt;div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        &lt;/div>\n      &lt;/React.Fragment>\n    )}\n  />\n)</code></pre></div>\n<p>With the above changes to your <code class=\"language-text\">StaticQuery</code> component, the <code class=\"language-text\">render</code> property, which accepts a function that takes one argument, now has access to the menu links for use inside the function (as the argument). The last thing that is left to do is to display the site’s navigation.</p>\n<p>To do this, the header component that is already available in the project seems like it might be a good starting place to display the navigation. Let’s pass the <code class=\"language-text\">menuLinks</code> object to this header component like so:</p>\n<div class=\"gatsby-code-title\">src/components/layout.js</div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">const Layout = ({ children }) => (\n  &lt;StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n<span class=\"token inserted\">+            menuLinks {</span>\n<span class=\"token inserted\">+              name</span>\n<span class=\"token inserted\">+              link</span>\n<span class=\"token inserted\">+            }</span>\n          }\n        }\n      }\n    `}\n    render={data => (\n      &lt;React.Fragment>\n        &lt;Helmet\n          title={'tite'}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n        &lt;/Helmet>\n<span class=\"token deleted\">-      &lt;Header siteTitle={data.site.siteMetadata.title} /></span>\n<span class=\"token inserted\">+      &lt;Header menuLinks={data.site.siteMetadata.menuLinks} siteTitle={data.site.siteMetadata.title} /></span>\n        &lt;div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        &lt;/div>\n      &lt;/React.Fragment>\n    )}\n  />\n)</code></pre></div>\n<h3 id=\"using-the-header-component-to-display-the-navigation\"><a href=\"#using-the-header-component-to-display-the-navigation\" aria-label=\"using the header component to display the navigation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the header component to display the navigation</h3>\n<p>Locate the <code class=\"language-text\">header.js</code> file inside <code class=\"language-text\">src/components</code> and remove everything so only the functional component definition is left (everything else is just boilerplate code given to us when generating our project):</p>\n<div class=\"gatsby-code-title\">src/components/header.js</div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">import React from 'react'\nimport { Link } from 'gatsby'\nconst Header = ({ siteTitle, menuLinks }) => (\n<span class=\"token deleted\">-  &lt;div</span>\n<span class=\"token deleted\">-    style={{</span>\n<span class=\"token deleted\">-      background: 'rebeccapurple',</span>\n<span class=\"token deleted\">-      marginBottom: '1.45rem',</span>\n<span class=\"token deleted\">-    }}</span>\n<span class=\"token deleted\">-  ></span>\n<span class=\"token deleted\">-    &lt;div</span>\n<span class=\"token deleted\">-      style={{</span>\n<span class=\"token deleted\">-        margin: '0 auto',</span>\n<span class=\"token deleted\">-        maxWidth: 960,</span>\n<span class=\"token deleted\">-        padding: '1.45rem 1.0875rem',</span>\n<span class=\"token deleted\">-      }}</span>\n<span class=\"token deleted\">-    ></span>\n<span class=\"token deleted\">-      &lt;div style={{</span>\n<span class=\"token deleted\">-        display: 'flex',</span>\n<span class=\"token deleted\">-        'justifyItems': 'space-between',</span>\n<span class=\"token deleted\">-        'alignItems': 'center'</span>\n<span class=\"token deleted\">-      }}></span>\n<span class=\"token deleted\">-        &lt;h1 style={{ margin: 0, flex: 1 }}></span>\n<span class=\"token deleted\">-          &lt;Link</span>\n<span class=\"token deleted\">-            to=\"/\"</span>\n<span class=\"token deleted\">-            style={{</span>\n<span class=\"token deleted\">-              color: 'white',</span>\n<span class=\"token deleted\">-              textDecoration: 'none',</span>\n<span class=\"token deleted\">-            }}</span>\n<span class=\"token deleted\">-          ></span>\n<span class=\"token deleted\">-            {siteTitle}</span>\n<span class=\"token deleted\">-          &lt;/Link></span>\n<span class=\"token deleted\">-        &lt;/h1></span>\n<span class=\"token deleted\">-</span>\n<span class=\"token deleted\">-      &lt;/div></span>\n<span class=\"token deleted\">-    &lt;/div></span>\n<span class=\"token deleted\">-  &lt;/div></span>\n)</code></pre></div>\n<p>The <code class=\"language-text\">siteTitle</code> and <code class=\"language-text\">menuLinks</code> arguments are de-structered es6 syntax for quickly accessing an objects inner properties. It is functionally equivalent to writing <code class=\"language-text\">object.siteTitle</code> or <code class=\"language-text\">object.menuLinks</code>.</p>\n<p>You can now access the header component’s props and map the <code class=\"language-text\">menuLinks</code> array into elements that can be rendered in the document:</p>\n<div class=\"gatsby-code-title\">src/components/header.js</div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle, menuLinks }) => (\n<span class=\"token inserted\">+  &lt;nav style={{ display: 'flex', flex: 1 }}></span>\n<span class=\"token inserted\">+    {</span>\n<span class=\"token inserted\">+      menuLinks.map(link =></span>\n<span class=\"token inserted\">+        &lt;li key={link.name} style={{ 'listStyleType': 'none' }}></span>\n<span class=\"token inserted\">+          &lt;Link to={link.link}>{link.name}&lt;/Link></span>\n<span class=\"token inserted\">+        &lt;/li>)</span>\n<span class=\"token inserted\">+    }</span>\n<span class=\"token inserted\">+  &lt;/nav></span>\n)</code></pre></div>\n<p>Starting the development server by running <code class=\"language-text\">npm run develop</code> and navigating to <code class=\"language-text\">http://localhost:8000</code> you should now see some dynamically generated menu links on your page.</p>\n<p>If you have made it this far, good job! You can now add new site links to your website dynamically by adding entries to the <code class=\"language-text\">gatsby-config.js</code> file.</p>\n<h2 id=\"where-to-next\"><a href=\"#where-to-next\" aria-label=\"where to next permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where to next?</h2>\n<p>Be sure to check out more documentation for further in-depth examples and guides on achieving tasks using Gatsby.</p>\n<ul>\n<li><a href=\"/docs/authentication-tutorial/\">Authentication in Gatsby</a></li>\n<li><a href=\"/docs/ecommerce-tutorial/\">E-commerce in Gatsby</a></li>\n</ul>"}