{"expireTime":9007200804686348000,"key":"transformer-remark-markdown-html-2183875754009b4f98a6d63a6cb3d9ea-gatsby-remark-graphvizgatsby-remark-code-titlesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p><em>The recommended testing framework is <a href=\"https://jestjs.io/\">Jest</a>. This guide assumes that you followed the <a href=\"/docs/unit-testing\">Unit testing</a> guide to setup Jest.</em></p>\n<p>Kent C. Dodds’ <a href=\"https://github.com/kentcdodds/react-testing-library\">react-testing-library</a> has risen in popularity since its release and is a great replacement for <a href=\"https://github.com/airbnb/enzyme\">enzyme</a>. You can write unit and integration tests and it encourages you to query the DOM in the same way the user would. Hence the guiding principle:</p>\n<blockquote>\n<p>The more your tests resemble the way your software is used, the more confidence they can give you.</p>\n</blockquote>\n<p>It provides light utility functions on top of <code class=\"language-text\">react-dom</code> and <code class=\"language-text\">react-dom/test-utils</code> and gives you the confidence that refactors of your component in regards to the implementation (but not functionality) don’t break your tests.</p>\n<h2 id=\"installation\"><a href=\"#installation\" aria-label=\"installation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h2>\n<p>Install the library as one of your project’s <code class=\"language-text\">devDependencies</code>. Optionally you may install <code class=\"language-text\">jest-dom</code> to use its <a href=\"https://github.com/gnapse/jest-dom#custom-matchers\">custom jest matchers</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev react-testing-library jest-dom</code></pre></div>\n<p>Create the file <code class=\"language-text\">setup-test-env.js</code> at the root of your project. Insert this code into it:</p>\n<div class=\"gatsby-code-title\">setup-test-env.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"jest-dom/extend-expect\"</span>\n\n<span class=\"token comment\">// this is basically: afterEach(cleanup)</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"react-testing-library/cleanup-after-each\"</span></code></pre></div>\n<p>This file gets run automatically by Jest before every test and therefore you don’t need to add the imports to every single test file.</p>\n<p>Lastly you need to tell Jest where to find this file. Open your <code class=\"language-text\">jest.config.js</code> and add this entry to the bottom after ‘setupFiles’:</p>\n<div class=\"gatsby-code-title\">jest.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  setupFilesAfterEnv<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;rootDir>/setup-test-env.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"usage\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Let’s create a little example test using the newly added library. If you haven’t done already read the <a href=\"/docs/unit-testing\">unit testing guide</a> — essentially you’ll use <code class=\"language-text\">react-testing-library</code> instead of <code class=\"language-text\">react-test-renderer</code> now. There are a lot of options when it comes to selectors, this example chooses <code class=\"language-text\">getByTestId</code> here. It also utilizes <code class=\"language-text\">toHaveTextContent</code> from <code class=\"language-text\">jest-dom</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-testing-library\"</span>\n\n<span class=\"token comment\">// You have to write data-testid</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Title</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1 data<span class=\"token operator\">-</span>testid<span class=\"token operator\">=</span><span class=\"token string\">\"hero-title\"</span><span class=\"token operator\">></span>Gatsby is awesome<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Displays the correct title\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByTestId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Title <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Assertion</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hero-title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveTextContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gatsby is awesome!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// --> Test will pass</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>"}