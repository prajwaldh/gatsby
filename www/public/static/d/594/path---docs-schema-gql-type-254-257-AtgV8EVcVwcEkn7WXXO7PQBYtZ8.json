{"data":{"markdownRemark":{"html":"<p>Gatsby creates a <a href=\"https://graphql.org/graphql-js/type/#graphqlobjecttype\">GraphQLObjectType</a> for each distinct <code class=\"language-text\">node.internal.type</code> that is created during the source-nodes phase. Find out below how this is done.</p>\n<h2 id=\"graphql-types-for-each-type-of-node\"><a href=\"#graphql-types-for-each-type-of-node\" aria-label=\"graphql types for each type of node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Types for each type of node</h2>\n<p>When running a GraphQL query, there are a variety of fields that you will want to query. Let’s take an example, say we have the below query:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  file<span class=\"token punctuation\">(</span> <span class=\"token attr-name\">relativePath</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>  <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> `blogs/my-blog.md` <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    childMarkdownRemark <span class=\"token punctuation\">{</span>\n      <span class=\"token attr-name\">frontmatter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When GraphQL runs, it will query all <code class=\"language-text\">file</code> nodes by their relativePath and return the first node that satisfies that query. Then, it will filter down the fields to return by the inner expression. I.e <code class=\"language-text\">{ childMarkdownRemark ... }</code>. The building of the query arguments is covered by the <a href=\"/docs/schema-input-gql\">Inferring Input Filters</a> doc. This section instead explains how the inner filter schema is generated (it must be generated before input filters are inferred).</p>\n<p>During the <a href=\"/docs/node-apis/#sourceNodes\">sourceNodes</a> phase, let’s say that <a href=\"/packages/gatsby-source-filesystem\">gatsby-source-filesystem</a> ran and created a bunch of <code class=\"language-text\">File</code> nodes. Then, different transformers react via <a href=\"/docs/node-apis/#onCreateNode\">onCreateNode</a>, resulting in children of different <code class=\"language-text\">node.internal.type</code>s being created.</p>\n<p>There are 3 categories of node fields that we can query.</p>\n<h4 id=\"fields-on-the-created-node-object-eg\"><a href=\"#fields-on-the-created-node-object-eg\" aria-label=\"fields on the created node object eg permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields on the created node object. E.g</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">node <span class=\"token punctuation\">{</span>\n  relativePath<span class=\"token punctuation\">,</span>\n  extension<span class=\"token punctuation\">,</span>\n  size<span class=\"token punctuation\">,</span>\n  accessTime\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"childparent-eg\"><a href=\"#childparent-eg\" aria-label=\"childparent eg permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Child/Parent. E.g:</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">node <span class=\"token punctuation\">{</span>\n  childMarkdownRemark<span class=\"token punctuation\">,</span>\n  childrenPostsJson<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n  parent\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"fields-created-by-setfieldsongraphqlnodetype\"><a href=\"#fields-created-by-setfieldsongraphqlnodetype\" aria-label=\"fields created by setfieldsongraphqlnodetype permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fields created by setFieldsOnGraphQLNodeType</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">node <span class=\"token punctuation\">{</span>\n  publicURL\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Each of these categories of fields is created in a different way, explained below.</p>\n<h2 id=\"gqltype-creation\"><a href=\"#gqltype-creation\" aria-label=\"gqltype creation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gqlType Creation</h2>\n<p>The Gatsby term for the GraphQLObjectType for a unique node type, is <code class=\"language-text\">gqlType</code>. GraphQLObjectTypes are simply objects that define the type name and fields. The field definitions are created by the <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/build-node-types.js#L48\">createNodeFields</a> function in <code class=\"language-text\">build-node-types.js</code>.</p>\n<p>An important thing to note is that all gqlTypes are created before their fields are inferred. This allows fields to be of types that haven’t yet been created due to their order of compilation. This is accomplished by the use of <code class=\"language-text\">fields</code> <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/build-node-types.js#L167\">being a function</a> (basically lazy functions).</p>\n<p>The first step in inferring GraphQL Fields is to generate an <code class=\"language-text\">exampleValue</code>. It is the result of merging all fields of all nodes of the type in question. This <code class=\"language-text\">exampleValue</code> will therefore contain all potential field names and values, which allows us to infer each field’s types. The logic to create it is in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/data-tree-utils.js#L305\">getExampleValues</a>.</p>\n<p>With the exampleValue in hand, we can use each of its key/values to infer the Type’s fields (broken down by the 3 categories above).</p>\n<h3 id=\"fields-on-the-created-node-object\"><a href=\"#fields-on-the-created-node-object\" aria-label=\"fields on the created node object permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields on the created node object</h3>\n<p>Fields on the node that were created directly by the source and transform plugins. E.g for <code class=\"language-text\">File</code> type, these would be <code class=\"language-text\">relativePath</code>, <code class=\"language-text\">size</code>, <code class=\"language-text\">accessTime</code> etc.</p>\n<p>The creation of these fields is handled by the <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js#L317\">inferObjectStructureFromNodes</a> function in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js\">infer-graphql-type.js</a>. Given an object, a field could be in one of 3 sub-categories:</p>\n<ol>\n<li>It involves a mapping in <a href=\"/docs/gatsby-config/#mapping-node-types\">gatsby-config.js</a></li>\n<li>It’s value is a foreign key reference to some other node (ends in <code class=\"language-text\">___NODE</code>)</li>\n<li>It’s a plain object or value (e.g String, number, etc)</li>\n</ol>\n<h4 id=\"mapping-field\"><a href=\"#mapping-field\" aria-label=\"mapping field permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapping field</h4>\n<p>Mappings are explained in the <a href=\"/docs/gatsby-config/#mapping-node-types\">gatsby-config.js docs</a>. If the object field we’re generating a GraphQL type for is configured in the gatsby-config mapping, then we handle it specially.</p>\n<p>Imagine our top level Type we’re currently generating fields for is <code class=\"language-text\">MarkdownRemark.frontmatter</code>. And the field we are creating a GraphQL field for is called <code class=\"language-text\">author</code>. And, that we have a mapping setup of:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">mapping<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"MarkdownRemark.frontmatter.author\"</span><span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`AuthorYaml.name`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>The field generation in this case is handled by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js#L129\">inferFromMapping</a>. The first step is to find the type that is mapped to. In this case, <code class=\"language-text\">AuthorYaml</code>. This is known as the <code class=\"language-text\">linkedType</code>. That type will have a field to link by. In this case <code class=\"language-text\">name</code>. If one is not supplied, it defaults to <code class=\"language-text\">id</code>. This field is known as <code class=\"language-text\">linkedField</code></p>\n<p>Now we can create a GraphQL Field declaration whose type is <code class=\"language-text\">AuthorYaml</code> (which we look up in list of other <code class=\"language-text\">gqlTypes</code>). The field resolver will get the value for the node (in this case, the author string), and then search through the react nodes until it finds one whose type is <code class=\"language-text\">AuthorYaml</code> and whose <code class=\"language-text\">name</code> field matches the author string.</p>\n<h4 id=\"foreign-key-reference-___node\"><a href=\"#foreign-key-reference-___node\" aria-label=\"foreign key reference ___node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Foreign Key reference (<code class=\"language-text\">___NODE</code>)</h4>\n<p>If not a mapping field, it might instead end in <code class=\"language-text\">___NODE</code>, signifying that its value is an ID that is a foreign key reference to another node in redux. Check out <a href=\"/docs/create-source-plugin/#create-source-plugin\">Create a Source Plugin</a> for how this works from a user point of view. Behind the scenes, the field inference is handled by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js#L204\">inferFromFieldName</a>.</p>\n<p>This is actually quite similar to the mapping case above. We remove the <code class=\"language-text\">___NODE</code> part of the field name. E.g <code class=\"language-text\">author___NODE</code> would become <code class=\"language-text\">author</code>. Then, we find our <code class=\"language-text\">linkedNode</code>. I.e given the example value for <code class=\"language-text\">author</code> (which would be an ID), we find its actual node in redux. Then, we find its type in processed types by its <code class=\"language-text\">internal.type</code>. Note, that also like in mapping fields, we can define the <code class=\"language-text\">linkedField</code> too. This can be specified via <code class=\"language-text\">nodeFieldname___NODE___linkedFieldName</code>. E.g for <code class=\"language-text\">author___NODE___name</code>, the linkedField would be <code class=\"language-text\">name</code> instead of <code class=\"language-text\">id</code>.</p>\n<p>Now we can return a new GraphQL Field object, whose type is the one found above. Its resolver searches through all redux nodes until it finds one with the matching ID. As usual, it also creates a <a href=\"/docs/page-node-dependencies/\">page dependency</a>, from the query context’s path to the node ID.</p>\n<p>If the foreign key value is an array of IDs, then instead of returning a Field declaration for a single field, we return a <code class=\"language-text\">GraphQLUnionType</code>, which is a union of all the distinct linked types in the array.</p>\n<h4 id=\"plain-object-or-value-field\"><a href=\"#plain-object-or-value-field\" aria-label=\"plain object or value field permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plain object or value field</h4>\n<p>If the field was not handled as a mapping or foreign key reference, then it must be a normal every day field. E.g a scalar, string, or plain object. These cases are handled by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js#L38\">inferGraphQLType</a>.</p>\n<p>The core of this step creates a GraphQL Field object, where the type is inferred directly via the result of <code class=\"language-text\">typeof</code>. E.g <code class=\"language-text\">typeof(value) === &#39;boolean&#39;</code> would result in type <code class=\"language-text\">GraphQLBoolean</code>. Since these are simple values, resolvers are not defined (graphql-js takes care of that for us).</p>\n<p>If however, the value is an object or array, we recurse, using <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js#L317\">inferObjectStructureFromNodes</a> to create the GraphQL fields.</p>\n<p>In addition, Gatsby creates custom GraphQL types for <code class=\"language-text\">File</code> (<a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/types/type-file.js\">types/type-file.js</a>) and <code class=\"language-text\">Date</code> (<a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/types/type-file.js\">types/type-date.js</a>). If the value of our field is a string that looks like a filename or a date (handled by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/infer-graphql-type.js#L52\">should-infer</a> functions), then we return the appropariate custom type.</p>\n<h3 id=\"childparent-fields\"><a href=\"#childparent-fields\" aria-label=\"childparent fields permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Child/Parent fields</h3>\n<h4 id=\"child-fields-creation\"><a href=\"#child-fields-creation\" aria-label=\"child fields creation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Child fields creation</h4>\n<p>Let’s continue with the <code class=\"language-text\">File</code> type example. There are many transformer plugins that implement <code class=\"language-text\">onCreateNode</code> for <code class=\"language-text\">File</code> nodes. These produce <code class=\"language-text\">File</code> children that are of their own type. E.g <code class=\"language-text\">markdownRemark</code>, <code class=\"language-text\">postsJson</code>.</p>\n<p>Gatsby stores these children in redux as IDs in the parent’s <code class=\"language-text\">children</code> field. And then stores those child nodes as full redux nodes themselves (see <a href=\"/docs/node-creation/#node-relationship-storage-model\">Node Creation</a> for more). E.g for a File node with two children, it will be stored in the redux <code class=\"language-text\">nodes</code> namespace as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id1`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`File`</span></span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`id2`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`id3`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id2`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`markdownRemark`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id3`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`postsJson`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An important note here is that we do not store a distinct collection of each type of child. Rather we store a single collection that they’re all packed into. The benefit of this is that we can easily create a <code class=\"language-text\">File.children</code> field that returns all children, regardless of type. The downside is that the creation of fields such as <code class=\"language-text\">File.childMarkdownRemark</code> and <code class=\"language-text\">File.childrenPostsJson</code> is more complicated. This is what <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/build-node-types.js#L48\">createNodeFields</a> does.</p>\n<p>Another convenience Gatsby provides is the ability to query a node’s <code class=\"language-text\">child</code> or <code class=\"language-text\">children</code>, depending on whether a parent node has 1 or more children of that type.</p>\n<h4 id=\"child-resolvers\"><a href=\"#child-resolvers\" aria-label=\"child resolvers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>child resolvers</h4>\n<p>When defining our parent <code class=\"language-text\">File</code> gqlType, <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/build-node-types.js#L48\">createNodeFields</a> will iterate over the distinct types of its children, and create their fields. Let’s say one of these child types is <code class=\"language-text\">markdownRemark</code>. Let’s assume there is only one <code class=\"language-text\">markdownRemark</code> child per <code class=\"language-text\">File</code>. Therefore, its field name is <code class=\"language-text\">childMarkdownRemark</code>. Now, we must create its graphql Resolver.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resolve(node, args, context, info)</code></pre></div>\n<p>The resolve function will be called when we are running queries for our pages. A query might look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  file<span class=\"token punctuation\">(</span> relativePath <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"blog/my-blog.md\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    childMarkdownRemark <span class=\"token punctuation\">{</span> html <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To resolve <code class=\"language-text\">file.childMarkdownRemark</code>, we take the node we’re resolving, and filter over all of its <code class=\"language-text\">children</code> until we find one of type <code class=\"language-text\">markdownRemark</code>, which is returned. Remember that <code class=\"language-text\">children</code> is a collection of IDs. So as part of this, we lookup the node by ID in redux too.</p>\n<p>But before we return from the resolve function, remember that we might be running this query within the context of a page. If that’s the case, then whenever the node changes, the page will need to be rerendered. To record that fact, we call call <a href=\"/docs/page-node-dependencies/\">createPageDependency</a> with the node ID and the page, which is a field in the <code class=\"language-text\">context</code> object in the resolve function signature.</p>\n<h4 id=\"parent-field\"><a href=\"#parent-field\" aria-label=\"parent field permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parent field</h4>\n<p>When a node is created as a child of some node (parent), that fact is stored in the child’s <code class=\"language-text\">parent</code> field. The value of which is the ID of the parent. The <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/build-node-types.js#L57\">GraphQL resolver</a> for this field looks up the parent by that ID in redux and returns it. It also creates a <a href=\"/docs/page-node-dependencies/\">page dependency</a>, to record that the page being queried depends on the parent node.</p>\n<h3 id=\"plugin-fields\"><a href=\"#plugin-fields\" aria-label=\"plugin fields permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin fields</h3>\n<p>These are fields created by plugins that implement the <a href=\"/docs/node-apis/#setFieldsOnGraphQLNodeType\">setFieldsOnGraphQLNodeType</a> API. These plugins return full GraphQL Field declarations, complete with type and resolve functions.</p>\n<h3 id=\"file-types\"><a href=\"#file-types\" aria-label=\"file types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File types</h3>\n<p>As described in <a href=\"#plain-object-or-value-field\">plain object or value field</a>, if a string field value looks like a file path, then we infer <code class=\"language-text\">File</code> as the field’s type. The creation of this type occurs in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/types/type-file.js#L18\">type-file.js setFileNodeRootType()</a>. It is called just after we have created the GqlType for <code class=\"language-text\">File</code> (only called once).</p>\n<p>It creates a new GraphQL Field Config whose type is the just created <code class=\"language-text\">File</code> GqlType, and whose resolver converts a string into a File object. Here’s how it works:</p>\n<p>Say we have a <code class=\"language-text\">data/posts.json</code> file that has been sourced (of type <code class=\"language-text\">File</code>), and then the <a href=\"/packages/gatsby-transformer-json\">gatsby-transformer-json</a> transformer creates a child node (of type <code class=\"language-text\">PostsJson</code>)</p>\n<div class=\"gatsby-code-title\">data/posts.json</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1685001452849004065\"</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Venice is 👌\"</span><span class=\"token punctuation\">,</span>\n    image<span class=\"token punctuation\">:</span> <span class=\"token string\">\"images/BdiU-TTFP4h.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Notice that the image value looks like a file. Therefore, we’d like to query it as if it were a file, and get its relativePath, accessTime, etc.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  postsJson<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1685001452849004065\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    image <span class=\"token punctuation\">{</span>\n      relativePath\n      accessTime\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/schema/types/type-file.js#L135\">File type resolver</a> takes care of this. It gets the value (<code class=\"language-text\">images/BdiU-TTFP4h.jpg</code>). It then looks up this node’s root NodeID via <a href=\"/docs/node-tracking/\">Node Tracking</a> which returns the original <code class=\"language-text\">data/posts.json</code> file. It creates a new filename by concatenating the field value onto the parent node’s directory.</p>\n<p>I.e <code class=\"language-text\">data</code> + <code class=\"language-text\">images/BdiU-TTFP4h.jpg</code> = <code class=\"language-text\">data/images/BdiU-TTFP4h.jpg</code>.</p>\n<p>And then finally it searches redux for the first <code class=\"language-text\">File</code> node whose path matches this one. This is our proper resolved node. We’re done!</p>","excerpt":"Gatsby creates a  GraphQLObjectType  for each distinct   that is created during the source-nodes phase. Find out below how this is done…","timeToRead":11,"fields":{"slug":"/docs/schema-gql-type/","anchor":"schema-gql-type"},"frontmatter":{"title":"GraphQL Node Types Creation","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/schema-gql-type.md"}}},"pageContext":{"slug":"/docs/schema-gql-type/"}}