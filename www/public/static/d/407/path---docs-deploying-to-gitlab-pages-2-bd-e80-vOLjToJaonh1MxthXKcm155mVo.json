{"data":{"markdownRemark":{"html":"<p>GitLab Pages are very similar to GitHub Pages. GitLab Pages also supports custom domain names and SSL certificates and includes a continuous integration platform.</p>\n<p>Create a new GitLab repository, <a href=\"/docs/\">create a new Gatsby site</a> if you haven’t already, and add the GitLab remote.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> remote add origin git@gitlab.com:examplerepository\n<span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token function\">git</span> push -u origin master</code></pre></div>\n<p>You can deploy sites on GitLab Pages with or without a custom domain. If you choose to use the default setup (without a custom domain), or if you create a project site, you will need to setup your site with path prefixing. If adding a custom domain, you can skip the Path Prefix step, and remove <code class=\"language-text\">--prefix-paths</code> from the gitlab-ci.yml file.</p>\n<h2 id=\"add-path-prefix-to-gatsby\"><a href=\"#add-path-prefix-to-gatsby\" aria-label=\"add path prefix to gatsby permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Path Prefix to Gatsby</h2>\n<p>As the site will be hosted under yourname.gitlab.io/examplerepository/, you will need to configure Gatsby to use the Path Prefix plugin.</p>\n<p>In the <code class=\"language-text\">gatsby-config.js</code>, set the <code class=\"language-text\">pathPrefix</code> to be added to your site’s link paths. The <code class=\"language-text\">pathPrefix</code> should be the project name in your repository. (ex. <code class=\"language-text\">https://gitlab.com/yourname/examplerepository/</code> - your <code class=\"language-text\">pathPrefix</code> should be <code class=\"language-text\">/examplerepository</code>). See <a href=\"/docs/path-prefix/\">the docs page on path prefixing for more</a>.</p>\n<div class=\"gatsby-code-title\">gatsby-config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  pathPrefix<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/examplerepository`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"build-and-deploy-with-gitlab-ci\"><a href=\"#build-and-deploy-with-gitlab-ci\" aria-label=\"build and deploy with gitlab ci permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build and Deploy with GitLab CI</h2>\n<p>To use GitLab’s continuous integration (CI), you need to add a <code class=\"language-text\">.gitlab-ci.yml</code> configuration file. This is the file that GitLab uses to manage the CI job.</p>\n<p>The online editor on the <a href=\"https://gitlab.com\">GitLab</a> website contains a pre-built template for Gatsby deployment.</p>\n<p>To use the template open your repository on their website, select the ‘Setup CI/CD’ option on the center menu, and it will create a new blank <code class=\"language-text\">.gitlab-ci.yml</code> for you. Now select the ‘Apply a GitLab CI Yaml Template’ drop-down, and type ‘Gatsby’ into the filter. Select the Gatsby option, click ‘Commit Changes’, and you are done!</p>\n<p>If adding this manually to your project, the file needs to contain a few required fields:</p>\n<div class=\"gatsby-code-title\">.gitlab-ci.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span>latest\n\n<span class=\"token comment\"># This folder is cached between builds</span>\n<span class=\"token comment\"># http://docs.gitlab.com/ce/ci/yaml/README.html#cache</span>\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node_modules/\n\n<span class=\"token key atrule\">pages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> npm install\n    <span class=\"token punctuation\">-</span> ./node_modules/.bin/gatsby build <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>prefix<span class=\"token punctuation\">-</span>paths\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> public\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> master</code></pre></div>\n<p>The CI platform uses Docker images/containers, so <code class=\"language-text\">image: node:latest</code> tells the CI to use the latest node image. <code class=\"language-text\">cache:</code> caches the <code class=\"language-text\">node_modules</code> folder in between builds, so subsequent builds should be a lot faster as it doesn’t have to reinstall all the dependencies required. <code class=\"language-text\">pages:</code> is the name of the CI stage. You can have multiple stages, e.g. ‘Test’, ‘Build’, ‘Deploy’ etc. <code class=\"language-text\">script:</code> starts the next part of the CI stage, telling it to start running the below scripts inside the image selected. <code class=\"language-text\">npm install</code> and <code class=\"language-text\">./node_modules/.bin/gatsby build --prefix-paths</code> will install all dependencies, and start the static site build, respectively.</p>\n<p><code class=\"language-text\">./node_modules/.bin/gatsby build --prefix-paths</code> was used so you don’t have to install gatsby-cli to build the image, as it has already been included and installed with <code class=\"language-text\">npm install</code>. <code class=\"language-text\">--prefix-paths</code> was used because <em>without</em> that flag, Gatsby ignores your pathPrefix. <code class=\"language-text\">artifacts:</code> and <code class=\"language-text\">paths:</code> are used to tell GitLab pages\nwhere the static files are kept. <code class=\"language-text\">only:</code> and <code class=\"language-text\">master</code> tells the CI to only run the above instructions when the master branch is deployed.</p>\n<p>Add that configuration, and with the next master branch push, your site should have been built correctly. This can be checked by going to your repository on GitLab, and selecting CI/CD in the sidebar. This will then show you a log of all jobs that have either succeeded or failed. You can click on the failed status, and then select the job to get more information about why your build may have failed.</p>\n<p>If all went well, you should now be able to access your site. It will be hosted under gitlab.io - for example if you have a repository under your namespace, the url will be yourname.gitlab.io/examplerepository.</p>\n<p>Visit the <a href=\"https://gitlab.com/help/user/project/pages/getting_started_part_one.md\">GitLab Pages</a> to learn how to setup custom domains and find out about advanced configurations.</p>","excerpt":"GitLab Pages are very similar to GitHub Pages. GitLab Pages also supports custom domain names and SSL certificates and includes a continuous…","timeToRead":3,"fields":{"slug":"/docs/deploying-to-gitlab-pages/","anchor":"deploying-to-gitlab-pages"},"frontmatter":{"title":"Deploying to GitLab Pages","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/deploying-to-gitlab-pages.md"}}},"pageContext":{"slug":"/docs/deploying-to-gitlab-pages/"}}