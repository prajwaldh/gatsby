{"data":{"markdownRemark":null,"npmPackage":{"name":"@gatsby-contrib/gatsby-plugin-elasticlunr-search","description":"Search for gatsby; implemented via elasticlunr.","keywords":["gatsby","gatsby-plugin","lunr","search","elastic lunr"],"lastPublisher":{"name":"benabel","avatar":"https://gravatar.com/avatar/ca7d96fb4714c9cace4642ececaedbaf"},"repository":{"url":"https://github.com/gatsby-contrib/gatsby-plugin-elasticlunr-search"},"readme":{"childMarkdownRemark":{"html":"<!--\n[![Maintainability](https://api.codeclimate.com/v1/badges/124348de2ee6850d682f/maintainability)](https://codeclimate.com/github/andrew-codes/gatsby-plugin-elasticlunr-search/maintainability)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/7230ae7191f44a9489834553760310c2)](https://www.codacy.com/app/andrew-codes/gatsby-plugin-elasticlunr-search?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=andrew-codes/gatsby-plugin-elasticlunr-search&amp;utm_campaign=Badge_Grade)\n\n-->\n<h1 id=\"search-plugin-for-gatsby\"><a href=\"#search-plugin-for-gatsby\" aria-label=\"search plugin for gatsby permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Search Plugin for Gatsby</h1>\n<p>This plugin enables search integration via elastic lunr. Content is indexed and then made available via graphql to rehydrate into an <code class=\"language-text\">elasticlunr</code> index. From there, queries can be made against this index to retrieve pages by their ID.</p>\n<p>It is a fork of <a href=\"https://github.com/andrew-codes/gatsby-plugin-elasticlunr-search\">gatsby-plugin-elasticlunr-search</a> made in order to use the plugin with gatsby-v2.</p>\n<h1 id=\"getting-started\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h1>\n<p>Install the plugin via <code class=\"language-text\">npm install --save @gatsby-contrib/gatsby-plugin-elasticlunr-search</code>.</p>\n<p>See the <a href=\"https://gatsby-contrib.github.io/gatsby-plugin-elasticlunr-search/\">example site</a> <a href=\"./example\">code</a> for more specific implementation details.</p>\n<p>Next, update your <code class=\"language-text\">gatsby-config.js</code> file to utilize the plugin.</p>\n<h2 id=\"setup-in-gatsby-config\"><a href=\"#setup-in-gatsby-config\" aria-label=\"setup in gatsby config permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup in <code class=\"language-text\">gatsby-config</code></h2>\n<p>Here’s an example for a site that create pages using markdown, in which you you’d like to allow search features for <code class=\"language-text\">title</code> and <code class=\"language-text\">tags</code> frontmatter entries.</p>\n<p><code class=\"language-text\">gatsby-config.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`@gatsby-contrib/gatsby-plugin-elasticlunr-search`</span></span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Fields to index</span>\n        fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`title`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`tags`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// How to resolve each field`s value for a supported node type</span>\n        resolvers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// For any node of type MarkdownRemark, list how to resolve the fields` values</span>\n          MarkdownRemark<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            title<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n            tags<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> node <span class=\"token operator\">=></span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"consuming-in-your-site\"><a href=\"#consuming-in-your-site\" aria-label=\"consuming in your site permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consuming in Your Site</h2>\n<p>The serialized search index will be available via graphql. Once queried, a component can create a new elasticlunr index with the value retrieved from the graphql query. Search queries can be made against the hydrated search index. The results is an array of document IDs. The index can return the full document given a document ID.</p>\n<p>In gatsby-v2, it is possible to use graphql queries inside components using <a href=\"https://www.gatsbyjs.org/docs/static-query/\"><code class=\"language-text\">StaticQuery</code></a>.</p>\n<p>Suppose that you want to include the <code class=\"language-text\">Search</code> component inside an <code class=\"language-text\">Header</code> component. <em>(Of course, you could also query <code class=\"language-text\">siteSearchIndex</code> from <code class=\"language-text\">layout.js</code> component, and pass it down as prop to any component that need it.)</em></p>\n<p>First, query the data with <code class=\"language-text\">StaticQuery</code> inside the <code class=\"language-text\">Header</code> component, and pass it as props to the <code class=\"language-text\">Search</code> component.</p>\n<p><code class=\"language-text\">components/header.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticQuery<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n\n<span class=\"token keyword\">import</span> Search <span class=\"token keyword\">from</span> <span class=\"token string\">\"./search\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StaticQuery\n    query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>graphql<span class=\"token template-string\"><span class=\"token string\">`\n      query SearchIndexQuery {\n        siteSearchIndex {\n          index\n        }\n      }\n    `</span></span><span class=\"token punctuation\">}</span>\n    render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span>\n        <span class=\"token operator\">...</span> header stuff<span class=\"token operator\">...</span>\n        <span class=\"token operator\">&lt;</span>Search searchIndex<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>siteSearchIndex<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header</code></pre></div>\n<p>And then use the <code class=\"language-text\">searchIndex</code> inside your <code class=\"language-text\">Search</code> component.</p>\n<p><code class=\"language-text\">components/search.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Index <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"elasticlunr\"</span>\n\n<span class=\"token comment\">// Search component</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Search</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      query<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">``</span></span><span class=\"token punctuation\">,</span>\n      results<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> page<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span><span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> page<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`,`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">getOrCreateIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index\n      <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index\n      <span class=\"token punctuation\">:</span> <span class=\"token comment\">// Create an elastic lunr index and hydrate with graphql query results</span>\n        Index<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>searchIndex<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> evt <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrCreateIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Query the index with search string to get an [] of IDs</span>\n      results<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index\n        <span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Map over each ID and return the full document</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span>documentStore<span class=\"token punctuation\">.</span><span class=\"token function\">getDoc</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"partial-searches\"><a href=\"#partial-searches\" aria-label=\"partial searches permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Partial Searches</h2>\n<p>If you want your search to include partial matches, for example if you had the following data:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">sku<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ab21345\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ab98765\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdef12\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>And wanted a search for ”<strong><em>ab</em></strong>” to return all of those data, then you can simply include <code class=\"language-text\">{ expand: true }</code> as the second parameter to <code class=\"language-text\">this.index.search()</code> when setting the <code class=\"language-text\">results</code> state.</p>\n<p>Taking the above example implementation, adapt the <code class=\"language-text\">search</code> function in the <code class=\"language-text\">Search</code> component to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> evt <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrCreateIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Query the index with search string to get an [] of IDs</span>\n    results<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index\n      <span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> expand<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Accept partial matches</span>\n      <span class=\"token comment\">// Map over each ID and return the full document</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span>documentStore<span class=\"token punctuation\">.</span><span class=\"token function\">getDoc</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"optimize-handling-of-data-models-with-nested-nodes\"><a href=\"#optimize-handling-of-data-models-with-nested-nodes\" aria-label=\"optimize handling of data models with nested nodes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimize handling of data models with nested nodes</h2>\n<p>There are times when you have a data model that has nested nodes. Example resolver configuration in <code class=\"language-text\">gatsby-config.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reslovers : {\n  // For any node of BlogPost, list how to resolve the fields&#39; values\n  BlogPost : {\n    title         : node =&gt; node.title,\n    featuredImage : node =&gt; node.featuredImage___NODE // featuredImage is of type Asset below and is an id reference to Asset\n  },\n\n  // For any node of type Asset, this is how BlogPost featuredImage is resolved\n  Asset : {\n    fileUrl : node =&gt; node.file &amp;&amp; node.file.url\n  }\n}</code></pre></div>\n<p>The problem with the above resolvers configuration is that it will include all Asset models in the <code class=\"language-text\">elasticlunr</code> index,\npotentially bloating the <code class=\"language-text\">elasticlunr</code> index and leading to large bundle sizes and slower page load times.</p>\n<p>The solution is to make use of the second paramater passed to each field resolver function called <code class=\"language-text\">getNode</code>. <code class=\"language-text\">getNode</code> is the same function provided by gatsby\nto the <a href=\"https://www.gatsbyjs.org/docs/node-apis/#setFieldsOnGraphQLNodeType\">setFieldsOnGraphQLNodeType</a> node api method and when called\nwith a data model node id it will return a node with all it’s data. The above example of the <code class=\"language-text\">BlogPost</code> model with the nested <code class=\"language-text\">featuredImage</code> property of\ntype <code class=\"language-text\">Asset</code> then becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reslovers : {\n  // For any node of BlogPost, list how to resolve the fields&#39; values\n  BlogPost : {\n    title         : node =&gt; node.title,\n    featuredImage : (node, getNode) =&gt; getNode(node.featuredImage___NODE) // featuredImage is of type Asset and is now the Asset model itself\n  }\n}</code></pre></div>\n<p>Now you can use the <code class=\"language-text\">featuredImage</code> data of <code class=\"language-text\">BlogPost</code> model without including all <code class=\"language-text\">Asset</code> models in the <code class=\"language-text\">elasticlunr</code> index <a href=\"https://github.com/gatsby-contrib/gatsby-plugin-elasticlunr-search/pull/3\">(see PR #3 for more details)</a>.</p>","timeToRead":5}}}},"pageContext":{"slug":"/packages/@gatsby-contrib/gatsby-plugin-elasticlunr-search/","id":"37db8657-c4fe-5858-857d-c3305f93db88","layout":"plugins"}}