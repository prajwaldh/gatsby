{"data":{"markdownRemark":{"html":"<h2 id=\"environments-and-environment-variables\"><a href=\"#environments-and-environment-variables\" aria-label=\"environments and environment variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environments and Environment Variables</h2>\n<p>You can provide environment variables to your site to customise its behaviour in different environments.</p>\n<p>Note that we need to distinguish in this discussion between variables which have been defined in\nspecial places in order to be used in different deployment environments, and true OS-level\nenvironment variables that could be used in, for example, command-line calls.\nWe’ll call the former “Project Env Vars” and the latter “OS Env Vars”.\nIn both cases we want to be able to access the relevant value of these variable for the environment\nwe’re in.</p>\n<p>By default gatsby supports only 2 environments:</p>\n<ul>\n<li>If you run the develop script then you will be in the <code class=\"language-text\">development</code> environment.</li>\n<li>If you run the build or serve scripts, then you will be in the <code class=\"language-text\">production</code> environment.</li>\n</ul>\n<p>If you want to define other environments then you’ll need to do a little more work. See ‘Additional Environments’ below. You can also have a look at our <a href=\"https://codesandbox.io/s/6w9jjrnnjn\">environment variables codesandbox</a> while reading the examples below.</p>\n<h2 id=\"accessing-environment-variables-in-javascript\"><a href=\"#accessing-environment-variables-in-javascript\" aria-label=\"accessing environment variables in javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessing Environment Variables in JavaScript</h2>\n<p>All of the Project and OS Env Vars are only directly available at build time, or\nwhen Node.Js is running. They aren’t immediately available at run time of the client code; they\nneed to be actively captured and embedded into our client-side JavaScript.\nThis is achieved during the build using Webpack’s <a href=\"https://webpack.js.org/plugins/define-plugin/\">DefinePlugin</a>.</p>\n<p>Once the environment variables have been embedded into the client-side, they are accessible from the\nglobal variable <code class=\"language-text\">process.env</code>.\nOS Env Vars are accessible in Node.js from the same <code class=\"language-text\">process.env</code> global variable.</p>\n<p>Note that since these variables are embedded at build time, you will need to restart your dev server\nor rebuild your site after changing them.</p>\n<h2 id=\"defining-environment-variables\"><a href=\"#defining-environment-variables\" aria-label=\"defining environment variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining Environment Variables</h2>\n<h4 id=\"client-side-javascript\"><a href=\"#client-side-javascript\" aria-label=\"client side javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client-side JavaScript</h4>\n<p>For Project Env Vars that you want to access in client-side browser JavaScript, you can define\nan environment config file, <code class=\"language-text\">.env.development</code> and/or <code class=\"language-text\">.env.production</code>, in your root folder.\nDepending on your active environment, the correct one will be found and its values embedded as environment variables in the\nbrowser JavaScript.</p>\n<p>In addition to these Project Environment Variables defined in <code class=\"language-text\">.env.*</code> files, you could also define\nOS Env Vars. OS Env Vars which are prefixed with <code class=\"language-text\">GATSBY_</code> will become available in\nbrowser JavaScript.</p>\n<div class=\"gatsby-code-title\">.env.*</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GATSBY_API_URL=https://dev.example.com/api</code></pre></div>\n<h4 id=\"server-side-nodejs\"><a href=\"#server-side-nodejs\" aria-label=\"server side nodejs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server-side Node.js</h4>\n<p>Gatsby runs several Node.js scripts at build time, notably <code class=\"language-text\">gatsby-config.js</code> and <code class=\"language-text\">gatsby-node.js</code>.\nOS Env Vars will already be available when Node is running, so you can add environment variables the\nnormal ways e.g. by adding environment variables through your hosting/build tool, your OS, or when\ncalling Gatsby on the command line.</p>\n<p>In Linux terminals this can be done with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">MY_ENV_VAR<span class=\"token operator\">=</span>foo <span class=\"token function\">npm</span> run develop</code></pre></div>\n<p>In Windows it’s a little more complex. <a href=\"https://stackoverflow.com/questions/1420719/powershell-setting-an-environment-variable-for-a-single-command-only\">Check out this Stack Overflow article for some options</a></p>\n<p>Project environment variables that you defined in the <code class=\"language-text\">.env.*</code> files will <em>NOT</em> be immediately available\nin your Node.js scripts. To use those variables, use NPM package <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a> to\nexamine the active <code class=\"language-text\">.env.*</code> file and attached those values,\nIt’s already a dependency of Gatsby, so you can require it in your <code class=\"language-text\">gatsby-config.js</code> or <code class=\"language-text\">gatsby-node.js</code> like this:</p>\n<div class=\"gatsby-code-title\">gatsby-config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`.env.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now the variables are available on <code class=\"language-text\">process.env</code> as usual.</p>\n<h2 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>Please note that you shouldn’t commit <code class=\"language-text\">.env.*</code> files to your source control and rather use options given by your CD provider (e.g. Netlify with its <a href=\"https://www.netlify.com/docs/continuous-deployment/#build-environment-variables\">build environment variables</a>).</p>\n<div class=\"gatsby-code-title\">.env.development</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GATSBY_API_URL=https://dev.example.com/api\nAPI_KEY=927349872349798</code></pre></div>\n<div class=\"gatsby-code-title\">.env.production</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GATSBY_API_URL=https://example.com/api\nAPI_KEY=927349872349798</code></pre></div>\n<p>Note: since Gatsby uses the <a href=\"https://webpack.js.org/plugins/define-plugin/\">Webpack DefinePlugin</a> to make the environment variables available at runtime, they cannot be destructured from <code class=\"language-text\">process.env</code>; instead, they have to be fully referenced.\n<code class=\"language-text\">GATSBY_API_URL</code> will be available to your site (Client-side and server-side) as <code class=\"language-text\">process.env.GATSBY_API_URL</code>.:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In any frontend code</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GATSBY_API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/logo.png`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Logo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">API_KEY</code> will be available to your site (Server-side) as <code class=\"language-text\">process.env.API_KEY</code>. If you commit your <code class=\"language-text\">.env.*</code> file containing <code class=\"language-text\">API_KEY</code> to source control it would also be available on the client-side. However we strongly advise against that! You should prefix your variable with <code class=\"language-text\">GATSBY_</code> (as shown above) instead and Gatsby automatically makes it available in the browser context.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// In any server-side code, e.g. gatsby-config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`gatsby-source-patronus`</span></span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        apiKey<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_KEY</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"reserved-environment-variables\"><a href=\"#reserved-environment-variables\" aria-label=\"reserved environment variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reserved Environment Variables:</h2>\n<blockquote>\n<p>You can not override certain environment variables as some are used internally\nfor optimizations during build</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">NODE_ENV</code></li>\n<li><code class=\"language-text\">PUBLIC_DIR</code></li>\n</ul>\n<p>Gatsby also allows you to specify another environment variable when running the local development server (e.g. <code class=\"language-text\">npm run develop</code>):</p>\n<ul>\n<li><code class=\"language-text\">ENABLE_GATSBY_REFRESH_ENDPOINT</code></li>\n</ul>\n<p>If set to true, this will expose a <code class=\"language-text\">/__refresh</code> webhook that is able to receive <code class=\"language-text\">POST</code> requests to <em>refresh</em> the sourced content. This exposed webhook can be triggered whenever remote data changes, which means you can update your data without re-launching the development server.</p>\n<p>You can trigger this endpoint locally for example on Unix-based operating systems (like Ubuntu and MacOS) you can use <code class=\"language-text\">curl -X POST http://localhost:8000/__refresh</code>.</p>\n<h2 id=\"additional-environments-staging-test-etc\"><a href=\"#additional-environments-staging-test-etc\" aria-label=\"additional environments staging test etc permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional Environments (Staging, Test, etc)</h2>\n<p>As noted above <code class=\"language-text\">NODE_ENV</code> is a reserved environment variable in Gatsby as it is needed by the build system to make key optimizations when compiling React and other modules. For this reason it is necessary to make use of a secondary environment variable for additional environment support, and manually make the environment variables available to the client-side code.</p>\n<p>You can define your own OS Env Var to track the active environment, and then to locate the relevant Project Env Vars to load. Gatsby itself will not do anything with that OS Env Var, but you can use it in <code class=\"language-text\">gatsby-config.js</code>.\nSpecifically, you can use <code class=\"language-text\">dotenv</code> and your individual OS Env Var to locate the <code class=\"language-text\">.env.myCustomEnvironment</code> file, and then use module.exports to store those Project Env Vars somewhere that the client-side Javascript can access the values (via GraphQL queries).</p>\n<p>For instance. If you would like to add a <code class=\"language-text\">staging</code> environment with a custom Google Analytics Tracking ID, and a dedicated <code class=\"language-text\">apiUrl</code>. You can add <code class=\"language-text\">.env.staging</code> at the root of your project with the following modification to your <code class=\"language-text\">gatsby-config.js</code></p>\n<h3 id=\"example-1\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h3>\n<div class=\"gatsby-code-title\">.env.staging</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GA_TRACKING_ID=&quot;UA-1234567890&quot;\nAPI_URL=&quot;http://foo.bar&quot;</code></pre></div>\n<div class=\"gatsby-code-title\">gatsby-config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> activeEnv <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ACTIVE_ENV</span> <span class=\"token operator\">||</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"development\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Using environment config: '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>activeEnv<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'`</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`.env.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>activeEnv<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  siteMetadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Gatsby Default Starter\"</span><span class=\"token punctuation\">,</span>\n    apiUrl<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_URL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`gatsby-plugin-google-analytics`</span></span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        trackingId<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GA_TRACKING_ID</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Puts tracking script in the head instead of the body</span>\n        head<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Setting this parameter is optional</span>\n        anonymize<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Setting this parameter is also optional</span>\n        respectDNT<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will then load the values from the relevant environment’s <code class=\"language-text\">.env.*</code> file and make them available via GraphQL queries and the analytics plugin respectively.</p>\n<p>Note that <code class=\"language-text\">ACTIVE_ENV</code> could be called anything - it’s not used or known about by anything else in Gatsby (as opposed to <code class=\"language-text\">NODE_ENV</code> which is, as previously discussed).</p>\n<p>Local testing of the <code class=\"language-text\">staging</code> environment can be done with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">ACTIVE_ENV<span class=\"token operator\">=</span>staging <span class=\"token function\">npm</span> run develop</code></pre></div>","excerpt":"Environments and Environment Variables You can provide environment variables to your site to customise its behaviour in different…","timeToRead":6,"fields":{"slug":"/docs/environment-variables/","anchor":"environment-variables"},"frontmatter":{"title":"Environment Variables","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/environment-variables.md"}}},"pageContext":{"slug":"/docs/environment-variables/"}}