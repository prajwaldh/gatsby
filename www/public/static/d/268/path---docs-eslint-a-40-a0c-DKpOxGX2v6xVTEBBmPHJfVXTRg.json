{"data":{"markdownRemark":{"html":"<h2 id=\"why-use-eslint\"><a href=\"#why-use-eslint\" aria-label=\"why use eslint permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why use ESLint</h2>\n<p>Gatsby ships with Prettier, which is a simple, opinionated code <em>formatter</em>. <a href=\"https://eslint.org\">ESLint</a> can be both a <em>linter</em> and <em>formatter</em>, meaning you can use it to check for syntactical errors as well as formatting. Prettier will work for most sites, however if you’d like to add linting capabilities <em>and</em> highly-configurable formatting you should implement ESLint into your Gatsby project.</p>\n<h2 id=\"how-to-use-eslint\"><a href=\"#how-to-use-eslint\" aria-label=\"how to use eslint permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use ESLint</h2>\n<p>Here we will explore an ESLint configuration that acts like Prettier by adhering to <a href=\"https://standardjs.com\">Standard.js</a> rules. ESLint might seem intimidating at first, however it is aimed at providing a number of configurable options to make your code format fit your style. Run the following commands to remove Prettier and install ESLint.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Remove the Prettier package</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">rm</span> prettier\n\n<span class=\"token comment\"># Install ESLint and its packages</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint babel-eslint \\\n  eslint-config-standard eslint-plugin-node \\\n  eslint-plugin-standard eslint-plugin-react \\\n  eslint-plugin-import eslint-plugin-promise</code></pre></div>\n<p>Now that we have our packages installed, remove <code class=\"language-text\">.prettierrc</code> from the root of your new Gatsby project and create a new file named <code class=\"language-text\">.eslintrc.js</code> using the commands below.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Remove the Prettier config file</span>\n<span class=\"token function\">rm</span> .prettierrc\n\n<span class=\"token comment\"># Create a config file for ESLint</span>\n<span class=\"token function\">touch</span> .eslintrc.js</code></pre></div>\n<h3 id=\"configuring-eslint\"><a href=\"#configuring-eslint\" aria-label=\"configuring eslint permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring ESLint</h3>\n<p>We recommend copying our default .eslintrc.js content below to your newly created <code class=\"language-text\">.eslintrc.js</code> file and modifying it per your needs. Reference ESLint’s <a href=\"https://eslint.org/docs/rules/\">rules documentation</a> for more options.</p>\n<div class=\"gatsby-code-title\">.eslintrc.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"standard\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"standard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"no-var\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional, recommended when using es6+</span>\n    <span class=\"token string\">\"no-unused-vars\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// recommended</span>\n    <span class=\"token string\">\"arrow-spacing\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> before<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// recommended</span>\n    indent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"comma-dangle\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        objects<span class=\"token punctuation\">:</span> <span class=\"token string\">\"only-multiline\"</span><span class=\"token punctuation\">,</span>\n        arrays<span class=\"token punctuation\">:</span> <span class=\"token string\">\"only-multiline\"</span><span class=\"token punctuation\">,</span>\n        imports<span class=\"token punctuation\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n        exports<span class=\"token punctuation\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n        functions<span class=\"token punctuation\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// options to emulate prettier setup</span>\n    semi<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"max-len\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"template-curly-spacing\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"arrow-parens\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"as-needed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// standard.js</span>\n    <span class=\"token string\">\"space-before-function-paren\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        named<span class=\"token punctuation\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n        anonymous<span class=\"token punctuation\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n        asyncArrow<span class=\"token punctuation\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// standard plugin - options</span>\n    <span class=\"token string\">\"standard/object-curly-even-spacing\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"either\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"standard/array-bracket-even-spacing\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"either\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"standard/computed-property-even-spacing\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"even\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"standard/no-callback-literal\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// react plugin - options</span>\n    <span class=\"token string\">\"react/jsx-uses-react\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"react/jsx-uses-vars\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  parser<span class=\"token punctuation\">:</span> <span class=\"token string\">\"babel-eslint\"</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional, recommended 6+</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Why use ESLint Gatsby ships with Prettier, which is a simple, opinionated code  formatter .  ESLint  can be both a  linter  and  formatter…","timeToRead":2,"fields":{"slug":"/docs/eslint/","anchor":"eslint"},"frontmatter":{"title":"ESLint","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/eslint.md"}}},"pageContext":{"slug":"/docs/eslint/"}}