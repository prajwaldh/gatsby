{"data":{"markdownRemark":{"html":"<p>Nodes are created by calling the <a href=\"/docs/actions/#createNode\">createNode</a> action. Nodes can be any object.</p>\n<p>A node is stored in redux under the <code class=\"language-text\">nodes</code> namespace, whose state is a map of the node ID to the actual node object.</p>\n<h2 id=\"sourcing-nodes\"><a href=\"#sourcing-nodes\" aria-label=\"sourcing nodes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sourcing Nodes</h2>\n<p>The creation of nodes occurs primarily in the <a href=\"/docs/node-apis/#sourceNodes\">sourceNodes</a> bootstrap phase. Nodes created during this phase are top level nodes. I.e, they have no parent. This is represented by source plugins setting the node’s <code class=\"language-text\">parent</code> field to <code class=\"language-text\">null</code>. Nodes created via transform plugins (who implement <a href=\"/docs/node-apis/#onCreateNode\">onCreateNode</a>) will have source nodes as their parents, or other transformed nodes. For a rough overview of what happens when source nodes run, see the <a href=\"/docs/how-plugins-apis-are-run/#using-traceid-to-await-downstream-api-calls\">traceID illustration</a>.</p>\n<h2 id=\"parentchildrefs\"><a href=\"#parentchildrefs\" aria-label=\"parentchildrefs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parent/Child/Refs</h2>\n<p>There are a few different scenarios for creating parent/child relationships.</p>\n<h3 id=\"node-relationship-storage-model\"><a href=\"#node-relationship-storage-model\" aria-label=\"node relationship storage model permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node relationship storage model</h3>\n<p>All nodes in Gatsby are stored in a flat structure in the redux <code class=\"language-text\">nodes</code> namespace. A node’s <code class=\"language-text\">children</code> field is an array of node IDS, whose nodes are also at the top level of the redux namespace. Here’s an example of the <code class=\"language-text\">nodes</code> namespace.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id1`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`File`</span></span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`id2`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`id3`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id2`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`markdownRemark`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token string\">`id3`</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`postsJson`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other_fields <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An important note here is that we do not store a distinct collection of each type of child. Rather we store a single collection that they’re all packed into. This has some implications on <a href=\"/docs/schema-gql-type/#child-fields-creation\">child field inference</a> in the Schema Generation phase.</p>\n<h3 id=\"explicitly-recording-a-parentchild-relationship\"><a href=\"#explicitly-recording-a-parentchild-relationship\" aria-label=\"explicitly recording a parentchild relationship permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicitly recording a parent/child relationship</h3>\n<p>This occurs when a transformer plugin implements <a href=\"/docs/node-apis/#onCreateNode\">onCreateNode</a> in order to create some child of the originally created node. In this case, the transformer plugin will call <a href=\"/docs/actions/#createParentChildLink\">createParentChildLink</a>, with the original node, and the newly created node. All this does is push the child’s node ID onto the parent’s <code class=\"language-text\">children</code> collection and resave the parent to redux.</p>\n<p>This does <strong>not</strong> automatically create a <code class=\"language-text\">parent</code> field on the child node. If a plugin author wishes to allow child nodes to navigate to their parents in GraphQL queries, they must explicitly set <code class=\"language-text\">childNode.parent: &#39;parent.id&#39;</code> when creating the child node.</p>\n<h3 id=\"foreign-key-reference-___node\"><a href=\"#foreign-key-reference-___node\" aria-label=\"foreign key reference ___node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Foreign Key reference (<code class=\"language-text\">___NODE</code>)</h3>\n<p>We’ve established that child nodes are stored at the top level in redux, and are referenced via ids in their parent’s <code class=\"language-text\">children</code> collection. The same mechanism drives foreign key relationships. Foreign key fields have a <code class=\"language-text\">___NODE</code> suffix on the field name. At query time, Gatsby will take the field’s value as an ID, and search redux for a matching node. This is explained in more detail in <a href=\"/docs/schema-gql-type#foreign-key-reference-___node\">schema gqlTypes</a>.</p>\n<h3 id=\"plain-objects-at-creation-time\"><a href=\"#plain-objects-at-creation-time\" aria-label=\"plain objects at creation time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plain objects at creation time</h3>\n<p>Let’s say you create the following node by passing it to <code class=\"language-text\">createNode</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    car<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The value for <code class=\"language-text\">baz</code> is itself an object. That value’s parent is the top level object. In this case, Gatsby simply saves the top level node as is to redux. It doesn’t attempt to extract <code class=\"language-text\">baz</code> into its own node. It does however track the subobject’s root NodeID using <a href=\"/docs/node-tracking/\">Node Tracking</a></p>\n<p>During schema compilation, Gatsby will infer the sub object’s type while <a href=\"/docs/schema-gql-type#plain-object-or-value-field\">creating the gqlType</a>.</p>\n<h2 id=\"freshstale-nodes\"><a href=\"#freshstale-nodes\" aria-label=\"freshstale nodes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fresh/stale nodes</h2>\n<p>Every time a build is re-run, there is a chance that a node that exists in the redux store no longer exists in the original data source. E.g a file might be deleted from disk between runs. We need a way to indicate that fact to Gatsby.</p>\n<p>To track this, there is a redux <code class=\"language-text\">nodesTouched</code> namespace that tracks whether a particular node ID has been touched. This occurs whenever a node is created (handled by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/redux/reducers/nodes-touched.js\">CREATE_NODE</a>), or an explicit call to <a href=\"/docs/actions/#touchNode\">touchNode</a>.</p>\n<p>When a <code class=\"language-text\">source-nodes</code> plugin runs again, it generally recreates nodes (which automatically touches them too). But in some cases, such as <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/src/gatsby-node.js#L56\">transformer-screenshot</a>, a node might not change, but we still want to keep it around for the build. In these cases, we must explicitly call <code class=\"language-text\">touchNode</code>.</p>\n<p>Any nodes that aren’t touched by the end of the <code class=\"language-text\">source-nodes</code> phase, are deleted. This is performed via a diff between the <code class=\"language-text\">nodesTouched</code> and <code class=\"language-text\">nodes</code> redux namespaces, in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/source-nodes.js\">source-nodes.js</a></p>\n<h2 id=\"changing-a-nodes-fields\"><a href=\"#changing-a-nodes-fields\" aria-label=\"changing a nodes fields permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing a node’s fields</h2>\n<p>From a site developer’s point of view, nodes are immutable. In the sense that if you simply change a node object, those changes will not be seen by other parts of Gatsby. To make a change to a node, it must be persisted to redux via an action.</p>\n<p>So, how do you add a field to an existing node? E.g perhaps in onCreateNode, you want to add a transformer specific field? You can call <a href=\"\">createNodeField</a> and this will simply add your field to the node’s <code class=\"language-text\">node.fields</code> object and then persists it to redux. This can then be referenced by other parts of your plugin at later stages of the build.</p>\n<h2 id=\"node-tracking\"><a href=\"#node-tracking\" aria-label=\"node tracking permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Tracking</h2>\n<p>When a node is created, <code class=\"language-text\">createNode</code> will track all its fields against its nodeId. See <a href=\"/docs/node-tracking/\">Node Tracking Docs</a> for more.</p>","excerpt":"Nodes are created by calling the  createNode  action. Nodes can be any object. A node is stored in redux under the   namespace, whose state…","timeToRead":4,"fields":{"slug":"/docs/node-creation/","anchor":"node-creation"},"frontmatter":{"title":"Node Creation","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/node-creation.md"}}},"pageContext":{"slug":"/docs/node-creation/"}}