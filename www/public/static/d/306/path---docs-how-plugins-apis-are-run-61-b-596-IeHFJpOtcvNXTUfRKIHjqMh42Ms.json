{"data":{"markdownRemark":{"html":"<p>For most sites, plugins take up the majority of the build time. So what’s really happening when APIs are called?</p>\n<p><em>Note: this section only explains how <code class=\"language-text\">gatsby-node</code> plugins are run. Not browser or ssr plugins</em></p>\n<h2 id=\"early-in-the-build\"><a href=\"#early-in-the-build\" aria-label=\"early in the build permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Early in the build</h2>\n<p>Early in the bootstrap phase, we <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/bootstrap/load-plugins/index.js#L40\">load all the configured plugins</a> (and internal plugins) for the site. These are saved into redux under the <code class=\"language-text\">flattenedPlugins</code> namespace. Each plugin in redux contains the following fields:</p>\n<ul>\n<li><strong>resolve</strong>: absolute path to the plugin’s directory</li>\n<li><strong>id</strong>: String concatenation of ‘Plugin ’ and the name of the plugin. E.g <code class=\"language-text\">Plugin query-runner</code></li>\n<li><strong>name</strong>: The name of the plugin. E.g <code class=\"language-text\">query-runner</code></li>\n<li><strong>version</strong>: The version as per the package.json. Or if it is a site plugin, one is generated from the file’s hash</li>\n<li><strong>pluginOptions</strong>: Plugin options as specified in <a href=\"/docs/gatsby-config/\">gatsby-config.js</a></li>\n<li><strong>nodeAPIs</strong>: A list of node APIs that this plugin implements. E.g <code class=\"language-text\">[ &#39;sourceNodes&#39;, ...]</code></li>\n<li><strong>browserAPIs</strong>: List of browser APIs that this plugin implements</li>\n<li><strong>ssrAPIs</strong>: List of SSR APIs that this plugin implements</li>\n</ul>\n<p>In addition, we also create a lookup from api to the plugins that implement it and save this to redux as <code class=\"language-text\">api-to-plugins</code>. This is implemented in <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/bootstrap/load-plugins/validate.js#L106\">load-plugins/validate.js</a></p>\n<h2 id=\"apiruninstance\"><a href=\"#apiruninstance\" aria-label=\"apiruninstance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apiRunInstance</h2>\n<p>Some API calls can take a while to finish. So every time an API is run, we create an object called <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/utils/api-runner-node.js#L179\">apiRunInstance</a> to track it. It contains the following notable fields:</p>\n<ul>\n<li><strong>id</strong>: Unique identifier generated based on type of API</li>\n<li><strong>api</strong>: The API we’re running. E.g <code class=\"language-text\">onCreateNode</code></li>\n<li><strong>args</strong>: Any arguments passed to <code class=\"language-text\">api-runner-node</code>. E.g a node object</li>\n<li><strong>pluginSource</strong>: optional name of the plugin that initiated the original call</li>\n<li><strong>resolve</strong>: promise resolve callback to be called when the API has finished running</li>\n<li><strong>startTime</strong>: time that the API run was started</li>\n<li><strong>span</strong>: opentracing span for tracing builds</li>\n<li><strong>traceId</strong>: optional args.traceId provided if API will result in further API calls (<a href=\"#using-traceid-to-await-downstream-api-calls\">see below</a>)</li>\n</ul>\n<p>We immediately place this object into an <code class=\"language-text\">apisRunningById</code> Map, where we track its execution.</p>\n<h2 id=\"running-each-plugin\"><a href=\"#running-each-plugin\" aria-label=\"running each plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running each plugin</h2>\n<p>Next, we filter all <code class=\"language-text\">flattenedPlugins</code> down to those that implement the API we’re trying to run. For each plugin, we require its <code class=\"language-text\">gatsby-node.js</code> and call its exported API function. E.g if API was <code class=\"language-text\">sourceNodes</code>, it would result in a call to <code class=\"language-text\">gatsbyNode[&#39;sourceNodes&#39;](...apiCallargs)</code>.</p>\n<h2 id=\"injected-arguments\"><a href=\"#injected-arguments\" aria-label=\"injected arguments permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Injected arguments</h2>\n<p>API implementations are passed a variety of useful <a href=\"/docs/actions/\">actions</a> and other interesting functions/objects. These arguments are <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/utils/api-runner-node.js#L94\">created</a> each time a plugin is run for an API, which allows us to rebind actions with default information.</p>\n<p>All actions take 3 arguments:</p>\n<ol>\n<li>The core information required by the action. E.g for <a href=\"/docs/actions/#createNode\">createNode</a>, we must pass a node</li>\n<li>The plugin that is calling this action. E.g <code class=\"language-text\">createNode</code> uses this to assign the owner of the new node</li>\n<li>\n<p>An object with misc action options:</p>\n<ul>\n<li><strong>traceId</strong>: <a href=\"#using-traceid-to-await-downstream-api-calls\">See below</a></li>\n<li><strong>parentSpan</strong>: opentracing span (see <a href=\"/docs/performance-tracing/\">tracing docs</a>)</li>\n</ul>\n</li>\n</ol>\n<p>Passing the plugin and action options on every single action call would be extremely painful for plugin/site authors. Since we know the plugin, traceId and parentSpan when we’re running our API, we can rebind injected actions so these arguments are already provided. This is done in the <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/utils/api-runner-node.js#L14\">doubleBind</a> step.</p>\n<h2 id=\"waiting-for-all-plugins-to-run\"><a href=\"#waiting-for-all-plugins-to-run\" aria-label=\"waiting for all plugins to run permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Waiting for all plugins to run</h2>\n<p>Each plugin is run inside a <a href=\"https://www.npmjs.com/package/map-series\">map-series</a> promise, which allows them to be executed concurrently. Once all plugins have finished running, we remove them from <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/utils/api-runner-node.js#L246\">apisRunningById</a> and fire a <code class=\"language-text\">API_RUNNING_QUEUE_EMPTY</code> event. This in turn, results in any dirty pages being recreated, as well as their queries. Finally, the results are returned.</p>\n<h2 id=\"using-traceid-to-await-downstream-api-calls\"><a href=\"#using-traceid-to-await-downstream-api-calls\" aria-label=\"using traceid to await downstream api calls permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using traceID to await downstream API calls</h2>\n<p>The majority of API calls result in one or more implementing plugins being called. We then wait for them all to complete, and return. But some plugins (e.g <a href=\"/docs/node-apis/#sourceNodes\">sourceNodes</a>) result in calls to actions that themselves call APIs. We need some way of tracing whether an API call originated from another API call, so that we can wait on all child calls to complete. The mechanism for this is the <code class=\"language-text\">traceId</code>.</p>\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: %0 Pages: 1 -->\n<svg width=\"406pt\" height=\"925pt\"\n viewBox=\"0.00 0.00 406.29 924.60\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 920.6)\">\n<title>%0</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-920.6 402.2915,-920.6 402.2915,4 -4,4\"/>\n<!-- initialCall -->\n<g id=\"node1\" class=\"node\">\n<title>initialCall</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"355.9521,-916.5002 147.8229,-916.5002 147.8229,-807.8998 355.9521,-807.8998 355.9521,-916.5002\"/>\n<text text-anchor=\"start\" x=\"155.8552\" y=\"-900\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">apiRunner(`sourceNodes`, {</text>\n<text text-anchor=\"start\" x=\"155.8552\" y=\"-883.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;&#160;traceId: `initial&#45;sourceNodes`,</text>\n<text text-anchor=\"start\" x=\"155.8552\" y=\"-866.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;&#160;waitForCascadingActions: true,</text>\n<text text-anchor=\"start\" x=\"155.8552\" y=\"-849.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;&#160;parentSpan: parentSpan</text>\n<text text-anchor=\"start\" x=\"155.8552\" y=\"-832.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">})</text>\n<text text-anchor=\"middle\" x=\"251.8875\" y=\"-816\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> </text>\n</g>\n<!-- apiRunner1 -->\n<g id=\"node2\" class=\"node\">\n<title>apiRunner1</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"311.3995,-770.8 192.3755,-770.8 192.3755,-734.8 311.3995,-734.8 311.3995,-770.8\"/>\n<text text-anchor=\"middle\" x=\"251.8875\" y=\"-748.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">api&#45;runner&#45;node.js</text>\n</g>\n<!-- initialCall&#45;&gt;apiRunner1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>initialCall&#45;&gt;apiRunner1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M251.8875,-807.8205C251.8875,-798.5734 251.8875,-789.3141 251.8875,-781.0997\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"255.3876,-780.9918 251.8875,-770.9918 248.3876,-780.9919 255.3876,-780.9918\"/>\n</g>\n<!-- sourceNodes -->\n<g id=\"node3\" class=\"node\">\n<title>sourceNodes</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"211.6283,-682 72.1467,-682 72.1467,-646 211.6283,-646 211.6283,-682\"/>\n<text text-anchor=\"middle\" x=\"141.8875\" y=\"-659.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">plugin.SourceNodes()</text>\n</g>\n<!-- apiRunner1&#45;&gt;sourceNodes -->\n<g id=\"edge3\" class=\"edge\">\n<title>apiRunner1&#45;&gt;sourceNodes</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M229.3619,-734.6157C212.9007,-721.327 190.3929,-703.1571 172.3311,-688.5763\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"174.3625,-685.718 164.383,-682.16 169.9655,-691.1648 174.3625,-685.718\"/>\n<text text-anchor=\"middle\" x=\"215.9927\" y=\"-704.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">call</text>\n</g>\n<!-- apisRunning -->\n<g id=\"node5\" class=\"node\">\n<title>apisRunning</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"398.1956,-36 203.5794,-36 203.5794,0 398.1956,0 398.1956,-36\"/>\n<text text-anchor=\"middle\" x=\"300.8875\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">apisRunningByTraceId[traceId]</text>\n</g>\n<!-- apiRunner1&#45;&gt;apisRunning -->\n<g id=\"edge2\" class=\"edge\">\n<title>apiRunner1&#45;&gt;apisRunning</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M269.0253,-734.6564C283.1555,-717.743 300.8875,-691.1163 300.8875,-664 300.8875,-664 300.8875,-664 300.8875,-106.8 300.8875,-86.5006 300.8875,-63.591 300.8875,-46.1264\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"304.3876,-46.0279 300.8875,-36.0279 297.3876,-46.0279 304.3876,-46.0279\"/>\n<text text-anchor=\"middle\" x=\"321.1077\" y=\"-393.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">set to 1</text>\n</g>\n<!-- createNode -->\n<g id=\"node4\" class=\"node\">\n<title>createNode</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"139.1544,-593.2 22.6206,-593.2 22.6206,-557.2 139.1544,-557.2 139.1544,-593.2\"/>\n<text text-anchor=\"middle\" x=\"80.8875\" y=\"-571\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">createNode(node)</text>\n</g>\n<!-- sourceNodes&#45;&gt;createNode -->\n<g id=\"edge4\" class=\"edge\">\n<title>sourceNodes&#45;&gt;createNode</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M98.8308,-645.8831C91.9695,-641.0818 85.7778,-635.1773 81.6377,-628 77.4507,-620.7413 76.158,-611.9347 76.2266,-603.611\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"79.729,-603.6961 76.9261,-593.4787 72.7456,-603.2139 79.729,-603.6961\"/>\n<text text-anchor=\"middle\" x=\"184.5124\" y=\"-615.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">call (traceID passed via doubleBind)</text>\n</g>\n<!-- createNodeReducer -->\n<g id=\"node6\" class=\"node\">\n<title>createNodeReducer</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"161.6627,-504.4 .1123,-504.4 .1123,-468.4 161.6627,-468.4 161.6627,-504.4\"/>\n<text text-anchor=\"middle\" x=\"80.8875\" y=\"-482.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">CREATE_NODE reducer</text>\n</g>\n<!-- createNode&#45;&gt;createNodeReducer -->\n<g id=\"edge5\" class=\"edge\">\n<title>createNode&#45;&gt;createNodeReducer</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M80.8875,-556.8006C80.8875,-544.6949 80.8875,-528.6076 80.8875,-514.8674\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"84.3876,-514.472 80.8875,-504.472 77.3876,-514.4721 84.3876,-514.472\"/>\n<text text-anchor=\"middle\" x=\"158.0415\" y=\"-526.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">triggers (action has traceId)</text>\n</g>\n<!-- CREATE_NODE -->\n<g id=\"node7\" class=\"node\">\n<title>CREATE_NODE</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"156.0174,-415.6 5.7576,-415.6 5.7576,-379.6 156.0174,-379.6 156.0174,-415.6\"/>\n<text text-anchor=\"middle\" x=\"80.8875\" y=\"-393.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">CREATE_NODE event</text>\n</g>\n<!-- createNodeReducer&#45;&gt;CREATE_NODE -->\n<g id=\"edge6\" class=\"edge\">\n<title>createNodeReducer&#45;&gt;CREATE_NODE</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M80.8875,-468.0006C80.8875,-455.8949 80.8875,-439.8076 80.8875,-426.0674\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"84.3876,-425.672 80.8875,-415.672 77.3876,-425.6721 84.3876,-425.672\"/>\n<text text-anchor=\"middle\" x=\"149.8809\" y=\"-437.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">emits (event has traceId)</text>\n</g>\n<!-- pluginRunner -->\n<g id=\"node8\" class=\"node\">\n<title>pluginRunner</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"136.7005,-326.8 31.0745,-326.8 31.0745,-290.8 136.7005,-290.8 136.7005,-326.8\"/>\n<text text-anchor=\"middle\" x=\"83.8875\" y=\"-304.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">plugin&#45;runner.js</text>\n</g>\n<!-- CREATE_NODE&#45;&gt;pluginRunner -->\n<g id=\"edge7\" class=\"edge\">\n<title>CREATE_NODE&#45;&gt;pluginRunner</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M81.5091,-379.2006C81.9181,-367.0949 82.4616,-351.0076 82.9258,-337.2674\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"86.4372,-336.9845 83.277,-326.872 79.4412,-336.7481 86.4372,-336.9845\"/>\n<text text-anchor=\"middle\" x=\"167.6253\" y=\"-349\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">handled by (event has traceId)</text>\n</g>\n<!-- apiRunnerOnCreateNode -->\n<g id=\"node10\" class=\"node\">\n<title>apiRunnerOnCreateNode</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"187.2577,-253.8 4.5173,-253.8 4.5173,-161.8 187.2577,-161.8 187.2577,-253.8\"/>\n<text text-anchor=\"start\" x=\"12.4524\" y=\"-237.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">apiRunner(`onCreateNode`, {</text>\n<text text-anchor=\"start\" x=\"12.4524\" y=\"-220.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;&#160;node,</text>\n<text text-anchor=\"start\" x=\"12.4524\" y=\"-203.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> &#160;&#160;&#160;traceId: action.traceId</text>\n<text text-anchor=\"start\" x=\"12.4524\" y=\"-186.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">})</text>\n<text text-anchor=\"middle\" x=\"95.8875\" y=\"-170\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\"> </text>\n</g>\n<!-- pluginRunner&#45;&gt;apiRunnerOnCreateNode -->\n<g id=\"edge8\" class=\"edge\">\n<title>pluginRunner&#45;&gt;apiRunnerOnCreateNode</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M86.0329,-290.7432C86.9435,-283.0788 88.0595,-273.6854 89.2092,-264.0087\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"92.708,-264.2259 90.4123,-253.8827 85.7569,-263.3999 92.708,-264.2259\"/>\n</g>\n<!-- onCreateNode -->\n<g id=\"node9\" class=\"node\">\n<title>onCreateNode</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"185.8434,-36 39.9316,-36 39.9316,0 185.8434,0 185.8434,-36\"/>\n<text text-anchor=\"middle\" x=\"112.8875\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">plugin.onCreateNode()</text>\n</g>\n<!-- apiRunner2 -->\n<g id=\"node11\" class=\"node\">\n<title>apiRunner2</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"172.3995,-124.8 53.3755,-124.8 53.3755,-88.8 172.3995,-88.8 172.3995,-124.8\"/>\n<text text-anchor=\"middle\" x=\"112.8875\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">api&#45;runner&#45;node.js</text>\n</g>\n<!-- apiRunnerOnCreateNode&#45;&gt;apiRunner2 -->\n<g id=\"edge9\" class=\"edge\">\n<title>apiRunnerOnCreateNode&#45;&gt;apiRunner2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M103.6413,-161.7334C105.1513,-152.762 106.693,-143.6026 108.0737,-135.3994\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"111.5715,-135.7048 109.7799,-125.2625 104.6686,-134.5429 111.5715,-135.7048\"/>\n</g>\n<!-- apiRunner2&#45;&gt;apisRunning -->\n<g id=\"edge11\" class=\"edge\">\n<title>apiRunner2&#45;&gt;apisRunning</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M151.3858,-88.6157C181.0113,-74.6224 222.096,-55.2164 253.7004,-40.2884\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"255.2152,-43.4438 262.7624,-36.008 252.2255,-37.1143 255.2152,-43.4438\"/>\n<text text-anchor=\"middle\" x=\"250.8756\" y=\"-58.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">increment</text>\n</g>\n<!-- apiRunner2&#45;&gt;onCreateNode -->\n<g id=\"edge10\" class=\"edge\">\n<title>apiRunner2&#45;&gt;onCreateNode</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M112.8875,-88.4006C112.8875,-76.2949 112.8875,-60.2076 112.8875,-46.4674\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.3876,-46.072 112.8875,-36.072 109.3876,-46.0721 116.3876,-46.072\"/>\n<text text-anchor=\"middle\" x=\"122.9927\" y=\"-58.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">call</text>\n</g>\n</g>\n</svg>\n\n<ol>\n<li>\n<p>The traceID is passed as an argument to the original API runner. E.g</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">apiRunner</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`sourceNodes`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  traceId<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`initial-sourceNodes`</span></span><span class=\"token punctuation\">,</span>\n  waitForCascadingActions<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  parentSpan<span class=\"token punctuation\">:</span> parentSpan<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>We keep track of the number of API calls with this traceId in the <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/utils/api-runner-node.js#L139\">apisRunningByTraceId</a> Map. On this first invocation, it will be set to <code class=\"language-text\">1</code>.</p>\n</li>\n<li>\n<p>Using the action rebinding mentioned <a href=\"#injected-arguments\">above</a>, the traceId is passed through to all action calls via the <code class=\"language-text\">actionOptions</code> object.</p>\n</li>\n<li>\n<p>After reducing the Action, a global event is <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/redux/index.js#L93\">emitted</a> which includes the action information</p>\n</li>\n<li>\n<p>For the <code class=\"language-text\">CREATE_NODE</code> and <code class=\"language-text\">CREATE_PAGE</code> events, we need to call the <code class=\"language-text\">onCreateNode</code> and <code class=\"language-text\">onCreatePage</code> APIs respectively. The <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/redux/plugin-runner.js\">plugin-runner</a> takes care of this. It also passes on the traceId from the Action back into the API call.</p>\n</li>\n<li>\n<p>We’re back in <code class=\"language-text\">api-runner-node.js</code> and can tie this new API call back to its original. So we increment the value of <a href=\"https://github.com/gatsbyjs/gatsby/blob/8029c6647ab38792bb0a7c135ab4b98ae70a2627/packages/gatsby/src/utils/api-runner-node.js#L218\">apisRunningByTraceId</a> for this traceId.</p>\n</li>\n<li>\n<p>Now, whenever an API finishes running (when all its implementing plugins have finished), we decrement <code class=\"language-text\">apisRunningByTraceId[traceId]</code>. If the original API call included the <code class=\"language-text\">waitForCascadingActions</code> option, then we wait until <code class=\"language-text\">apisRunningByTraceId[traceId]</code> == 0 before resolving.</p>\n</li>\n</ol>","excerpt":"For most sites, plugins take up the majority of the build time. So what’s really happening when APIs are called? Note: this section only…","timeToRead":7,"fields":{"slug":"/docs/how-plugins-apis-are-run/","anchor":"how-plugins-apis-are-run"},"frontmatter":{"title":"How APIs/Plugins Are Run","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/how-plugins-apis-are-run.md"}}},"pageContext":{"slug":"/docs/how-plugins-apis-are-run/"}}