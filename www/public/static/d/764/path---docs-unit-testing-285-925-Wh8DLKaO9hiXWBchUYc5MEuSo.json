{"data":{"markdownRemark":{"html":"<p>Unit testing is a great way to protect against errors in your code before you\ndeploy it. While Gatsby does not include support for unit testing out of the\nbox, it only takes a few steps to get up and running. However there are a few\nfeatures of the Gatsby build process that mean the standard Jest setup doesn’t\nquite work. This guide shows you how to set it up.</p>\n<h2 id=\"setting-up-your-environment\"><a href=\"#setting-up-your-environment\" aria-label=\"setting up your environment permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up your environment</h2>\n<p>The most popular testing framework for React is <a href=\"https://jestjs.io/\">Jest</a>,\nwhich was created by Facebook. While Jest is a general purpose JavaScript unit\ntesting framework, it has lots of features that make it work particularly well\nwith React.</p>\n<p><em>Note: For this guide, you will be starting with <code class=\"language-text\">gatsby-starter-default</code>, but the\nconcepts should be the same or very similar for your site.</em></p>\n<h3 id=\"1-installing-dependencies\"><a href=\"#1-installing-dependencies\" aria-label=\"1 installing dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Installing dependencies</h3>\n<p>First you need to install Jest and some more required packages. We install babel-jest and babel-preset-gatsby to ensure that the babel preset(s) that are used match what are used internally for your Gatsby site.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev jest babel-jest react-test-renderer babel-preset-gatsby identity-obj-proxy</code></pre></div>\n<h3 id=\"2-creating-a-configuration-file-for-jest\"><a href=\"#2-creating-a-configuration-file-for-jest\" aria-label=\"2 creating a configuration file for jest permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Creating a configuration file for Jest</h3>\n<p>Because Gatsby handles its own Babel configuration, you will need to manually\ntell Jest to use <code class=\"language-text\">babel-jest</code>. The easiest way to do this is to add a <code class=\"language-text\">jest.config.js</code>. You can set up some useful defaults at the same time:</p>\n<div class=\"gatsby-code-title\">jest.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transform<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"^.+\\\\.jsx?$\"</span><span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;rootDir>/jest-preprocess.js`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  moduleNameMapper<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\".+\\\\.(css|styl|less|sass|scss)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`identity-obj-proxy`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".+\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;rootDir>/__mocks__/file-mock.js`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  testPathIgnorePatterns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`node_modules`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`.cache`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  transformIgnorePatterns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`node_modules/(?!(gatsby)/)`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  globals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    __PATH_PREFIX__<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">``</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  testURL<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`http://localhost`</span></span><span class=\"token punctuation\">,</span>\n  setupFiles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`&lt;rootDir>/loadershim.js`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s go over the content of this configuration file:</p>\n<ul>\n<li>The <code class=\"language-text\">transform</code> section tells Jest that all <code class=\"language-text\">js</code> or <code class=\"language-text\">jsx</code> files need to be\ntransformed using a <code class=\"language-text\">jest-preprocess.js</code> file in the project root. Go ahead and\ncreate this file now. This is where you set up your Babel config. You can start\nwith the following minimal config:</li>\n</ul>\n<div class=\"gatsby-code-title\">jest-preprocess.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> babelOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"babel-preset-gatsby\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-jest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTransformer</span><span class=\"token punctuation\">(</span>babelOptions<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>The next option is <code class=\"language-text\">moduleNameMapper</code>. This\nsection works a bit like webpack rules, and tells Jest how to handle imports.\nYou are mainly concerned here with mocking static file imports, which Jest can’t\nhandle. A mock is a dummy module that is used instead of the real module inside\ntests. It is good when you have something that you can’t or don’t want to test.\nYou can mock anything, and here you are mocking assets rather than code. For\nstylesheets you need to use the package <code class=\"language-text\">identity-obj-proxy</code>. For all other assets\nyou need to use a manual mock called <code class=\"language-text\">file-mock.js</code>. You need to create this yourself.\nThe convention is to create a directory called <code class=\"language-text\">__mocks__</code> in the root directory\nfor this. Note the pair of double underscores in the name.</li>\n</ul>\n<div class=\"gatsby-code-title\">__mocks__/file-mock.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">\"test-file-stub\"</span></code></pre></div>\n<ul>\n<li>\n<p>The next config setting is <code class=\"language-text\">testPathIgnorePatterns</code>. You are telling Jest to ignore\nany tests in the <code class=\"language-text\">node_modules</code> or <code class=\"language-text\">.cache</code> directories.</p>\n</li>\n<li>\n<p>The next option is very important, and is different from what you’ll find in other\nJest guides. The reason that you need <code class=\"language-text\">transformIgnorePatterns</code> is because Gatsby\nincludes un-transpiled ES6 code. By default Jest doesn’t try to transform code\ninside <code class=\"language-text\">node_modules</code>, so you will get an error like this:</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/my-app/node_modules/gatsby/cache-dir/gatsby-browser-entry.js:1\n({&quot;Object.&lt;anonymous&gt;&quot;:function(module,exports,require,__dirname,__filename,global,jest){import React from &quot;react&quot;\n                                                                                            ^^^^^^\nSyntaxError: Unexpected token import</code></pre></div>\n<p>This is because <code class=\"language-text\">gatsby-browser-entry.js</code> isn’t being transpiled before running\nin Jest. You can fix this by changing the default <code class=\"language-text\">transformIgnorePatterns</code> to\nexclude the <code class=\"language-text\">gatsby</code> module.</p>\n<ul>\n<li>\n<p>The <code class=\"language-text\">globals</code> section sets <code class=\"language-text\">__PATH_PREFIX__</code>, which is usually set by Gatsby,\nand which some components need.</p>\n</li>\n<li>\n<p>You need to set <code class=\"language-text\">testURL</code> to a valid URL, because some DOM APIs such as\n<code class=\"language-text\">localStorage</code> are unhappy with the default (<code class=\"language-text\">about:blank</code>).</p>\n</li>\n</ul>\n<blockquote>\n<p>Note: if you’re using Jest 23.5.0 or later, <code class=\"language-text\">testURL</code> will default to <code class=\"language-text\">http://localhost</code> so you can skip this setting.</p>\n</blockquote>\n<ul>\n<li>There’s one more global that you need to set, but as it’s a function you can’t\nset it here in the JSON. The <code class=\"language-text\">setupFiles</code> array lets you list files that will be\nincluded before all tests are run, so it’s perfect for this.</li>\n</ul>\n<div class=\"gatsby-code-title\">loadershim.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">global<span class=\"token punctuation\">.</span>___loader <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  enqueue<span class=\"token punctuation\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-useful-mocks-to-complete-your-testing-environment\"><a href=\"#3-useful-mocks-to-complete-your-testing-environment\" aria-label=\"3 useful mocks to complete your testing environment permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Useful mocks to complete your testing environment</h3>\n<h4 id=\"mocking-gatsby\"><a href=\"#mocking-gatsby\" aria-label=\"mocking gatsby permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocking <code class=\"language-text\">gatsby</code></h4>\n<p>Finally it’s a good idea to mock the <code class=\"language-text\">gatsby</code> module itself. This may not be\nneeded at first, but will make things a lot easier if you want to test\ncomponents that use <code class=\"language-text\">Link</code> or GraphQL.</p>\n<div class=\"gatsby-code-title\">__mocks__/gatsby.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> gatsby <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">requireActual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gatsby\"</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>gatsby<span class=\"token punctuation\">,</span>\n  graphql<span class=\"token punctuation\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Link<span class=\"token punctuation\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> to<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span>\n      href<span class=\"token punctuation\">:</span> to<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  StaticQuery<span class=\"token punctuation\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This mocks the <code class=\"language-text\">graphql()</code> function, <code class=\"language-text\">Link</code> component, and <code class=\"language-text\">StaticQuery</code> component.</p>\n<h2 id=\"writing-tests\"><a href=\"#writing-tests\" aria-label=\"writing tests permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing tests</h2>\n<p>A full guide to unit testing is beyond the scope of this guide, but you can\nstart with a simple snapshot test to check that everything is working.</p>\n<p>First, create the test file. You can either put these in a <code class=\"language-text\">__tests__</code>\ndirectory, or put them elsewhere (usually next to the component itself), with\nthe extension <code class=\"language-text\">.spec.js</code> or <code class=\"language-text\">.test.js</code>. The decision comes down to your own\npreference. In this guide, we will use the <code class=\"language-text\">__tests__</code> folder convention. Let’s create a test for our header component, so create a <code class=\"language-text\">header.js</code> file in <code class=\"language-text\">src/components/__tests__/</code>:</p>\n<div class=\"gatsby-code-title\">src/components/__tests__/header.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span>\n\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">\"../header\"</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header siteTitle<span class=\"token operator\">=</span><span class=\"token string\">\"Default Starter\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is a very simple snapshot test, which uses <code class=\"language-text\">react-test-renderer</code> to render\nthe component, and then generates a snapshot of it on first run. It then\ncompares future snapshots against this, which means you can quickly check for\nregressions. Visit <a href=\"https://jestjs.io/docs/en/getting-started\">the Jest docs</a> to\nlearn more about other tests that you can write.</p>\n<h2 id=\"running-tests\"><a href=\"#running-tests\" aria-label=\"running tests permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running tests</h2>\n<p>If you look inside <code class=\"language-text\">package.json</code> you will probably find that there is already a\nscript for <code class=\"language-text\">test</code>, which just outputs an error message. Change this to use the\n<code class=\"language-text\">jest</code> executable that we now have available, like so:</p>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This means you can now run tests by typing <code class=\"language-text\">npm test</code>. If you want you could\nalso run with a flag that triggers watch mode to watch files and run tests when they are changed: <code class=\"language-text\">npm test -- --watch</code>.</p>\n<p>Run the tests again now and it should all work! You may get a message about\nthe snapshot being written. This is created in a <code class=\"language-text\">__snapshots__</code> directory next\nto your tests. If you take a look at it, you will see that it is a JSON\nrepresentation of the <code class=\"language-text\">&lt;Header /&gt;</code> component. You should check your snapshot files\ninto a source control system (for example, a GitHub repo) so that so that any changes are tracked in history.\nThis is particularly important to remember if you are using a continuous\nintegration system such as Travis or CircleCI to run tests, as these will fail if the snapshot is not checked into source control.</p>\n<p>If you make changes that mean you need to update the snapshot, you can do this\nby running <code class=\"language-text\">npm test -- -u</code>.</p>\n<h2 id=\"using-typescript\"><a href=\"#using-typescript\" aria-label=\"using typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using TypeScript</h2>\n<p>If you are using TypeScript, you need to make a couple of small changes to your\nconfig. First install <code class=\"language-text\">ts-jest</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev ts-jest</code></pre></div>\n<p>Then update the configuration in <code class=\"language-text\">jest.config.js</code>, like so:</p>\n<div class=\"gatsby-code-title\">jest.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transform<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"^.+\\\\.tsx?$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ts-jest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"^.+\\\\.jsx?$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;rootDir>/jest-preprocess.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  testRegex<span class=\"token punctuation\">:</span> <span class=\"token string\">\"(/__tests__/.*\\\\.([tj]sx?)|(\\\\.|/)(test|spec))\\\\.([tj]sx?)$\"</span><span class=\"token punctuation\">,</span>\n  moduleNameMapper<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\".+\\\\.(css|styl|less|sass|scss)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"identity-obj-proxy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".+\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token string\">\"&lt;rootDir>/__mocks__/file-mock.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  moduleFileExtensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  testPathIgnorePatterns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".cache\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  transformIgnorePatterns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules/(?!(gatsby)/)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  globals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    __PATH_PREFIX__<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  testURL<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost\"</span><span class=\"token punctuation\">,</span>\n  setupFiles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;rootDir>/loadershim.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You may notice that two other options, <code class=\"language-text\">testRegex</code> and <code class=\"language-text\">moduleFileExtensions</code>,\nhave been added. Option <code class=\"language-text\">testRegex</code> is the pattern telling Jest which files\ncontain tests. The pattern above matches any <code class=\"language-text\">.js</code>, <code class=\"language-text\">.jsx</code>, <code class=\"language-text\">.ts</code> or <code class=\"language-text\">.tsx</code>\nfile inside a <code class=\"language-text\">__tests__</code> directory, or any file elsewhere with the extension\n<code class=\"language-text\">.test.js</code>, <code class=\"language-text\">.test.jsx</code>, <code class=\"language-text\">.test.ts</code>, <code class=\"language-text\">.test.tsx</code>, or <code class=\"language-text\">.spec.js</code>, <code class=\"language-text\">.spec.jsx</code>,\n<code class=\"language-text\">.spec.ts</code>, <code class=\"language-text\">.spec.tsx</code>.</p>\n<p>Option <code class=\"language-text\">moduleFileExtensions</code> is needed when working with TypeScript.\nThe only thing it is doing is telling Jest which file extensions you can\nimport in your files without making precise the file extension. By default,\nit works with <code class=\"language-text\">js</code>, <code class=\"language-text\">json</code>, <code class=\"language-text\">jsx</code>, <code class=\"language-text\">node</code> file extensions so we just need\nto add <code class=\"language-text\">ts</code> and <code class=\"language-text\">tsx</code>. You can read more about it in <a href=\"https://jestjs.io/docs/en/configuration.html#modulefileextensions-array-string\">Jest’s documentation</a>.</p>\n<h2 id=\"other-resources\"><a href=\"#other-resources\" aria-label=\"other resources permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other resources</h2>\n<p>If you need to make changes to your Babel config, you can edit the config in\n<code class=\"language-text\">jest-preprocess.js</code>. You may need to enable some of the plugins used by Gatsby,\nthough remember you may need to install the Babel 7 versions. See\n<a href=\"/docs/babel\">the Gatsby Babel config guide</a> for some examples.</p>\n<p>For more information on Jest testing, visit\n<a href=\"https://jestjs.io/docs/en/getting-started\">the Jest site</a>.</p>\n<p>For an example encapsulating all of these techniques—and a full unit test suite with <a href=\"https://github.com/kentcdodds/react-testing-library\">react-testing-library</a>, check out the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/using-jest\">using-jest</a> example.</p>","excerpt":"Unit testing is a great way to protect against errors in your code before you\ndeploy it. While Gatsby does not include support for unit…","timeToRead":8,"fields":{"slug":"/docs/unit-testing/","anchor":"unit-testing"},"frontmatter":{"title":"Unit testing","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/unit-testing.md"}}},"pageContext":{"slug":"/docs/unit-testing/"}}