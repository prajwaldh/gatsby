{"data":{"markdownRemark":{"html":"<h1 id=\"gatsby-source-wordpress\"><a href=\"#gatsby-source-wordpress\" aria-label=\"gatsby source wordpress permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-source-wordpress</h1>\n<p>Source plugin for pulling data into <a href=\"https://github.com/gatsbyjs\">Gatsby</a> from\nWordPress sites using the\n<a href=\"https://developer.wordpress.org/rest-api/reference/\">WordPress REST API</a>.</p>\n<p>An example site for this plugin is available.</p>\n<ul>\n<li><a href=\"https://using-wordpress.gatsbyjs.org/\">Demo</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/using-wordpress\">Example site source code</a></li>\n</ul>\n<h2 id=\"features\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h2>\n<ul>\n<li>Pulls data from self-hosted WordPress sites, or sites hosted on <a href=\"https://wordpress.com\">WordPress.com</a></li>\n<li>Should work with any number of posts (tested on a site with 900 posts)</li>\n<li>Can authenticate to wordpress.com’s API using OAuth 2 so media can be queried</li>\n<li>Easily create responsive images in Gatsby from WordPress images. See <a href=\"#image-processing\">image\nprocessing</a> section.</li>\n</ul>\n<h2 id=\"wordpress-and-custom-entities\"><a href=\"#wordpress-and-custom-entities\" aria-label=\"wordpress and custom entities permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WordPress and custom entities</h2>\n<p>This module currently pulls the following entities from WordPress:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> All entities are supported (posts, pages, tags, categories, media, types,\nusers, statuses, taxonomies, site metadata, …)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Any new entity should be pulled as long as the IDs are correct.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <a href=\"https://www.advancedcustomfields.com/\">ACF Entities (Advanced Custom Fields)</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Custom post types (any type you could have declared using WordPress’\n<code class=\"language-text\">functions.php</code>)</li>\n</ul>\n<p>We welcome PRs adding support for data from other plugins.</p>\n<h2 id=\"install\"><a href=\"#install\" aria-label=\"install permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install</h2>\n<p><code class=\"language-text\">npm install --save gatsby-source-wordpress</code></p>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" aria-label=\"how to use permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use</h2>\n<p>First, you need a way to pass environment variables to the build process, so secrets and other secured data aren’t committed to source control. We recommend using <a href=\"https://github.com/motdotla/dotenv\"><code class=\"language-text\">dotenv</code></a> which will then expose environment variables. <a href=\"https://www.gatsbyjs.org/docs/environment-variables\">Read more about dotenv and using environment variables here</a>. Then we can <em>use</em> these environment variables and configure our plugin.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// In your gatsby-config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">/*\n     * Gatsby's data processing layer begins with “source”\n     * plugins. Here the site sources its data from Wordpress.\n     */</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gatsby-source-wordpress\"</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*\n         * The base URL of the Wordpress site without the trailingslash and the protocol. This is required.\n         * Example : 'gatsbyjsexamplewordpress.wordpress.com' or 'www.example-site.com'\n         */</span>\n        baseUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gatsbyjsexamplewordpress.wordpress.com\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The protocol. This can be http or https.</span>\n        protocol<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Indicates whether the site is hosted on wordpress.com.</span>\n        <span class=\"token comment\">// If false, then the assumption is made that the site is self hosted.</span>\n        <span class=\"token comment\">// If true, then the plugin will source its content on wordpress.com using the JSON REST API V2.</span>\n        <span class=\"token comment\">// If your site is hosted on wordpress.org, then set this to false.</span>\n        hostingWPCOM<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// If useACF is true, then the source plugin will try to import the Wordpress ACF Plugin contents.</span>\n        <span class=\"token comment\">// This feature is untested for sites hosted on wordpress.com.</span>\n        <span class=\"token comment\">// Defaults to true.</span>\n        useACF<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Include specific ACF Option Pages that have a set post ID</span>\n        <span class=\"token comment\">// Regardless if an ID is set, the default options route will still be retrieved</span>\n        <span class=\"token comment\">// Must be using V3 of ACF to REST to include these routes</span>\n        <span class=\"token comment\">// Example: `[\"option_page_1\", \"option_page_2\"]` will include the proper ACF option</span>\n        <span class=\"token comment\">// routes with the ID option_page_1 and option_page_2</span>\n        <span class=\"token comment\">// Dashes in IDs will be converted to underscores for use in GraphQL</span>\n        acfOptionPageIds<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        auth<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// If auth.user and auth.pass are filled, then the source plugin will be allowed</span>\n          <span class=\"token comment\">// to access endpoints that are protected with .htaccess.</span>\n          htaccess_user<span class=\"token punctuation\">:</span> <span class=\"token string\">\"your-htaccess-username\"</span><span class=\"token punctuation\">,</span>\n          htaccess_pass<span class=\"token punctuation\">:</span> <span class=\"token string\">\"your-htaccess-password\"</span><span class=\"token punctuation\">,</span>\n          htaccess_sendImmediately<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n          <span class=\"token comment\">// If hostingWPCOM is true then you will need to communicate with wordpress.com API</span>\n          <span class=\"token comment\">// in order to do that you need to create an app (of type Web) at https://developer.wordpress.com/apps/</span>\n          <span class=\"token comment\">// then add your clientId, clientSecret, username, and password here</span>\n          <span class=\"token comment\">// Learn about environment variables: https://www.gatsbyjs.org/docs/environment-variables</span>\n          <span class=\"token comment\">// If two-factor authentication is enabled then you need to create an Application-Specific Password,</span>\n          <span class=\"token comment\">// see https://en.support.wordpress.com/security/two-step-authentication/#application-specific-passwords</span>\n          wpcom_app_clientSecret<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WORDPRESS_CLIENT_SECRET</span><span class=\"token punctuation\">,</span>\n          wpcom_app_clientId<span class=\"token punctuation\">:</span> <span class=\"token string\">\"54793\"</span><span class=\"token punctuation\">,</span>\n          wpcom_user<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gatsbyjswpexample@gmail.com\"</span><span class=\"token punctuation\">,</span>\n          wpcom_pass<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WORDPRESS_PASSWORD</span><span class=\"token punctuation\">,</span>\n\n          <span class=\"token comment\">// If you use \"JWT Authentication for WP REST API\" (https://wordpress.org/plugins/jwt-authentication-for-wp-rest-api/)</span>\n          <span class=\"token comment\">// or (https://github.com/jonathan-dejong/simple-jwt-authentication) requires jwt_base_path, path can be found in wordpress wp-api.</span>\n          <span class=\"token comment\">// plugin, you can specify user and password to obtain access token and use authenticated requests against wordpress REST API.</span>\n          jwt_user<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_USER</span><span class=\"token punctuation\">,</span>\n          jwt_pass<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_PASSWORD</span><span class=\"token punctuation\">,</span>\n          jwt_base_path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/jwt-auth/v1/token\"</span> # Default <span class=\"token operator\">-</span> can skip <span class=\"token keyword\">if</span> you are using https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>wordpress<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>plugins<span class=\"token operator\">/</span>jwt<span class=\"token operator\">-</span>authentication<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">-</span>wp<span class=\"token operator\">-</span>rest<span class=\"token operator\">-</span>api<span class=\"token operator\">/</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Set verboseOutput to true to display a verbose output on `npm run develop` or `npm run build`</span>\n        <span class=\"token comment\">// It can help you debug specific API Endpoints problems.</span>\n        verboseOutput<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Set how many pages are retrieved per API request.</span>\n        perPage<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Search and Replace Urls across WordPress content.</span>\n        searchAndReplaceContentUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          sourceUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://source-url.com\"</span><span class=\"token punctuation\">,</span>\n          replacementUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://replacement-url.com\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Set how many simultaneous requests are sent at once.</span>\n        concurrentRequests<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Set WP REST API routes whitelists</span>\n        <span class=\"token comment\">// and blacklists using glob patterns.</span>\n        <span class=\"token comment\">// Defaults to whitelist the routes shown</span>\n        <span class=\"token comment\">// in the example below.</span>\n        <span class=\"token comment\">// See: https://github.com/isaacs/minimatch</span>\n        <span class=\"token comment\">// Example:  `[\"/*/*/comments\", \"/yoast/**\"]`</span>\n        <span class=\"token comment\">// ` will either include or exclude routes ending in `comments` and</span>\n        <span class=\"token comment\">// all routes that begin with `yoast` from fetch.</span>\n        <span class=\"token comment\">// Whitelisted routes using glob patterns</span>\n        includedRoutes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"**/*/*/categories\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"**/*/*/posts\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"**/*/*/pages\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"**/*/*/media\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"**/*/*/tags\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"**/*/*/taxonomies\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"**/*/*/users\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Blacklisted routes using glob patterns</span>\n        excludedRoutes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*/*/posts/1456\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// use a custom normalizer which is applied after the built-in ones.</span>\n        normalizer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> entities <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> entities\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"wordpress-plugins\"><a href=\"#wordpress-plugins\" aria-label=\"wordpress plugins permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WordPress Plugins</h2>\n<p>These plugins were tested. We welcome PRs adding support for data from other\nplugins.</p>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Custom Post Types : it will work seamlessly, no further option needs to be\nactivated. (“Show in REST API” setting needs to be set to true on the\ncustom post in the plugin settings for this to work. It’s set to “false”\nby default.)</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> <a href=\"https://www.advancedcustomfields.com/\">ACF</a> The option <code class=\"language-text\">useACF: true</code>\nmust be activated in your site’s <code class=\"language-text\">gatsby-config.js</code>.</p>\n<ul>\n<li>You must have the plugin\n<a href=\"https://github.com/airesvsg/acf-to-rest-api\">acf-to-rest-api</a> installed in\nWordPress.</li>\n<li>Will pull the <code class=\"language-text\">acf: { ... }</code> fields’s contents from any entity which has it\nattached (pages, posts, medias, … you choose from in WordPress backend\nwhile creating a Group of Fields).</li>\n<li><a href=\"https://www.advancedcustomfields.com/pro/\">ACF Pro</a> same as ACF :</li>\n<li>Will work with\n<a href=\"https://www.advancedcustomfields.com/resources/flexible-content/\">Flexible content</a>\nand premium stuff like that (repeater, gallery, …).</li>\n<li>Will pull the content attached to the\n<a href=\"https://www.advancedcustomfields.com/add-ons/options-page/\">options page</a>.</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> <a href=\"https://wordpress.org/plugins/wp-api-menus/\">WP-API-MENUS</a> which gives\nyou the menus and menu locations endpoint.</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> <a href=\"https://github.com/shawnhooper/wpml-rest-api\">WPML-REST-API</a> which adds\nthe current locale and available translations to all post types translated with WPML.</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> <a href=\"https://github.com/maru3l/wp-rest-polylang\">wp-rest-polylang</a> which adds\nthe current locale and available translations to all post types translated with Polylang.</p>\n</li>\n</ul>\n<h2 id=\"how-to-use-gatsby-with-wordpresscom-hosting\"><a href=\"#how-to-use-gatsby-with-wordpresscom-hosting\" aria-label=\"how to use gatsby with wordpresscom hosting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use Gatsby with Wordpress.com hosting</h2>\n<p>Set <code class=\"language-text\">hostingWPCOM: true</code>.</p>\n<p>You will need to provide an <a href=\"https://en.support.wordpress.com/api-keys/\">API Key</a>.</p>\n<p>Note : you don’t need this for Wordpress.org hosting in which your WordPress\nwill behave like a self-hosted instance.</p>\n<h2 id=\"test-your-wordpress-api\"><a href=\"#test-your-wordpress-api\" aria-label=\"test your wordpress api permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test your WordPress API</h2>\n<p>Before you run your first query, ensure the WordPress JSON API is working correctly by visiting /wp-json at your WordPress install. The result should be similar to the <a href=\"https://demo.wp-api.org/wp-json/\">WordPress demo API</a>.</p>\n<p>If you see a page on your site, rather than the JSON output, check if your permalink settings are set to “Plain”. After changing this to any of the other settings, the JSON API should be accessible.</p>\n<h2 id=\"fetching-data-wordpress-rest-api-route-selection\"><a href=\"#fetching-data-wordpress-rest-api-route-selection\" aria-label=\"fetching data wordpress rest api route selection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetching Data: WordPress REST API Route Selection</h2>\n<p>By default <code class=\"language-text\">gatsby-source-wordpress</code> plugin will fetch data from all endpoints provided by introspection <code class=\"language-text\">/wp-json</code> response. To customize the routes fetched, two configuration options are available: <code class=\"language-text\">includeRoutes</code> for whitelisting and <code class=\"language-text\">excludeRoutes</code> for blacklisting. Both options expect an array of glob patterns. Glob matching is done by <a href=\"https://github.com/isaacs/minimatch\">minimatch</a>. To test your glob patterns, <a href=\"http://pthrasher.github.io/minimatch-test/\">use this tool</a>. You can inspect discovered routes by using <code class=\"language-text\">verboseOutput: true</code> configuration option.</p>\n<p>If an endpoint is whitelisted and not blacklisted, it will be fetched. Otherwise, it will be ignored.</p>\n<h3 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">includedRoutes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"**/*/*/posts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"**/*/*/pages\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"**/*/*/media\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"**/*/*/categories\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"**/*/*/tags\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"**/*/*/taxonomies\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"**/*/*/users\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Which would include most commonly used endpoints:</p>\n<ul>\n<li>Posts</li>\n<li>Pages</li>\n<li>Media</li>\n<li>Categories</li>\n<li>Tags</li>\n<li>Taxonomies</li>\n<li>Users</li>\n</ul>\n<p>and would skip pulling Comments.</p>\n<h2 id=\"how-to-query\"><a href=\"#how-to-query\" aria-label=\"how to query permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to query</h2>\n<p>You can query nodes created from Wordpress using GraphQL like the following:\nNote : Learn to use the GraphQL tool and Ctrl+Spacebar at\n<a href=\"http://localhost:3000/___graphiql\">http://localhost:3000/___graphiql</a> to discover the types and properties of your\nGraphQL model.</p>\n<h3 id=\"query-posts\"><a href=\"#query-posts\" aria-label=\"query posts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query posts</h3>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPost <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        slug\n        title\n        content\n        excerpt\n        date\n        modified\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-pages\"><a href=\"#query-pages\" aria-label=\"query pages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query pages</h3>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPage <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        title\n        content\n        excerpt\n        date\n        modified\n        slug\n        status\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Same thing for other type of entity (tag, media, categories, …).</p>\n<h3 id=\"query-any-other-entity\"><a href=\"#query-any-other-entity\" aria-label=\"query any other entity permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query any other entity</h3>\n<p>In the following example, <code class=\"language-text\">${Manufacturer}</code> will be replaced by the endpoint\nprefix and <code class=\"language-text\">${Endpoint}</code> by the name of the endpoint.</p>\n<p>To know what’s what, check the URL of the endpoint. You can set <code class=\"language-text\">verboseOutput: true</code> in order to get more information of what’s executed by the source plugin\nbehind the scene.</p>\n<p>For example the following URL:\n<code class=\"language-text\">http://my-blog.wordpress.com/wp-json/acf/v2/options</code></p>\n<ul>\n<li>Manufacturer : <code class=\"language-text\">acf</code></li>\n<li>Endpoint : <code class=\"language-text\">options</code></li>\n<li>Final GraphQL Type : AllWordpressAcfOptions</li>\n</ul>\n<p>For example the following URL:\n<code class=\"language-text\">http://my-blog.wordpress.com/wp-api-menus/v2/menu-locations</code></p>\n<ul>\n<li>Manufacturer : <code class=\"language-text\">wpapimenus</code></li>\n<li>Endpoint : <code class=\"language-text\">menulocations</code></li>\n<li>Final GraphQL Type : AllWordpressWpApiMenusMenuLocations</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpress$<span class=\"token punctuation\">{</span>Manufacturer<span class=\"token punctuation\">}</span>$<span class=\"token punctuation\">{</span>Endpoint<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n       type\n        // Put your fields here\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-acf-options\"><a href=\"#query-acf-options\" aria-label=\"query acf options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query ACF Options</h3>\n<p>Whether you are using V2 or V3 of ACF to REST, the query below will return <code class=\"language-text\">options</code> as the default ACF Options page data.</p>\n<p>If you have specified <code class=\"language-text\">acfOptionPageIds</code> in your site’s <code class=\"language-text\">gatsby-config.js</code> (ex: <code class=\"language-text\">option_page_1</code>), then they will be accessible by their ID:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  allWordpressAcfOptions {\n    edges {\n      node{\n        option_page_1 {\n          test_acf\n        }\n        options {\n          test_acf\n        }\n      }\n    }\n  }\n}</code></pre></div>\n<h3 id=\"query-posts-with-the-child-acf-fields-node\"><a href=\"#query-posts-with-the-child-acf-fields-node\" aria-label=\"query posts with the child acf fields node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query posts with the child ACF Fields Node</h3>\n<p>Mention the apparition of <code class=\"language-text\">childWordpressAcfField</code> in the query below :</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPost <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        slug\n        title\n        content\n        excerpt\n        date\n        modified\n        author\n        featured_media\n        template\n        categories\n        tags\n        acf <span class=\"token punctuation\">{</span>\n         // use ___GraphiQL debugger and Ctrl+Spacebar to describe your model.\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-pages-with-the-child-acf-fields-node\"><a href=\"#query-pages-with-the-child-acf-fields-node\" aria-label=\"query pages with the child acf fields node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query pages with the child ACF Fields Node</h3>\n<p>Mention the apparition of <code class=\"language-text\">childWordpressAcfField</code> in the query below :</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPage <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        title\n        content\n        excerpt\n        date\n        modified\n        slug\n        author\n        featured_media\n        template\n        acf <span class=\"token punctuation\">{</span>\n         // use ___GraphiQL debugger and Ctrl+Spacebar to describe your model.\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-with-acf-flexible-content\"><a href=\"#query-with-acf-flexible-content\" aria-label=\"query with acf flexible content permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query with ACF Flexible Content</h3>\n<p>ACF Flexible Content returns an array of objects with different types and are\nhandled differently than other fields.</p>\n<p>To access those fields, instead of using their field name, you need to use\n<code class=\"language-text\">[field_name]_[post_type]</code> (if you have field named <code class=\"language-text\">page_builder</code> in\nyour WordPress pages you would need to use <code class=\"language-text\">page_builder_page</code>).</p>\n<p>To access data stored in these fields, you need to use GraphQL\n<a href=\"http://graphql.org/learn/queries/#inline-fragments\">inline fragments</a>. This\nrequire you to know types of nodes. The easiest way to get the types of nodes is to use\n<code class=\"language-text\">___GraphiQL</code> debugger and run the below query (adjust post type and field name):</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPage <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        title\n        acf <span class=\"token punctuation\">{</span>\n          page_builder_page <span class=\"token punctuation\">{</span>\n            __typename\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When you have node type names, you can use them to create inline fragments.</p>\n<p>Full example:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPage <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        title\n        acf <span class=\"token punctuation\">{</span>\n          page_builder_page <span class=\"token punctuation\">{</span>\n            __typename\n            <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> WordPressAcf_hero <span class=\"token punctuation\">{</span>\n              title\n              subtitle\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> WordpressAcf_text <span class=\"token punctuation\">{</span>\n              text\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> WordpressAcf_image <span class=\"token punctuation\">{</span>\n              image <span class=\"token punctuation\">{</span>\n                localFile <span class=\"token punctuation\">{</span>\n                  childImageSharp <span class=\"token punctuation\">{</span>\n                    fluid<span class=\"token punctuation\">(</span><span class=\"token attr-name\">maxWidth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                      <span class=\"token operator\">...</span>GatsbyImageSharpFluid_withWebp\n                    <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-posts-with-the-wpml-fields-node\"><a href=\"#query-posts-with-the-wpml-fields-node\" aria-label=\"query posts with the wpml fields node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query posts with the WPML Fields Node</h3>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPost <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        slug\n        title\n        content\n        excerpt\n        date\n        modified\n        author\n        featured_media\n        template\n        categories\n        tags\n        wpml_current_locale\n        wpml_translations <span class=\"token punctuation\">{</span>\n          locale\n          wordpress_id\n          post_title\n          href\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-pages-with-the-wpml-fields-node\"><a href=\"#query-pages-with-the-wpml-fields-node\" aria-label=\"query pages with the wpml fields node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query pages with the WPML Fields Node</h3>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPage <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        title\n        content\n        excerpt\n        date\n        modified\n        slug\n        author\n        featured_media\n        template\n        wpml_current_locale\n        wpml_translations <span class=\"token punctuation\">{</span>\n          locale\n          wordpress_id\n          post_title\n          href\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-posts-with-the-polylang-fields-node\"><a href=\"#query-posts-with-the-polylang-fields-node\" aria-label=\"query posts with the polylang fields node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query posts with the Polylang Fields Node</h3>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPost <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        slug\n        title\n        content\n        excerpt\n        date\n        modified\n        author\n        featured_media\n        template\n        categories\n        tags\n        polylang_current_lang\n        polylang_translations <span class=\"token punctuation\">{</span>\n          id\n          slug\n          title\n          content\n          excerpt\n          date\n          modified\n          author\n          featured_media\n          template\n          categories\n          tags\n          polylang_current_lang\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-pages-with-the-polylang-fields-node\"><a href=\"#query-pages-with-the-polylang-fields-node\" aria-label=\"query pages with the polylang fields node permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query pages with the Polylang Fields Node</h3>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPage <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        title\n        content\n        excerpt\n        date\n        modified\n        slug\n        author\n        featured_media\n        template\n        polylang_current_lang\n        polylang_translations <span class=\"token punctuation\">{</span>\n          id\n          title\n          content\n          excerpt\n          date\n          modified\n          slug\n          author\n          featured_media\n          template\n          polylang_current_lang\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"image-processing\"><a href=\"#image-processing\" aria-label=\"image processing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Image processing</h2>\n<p>To use image processing you need <code class=\"language-text\">gatsby-transformer-sharp</code>, <code class=\"language-text\">gatsby-plugin-sharp</code> and their\ndependencies <code class=\"language-text\">gatsby-image</code> and <code class=\"language-text\">gatsby-source-filesystem</code> in your <code class=\"language-text\">gatsby-config.js</code>.</p>\n<p>You can apply image processing to:</p>\n<ul>\n<li>featured images (also known as post thumbnails),</li>\n<li>\n<p>ACF fields:</p>\n<ul>\n<li>Image field type (return value must be set to <code class=\"language-text\">Image Object</code> or <code class=\"language-text\">Image URL</code> or field name must be <code class=\"language-text\">featured_media</code>),</li>\n<li>Gallery field type.</li>\n</ul>\n</li>\n</ul>\n<p>Image processing of inline images added in wordpress WYSIWIG editor is\ncurrently not supported.</p>\n<p>To access image processing in your queries you need to use this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  imageFieldName {\n    localFile {\n      childImageSharp {\n        ...ImageFragment\n      }\n    }\n  }\n}</code></pre></div>\n<p>Full example:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  allWordpressPost <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        title\n        featured_media <span class=\"token punctuation\">{</span>\n          localFile <span class=\"token punctuation\">{</span>\n            childImageSharp <span class=\"token punctuation\">{</span>\n              fixed<span class=\"token punctuation\">(</span><span class=\"token attr-name\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>GatsbyImageSharpFixed_withWebp\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        acf <span class=\"token punctuation\">{</span>\n          image <span class=\"token punctuation\">{</span>\n            localFile <span class=\"token punctuation\">{</span>\n              childImageSharp <span class=\"token punctuation\">{</span>\n                fluid<span class=\"token punctuation\">(</span><span class=\"token attr-name\">maxWidth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token operator\">...</span>GatsbyImageSharpFluid_withWebp\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n          gallery <span class=\"token punctuation\">{</span>\n            localFile <span class=\"token punctuation\">{</span>\n              childImageSharp <span class=\"token punctuation\">{</span>\n                resize<span class=\"token punctuation\">(</span><span class=\"token attr-name\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  src\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To learn more about image processing check</p>\n<ul>\n<li>documentation of <a href=\"/packages/gatsby-plugin-sharp/\">gatsby-plugin-sharp</a>,</li>\n<li>source code of <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/examples/image-processing\">image processing example\nsite</a>.</li>\n</ul>\n<h2 id=\"using-a-custom-normalizer\"><a href=\"#using-a-custom-normalizer\" aria-label=\"using a custom normalizer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a custom normalizer</h2>\n<p>The plugin uses the concept of normalizers to transform the json data from WordPress into\nGraphQL nodes. You can extend the normalizers by passing a custom function to your <code class=\"language-text\">gatsby-config.js</code>.</p>\n<h3 id=\"example-1\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example:</h3>\n<p>You have a custom post type <code class=\"language-text\">movie</code> and a related custom taxonomy <code class=\"language-text\">genre</code> in your WordPress site. Since\n<code class=\"language-text\">gatsby-source-wordpress</code> doesn’t know about the relation of the two, we can build an additional normalizer function to map the movie GraphQL nodes to the genre nodes:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mapMoviesToGenres</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> entities <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> genres <span class=\"token operator\">=</span> entities<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>__type <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token string\">`wordpress__wp_genre`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> entities<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>__type <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token string\">`wordpress__wp_movie`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> hasGenres <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>genres <span class=\"token operator\">&amp;&amp;</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>genres<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">.</span>length\n      <span class=\"token comment\">// Replace genres with links to their nodes.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasGenres<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span>genres___NODE <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>genres<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n          c <span class=\"token operator\">=></span> genres<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>gObj <span class=\"token operator\">=></span> c <span class=\"token operator\">===</span> gObj<span class=\"token punctuation\">.</span>wordpress_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">delete</span> e<span class=\"token punctuation\">.</span>genres\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> e\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> entities\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In your <code class=\"language-text\">gatsby-config.js</code> you can then pass the function to the plugin options:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gatsby-source-wordpress\"</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        normalizer<span class=\"token punctuation\">:</span> mapMoviesToGenres<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next to the entities, the object passed to the custom normalizer function also contains other helpful Gatsby functions\nand also your <code class=\"language-text\">wordpress-source-plugin</code> options from <code class=\"language-text\">gatsby-config.js</code>. To learn more about the passed object see the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-wordpress/src/gatsby-node.js\">source code</a>.</p>\n<h2 id=\"sites-gatsby-nodejs-example\"><a href=\"#sites-gatsby-nodejs-example\" aria-label=\"sites gatsby nodejs example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Site’s <code class=\"language-text\">gatsby-node.js</code> example</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`lodash`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Promise <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`bluebird`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`path`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> slash <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`slash`</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Implement the Gatsby API “createPages”. This is</span>\n<span class=\"token comment\">// called after the Gatsby bootstrap is finished so you have</span>\n<span class=\"token comment\">// access to any information necessary to programmatically</span>\n<span class=\"token comment\">// create pages.</span>\n<span class=\"token comment\">// Will create pages for WordPress pages (route : /{slug})</span>\n<span class=\"token comment\">// Will create pages for WordPress posts (route : /post/{slug})</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The “graphql” function allows us to run arbitrary</span>\n    <span class=\"token comment\">// queries against the local WordPress graphql schema. Think of</span>\n    <span class=\"token comment\">// it like the site has a built-in database constructed</span>\n    <span class=\"token comment\">// from the fetched data that you can run queries against.</span>\n\n    <span class=\"token comment\">// ==== PAGES (WORDPRESS NATIVE) ====</span>\n    <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`\n        {\n          allWordpressPage {\n            edges {\n              node {\n                id\n                slug\n                status\n                template\n              }\n            }\n          }\n        }\n      `</span></span>\n    <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Create Page pages.</span>\n        <span class=\"token keyword\">const</span> pageTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/templates/page.js\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// We want to create a detailed page for each</span>\n        <span class=\"token comment\">// page node. We'll just use the WordPress Slug for the slug.</span>\n        <span class=\"token comment\">// The Page ID is prefixed with 'PAGE_'</span>\n        _<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allWordpressPage<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">,</span> edge <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Gatsby uses Redux to manage its internal state.</span>\n          <span class=\"token comment\">// Plugins and sites can use functions like \"createPage\"</span>\n          <span class=\"token comment\">// to interact with Gatsby.</span>\n          <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Each page is required to have a `path` as well</span>\n            <span class=\"token comment\">// as a template component. The `context` is</span>\n            <span class=\"token comment\">// optional but is often necessary so the template</span>\n            <span class=\"token comment\">// can query data specific to each page.</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/`</span></span><span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span>pageTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              id<span class=\"token punctuation\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// ==== END PAGES ====</span>\n\n      <span class=\"token comment\">// ==== POSTS (WORDPRESS NATIVE AND ACF) ====</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n          <span class=\"token template-string\"><span class=\"token string\">`\n            {\n              allWordpressPost {\n                edges {\n                  node {\n                    id\n                    slug\n                    status\n                    template\n                    format\n                  }\n                }\n              }\n            }\n          `</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">const</span> postTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/templates/post.js\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">// We want to create a detailed page for each</span>\n          <span class=\"token comment\">// post node. We'll just use the WordPress Slug for the slug.</span>\n          <span class=\"token comment\">// The Post ID is prefixed with 'POST_'</span>\n          _<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allWordpressPost<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">,</span> edge <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/`</span></span><span class=\"token punctuation\">,</span>\n              component<span class=\"token punctuation\">:</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span>postTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                id<span class=\"token punctuation\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ==== END POSTS ====</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"troubleshooting\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h2>\n<h3 id=\"graphql-error---unknown-field-on-acf\"><a href=\"#graphql-error---unknown-field-on-acf\" aria-label=\"graphql error   unknown field on acf permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Error - Unknown Field on ACF</h3>\n<p>ACF returns <code class=\"language-text\">false</code> in cases where there is no data to be returned. This can cause conflicting data types in GraphQL and often leads to the error: <code class=\"language-text\">GraphQL Error Unknown field {field} on type {type}</code>.</p>\n<p>To solve this, you can use the <a href=\"https://www.advancedcustomfields.com/resources/acf-format_value/\">acf/format_value filter</a>. There are 2 possible ways to use this:</p>\n<ul>\n<li><code class=\"language-text\">acf/format_value</code> – filter for every field</li>\n<li><code class=\"language-text\">acf/format_value/type={$field_type}</code> – filter for a specific field based on it’s type</li>\n</ul>\n<p>Using the following function, you can check for an empty field and if it’s empty return <code class=\"language-text\">null</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">function_exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'acf_nullify_empty'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Return `null` if an empty value is returned from ACF.\n     *\n     * @param mixed $value\n     * @param mixed $post_id\n     * @param array $field\n     *\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">acf_nullify_empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post_id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$field</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can then apply this function to all ACF fields using the following code snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'acf/format_value'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'acf_nullify_empty'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or if you would prefer to target specific fields, you can use the <code class=\"language-text\">acf/format_value/type={$field_type}</code> filter. Here are some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'acf/format_value/type=image'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'acf_nullify_empty'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'acf/format_value/type=gallery'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'acf_nullify_empty'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'acf/format_value/type=repeater'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'acf_nullify_empty'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This code should be added as a plugin (recommended), or within the <code class=\"language-text\">functions.php</code> of a theme.</p>\n<h3 id=\"graphql-error---unknown-field-localfile-on-type-image-field\"><a href=\"#graphql-error---unknown-field-localfile-on-type-image-field\" aria-label=\"graphql error   unknown field localfile on type image field permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Error - Unknown field <code class=\"language-text\">localFile</code> on type <code class=\"language-text\">[image field]</code></h3>\n<p>WordPress has a <a href=\"https://core.trac.wordpress.org/ticket/41445\">known issue</a> that can affect how media objects are returned through the REST API.</p>\n<p>During the upload process to the WordPress media library, the <code class=\"language-text\">post_parent</code> value (<a href=\"https://codex.wordpress.org/Database_Description#Table:_wp_posts\">seen here in the wp_posts table</a>) is set to the ID of the post the image is attached to. This value is unable to be changed by any WordPress administration actions.</p>\n<p>When the post an image is attached to becomes inaccessible (e.g. from changing visibility settings, or deleting the post), the image itself is restricted in the REST API:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   {\n      &quot;code&quot;:&quot;rest_forbidden&quot;,\n      &quot;message&quot;:&quot;You don&#39;t have permission to do this.&quot;,\n      &quot;data&quot;:{\n         &quot;status&quot;:403\n      }\n   }</code></pre></div>\n<p>which prevents Gatsby from retrieving it.</p>\n<p>In order to resolve this, you can manually change the <code class=\"language-text\">post_parent</code> value of the image record to <code class=\"language-text\">0</code> in the database. The only side effect of this change is that the image will no longer appear in the “Uploaded to this post” filter in the Add Media dialog in the WordPress administration area.</p>\n<h3 id=\"self-signed-certificates\"><a href=\"#self-signed-certificates\" aria-label=\"self signed certificates permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Self-signed certificates</h3>\n<p>When running locally, or in other situations that may involve self-signed certificates, you may run into the error: <code class=\"language-text\">The request failed with error code &quot;DEPTH_ZERO_SELF_SIGNED_CERT&quot;</code>.</p>\n<p>To solve this, you can disable Node.js’ rejection of unauthorized certificates by adding the following to <code class=\"language-text\">gatsby-node.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_TLS_REJECT_UNAUTHORIZED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span></code></pre></div>","excerpt":"gatsby-source-wordpress Source plugin for pulling data into  Gatsby  from\nWordPress sites using the\n WordPress REST API . An example site…","timeToRead":16,"fields":{"title":"gatsby-source-wordpress"},"parent":{"__typename":"File","relativePath":"gatsby-source-wordpress/README.md"}},"npmPackage":{"name":"gatsby-source-wordpress","keywords":["gatsby","gatsby-plugin","gatsby-source-plugin"],"lastPublisher":{"name":"dschau","avatar":"https://gravatar.com/avatar/9015274323adee38f4536bbf562129ee"}}},"pageContext":{"slug":"/packages/gatsby-source-wordpress/","id":"55e2ea2a-22c8-58ce-815e-94ddecbc9444","layout":"plugins"}}