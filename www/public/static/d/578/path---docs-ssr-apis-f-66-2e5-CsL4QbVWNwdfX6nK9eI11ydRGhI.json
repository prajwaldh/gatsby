{"data":{"file":{"childrenDocumentationJs":[{"name":"replaceRenderer","description":{"childMarkdownRemark":{"html":"<p>Replace the default server renderer. This is useful for integration with\nRedux, css-in-js libraries, etc. that need custom setups for server\nrendering.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token comment\">// From gatsby-plugin-glamor</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> renderToString <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react-dom/server\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> inline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"glamor-inline\"</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">replaceRenderer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bodyComponent<span class=\"token punctuation\">,</span> replaceBodyHTMLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bodyHTML <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>bodyComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> inlinedHTML <span class=\"token operator\">=</span> <span class=\"token function\">inline</span><span class=\"token punctuation\">(</span>bodyHTML<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">replaceBodyHTMLString</span><span class=\"token punctuation\">(</span>inlinedHTML<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"Object"},"description":null,"properties":[{"name":"replaceBodyHTMLString","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Call this with the HTML string\nyou render. <strong>WARNING</strong> if multiple plugins implement this API it’s the\nlast plugin that “wins”. TODO implement an automated warning against this.</p>"}},"properties":null},{"name":"setHeadComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which are added to the <code class=\"language-text\">headComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component.</p>"}},"properties":null},{"name":"setHtmlAttributes","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an object of props which will\nspread into the <code class=\"language-text\">&lt;html&gt;</code> component.</p>"}},"properties":null},{"name":"setBodyAttributes","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an object of props which will\nspread into the <code class=\"language-text\">&lt;body&gt;</code> component.</p>"}},"properties":null},{"name":"setPreBodyComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which are added to the <code class=\"language-text\">preBodyComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component.</p>"}},"properties":null},{"name":"setPostBodyComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which are added to the <code class=\"language-text\">postBodyComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component.</p>"}},"properties":null},{"name":"setBodyProps","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an object of data which\nis merged with other body props and passed to <code class=\"language-text\">html.js</code> as <code class=\"language-text\">bodyProps</code>.</p>"}},"properties":null}]},{"name":"pluginOptions","type":{"name":"Object"},"description":null,"properties":null}]},{"name":"onRenderBody","description":{"childMarkdownRemark":{"html":"<p>Called after every page Gatsby server renders while building HTML so you can\nset head and body components to be rendered in your <code class=\"language-text\">html.js</code>.</p>\n<p>Gatsby does a two-pass render for HTML. It loops through your pages first\nrendering only the body and then takes the result body HTML string and\npasses it as the <code class=\"language-text\">body</code> prop to your <code class=\"language-text\">html.js</code> to complete the render.</p>\n<p>It’s often handy to be able to send custom components to your <code class=\"language-text\">html.js</code>.\nFor example, it’s a very common pattern for React.js libraries that\nsupport server rendering to pull out data generated during the render to\nadd to your HTML.</p>\n<p>Using this API over <a href=\"#replaceRenderer\"><code class=\"language-text\">replaceRenderer</code></a> is preferable as\nmultiple plugins can implement this API where only one plugin can take\nover server rendering. However, if your plugin requires taking over server\nrendering then that’s the one to\nuse</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Helmet <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react-helmet\"</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRenderBody</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> setHeadComponents<span class=\"token punctuation\">,</span> setHtmlAttributes<span class=\"token punctuation\">,</span> setBodyAttributes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  pluginOptions\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> helmet <span class=\"token operator\">=</span> Helmet<span class=\"token punctuation\">.</span><span class=\"token function\">renderStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setHtmlAttributes</span><span class=\"token punctuation\">(</span>helmet<span class=\"token punctuation\">.</span>htmlAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setBodyAttributes</span><span class=\"token punctuation\">(</span>helmet<span class=\"token punctuation\">.</span>bodyAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setHeadComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    helmet<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>noscript<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>script<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"Object"},"description":null,"properties":[{"name":"pathname","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The pathname of the page currently being rendered.</p>"}},"properties":null},{"name":"setHeadComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which are added to the <code class=\"language-text\">headComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component.</p>"}},"properties":null},{"name":"setHtmlAttributes","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an object of props which will\nspread into the <code class=\"language-text\">&lt;html&gt;</code> component.</p>"}},"properties":null},{"name":"setBodyAttributes","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an object of props which will\nspread into the <code class=\"language-text\">&lt;body&gt;</code> component.</p>"}},"properties":null},{"name":"setPreBodyComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which are added to the <code class=\"language-text\">preBodyComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component.</p>"}},"properties":null},{"name":"setPostBodyComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which are added to the <code class=\"language-text\">postBodyComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component.</p>"}},"properties":null},{"name":"setBodyProps","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an object of data which\nis merged with other body props and passed to <code class=\"language-text\">html.js</code> as <code class=\"language-text\">bodyProps</code>.</p>"}},"properties":null}]},{"name":"pluginOptions","type":{"name":"Object"},"description":null,"properties":null}]},{"name":"onPreRenderHTML","description":{"childMarkdownRemark":{"html":"<p>Called after every page Gatsby server renders while building HTML so you can\nreplace head components to be rendered in your <code class=\"language-text\">html.js</code>. This is useful if\nyou need to reorder scripts or styles added by other plugins.</p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token comment\">// Move Typography.js styles to the top of the head section so they're loaded first.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onPreRenderHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> getHeadComponents<span class=\"token punctuation\">,</span> replaceHeadComponents <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> headComponents <span class=\"token operator\">=</span> <span class=\"token function\">getHeadComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  headComponents<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'TypographyStyle'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'TypographyStyle'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">replaceHeadComponents</span><span class=\"token punctuation\">(</span>headComponents<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"Object"},"description":null,"properties":[{"name":"getHeadComponents","type":{"name":"Array"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Returns the current <code class=\"language-text\">headComponents</code> array.</p>"}},"properties":null},{"name":"replaceHeadComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which replace the <code class=\"language-text\">headComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component. <strong>WARNING</strong> if multiple plugins implement this\nAPI it’s the last plugin that “wins”.</p>"}},"properties":null},{"name":"getPreBodyComponents","type":{"name":"Array"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Returns the current <code class=\"language-text\">preBodyComponents</code> array.</p>"}},"properties":null},{"name":"replacePreBodyComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which replace the <code class=\"language-text\">preBodyComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component. <strong>WARNING</strong> if multiple plugins implement this\nAPI it’s the last plugin that “wins”.</p>"}},"properties":null},{"name":"getPostBodyComponents","type":{"name":"Array"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Returns the current <code class=\"language-text\">postBodyComponents</code> array.</p>"}},"properties":null},{"name":"replacePostBodyComponents","type":{"name":"function"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Takes an array of components as its\nfirst argument which replace the <code class=\"language-text\">postBodyComponents</code> array which is passed\nto the <code class=\"language-text\">html.js</code> component. <strong>WARNING</strong> if multiple plugins implement this\nAPI it’s the last plugin that “wins”.</p>"}},"properties":null}]},{"name":"pluginOptions","type":{"name":"Object"},"description":null,"properties":null}]},{"name":"wrapPageElement","description":{"childMarkdownRemark":{"html":"<p>Allow a plugin to wrap the page element.</p>\n<p>This is useful for setting wrapper component around pages that won’t get\nunmounted on page change. For setting Provider components use <a href=\"#wrapRootElement\">wrapRootElement</a>.</p>\n<p><em>Note:</em> <a href=\"/docs/browser-apis/#wrapPageElement\">There is equivalent hook in Browser API</a></p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/components/layout\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapPageElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> element<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// props provide same data to Layout as Page element will get</span>\n  <span class=\"token comment\">// including location, data, etc - you don't need to pass it</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Layout <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"object"},"description":null,"properties":[{"name":"element","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The “Page” React Element built by Gatsby.</p>"}},"properties":null},{"name":"props","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Props object used by page.</p>"}},"properties":null},{"name":"pathname","type":{"name":"string"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>Path of page.</p>"}},"properties":null}]}]},{"name":"wrapRootElement","description":{"childMarkdownRemark":{"html":"<p>Allow a plugin to wrap the root element.</p>\n<p>This is useful to setup any Providers component that will wrap your application.\nFor setting persistent UI elements around pages use <a href=\"#wrapPageElement\">wrapPageElement</a>.</p>\n<p><em>Note:</em> <a href=\"/docs/browser-apis/#wrapRootElement\">There is equivalent hook in Browser API</a></p>"}},"returns":[],"examples":[{"highlighted":"<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n\n<span class=\"token keyword\">import</span> createStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/state/createStore\"</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapRootElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> element <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"}],"params":[{"name":"$0","type":{"name":"object"},"description":null,"properties":[{"name":"element","type":{"name":"object"},"default":null,"description":{"childMarkdownRemark":{"html":"<p>The “Root” React Element built by Gatsby.</p>"}},"properties":null}]}]}]}},"pageContext":{}}