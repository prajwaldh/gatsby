{"data":{"markdownRemark":{"html":"<p>Code splitting in Gatsby occurs during webpack compilation via <a href=\"https://webpack.js.org/guides/code-splitting/#dynamic-imports\">Dynamic Splitting</a>. During compilation, if webpack finds an <code class=\"language-text\">import</code> function invocation, it will split the imported file into a separate bundle. If modules are instead loaded with <code class=\"language-text\">require</code>, they are not code split and are instead included in the original bundle.</p>\n<p>But how do we figure out what modules/files to split? Thankfully, there is a natural answer. Pages! When you load a page, there’s no reason we need to also load the JavaScript/CSS for all the other pages on the site (except to prefetch them which we’ll get to <a href=\"/docs/how-code-splitting-works/#prefetching-chunks\">later</a>). Gatsby’s job is to do the heavy lifting of generating the right JavaScript in the form that webpack expects to perform this code splitting.</p>\n<h2 id=\"cacheasync-requiresjs\"><a href=\"#cacheasync-requiresjs\" aria-label=\"cacheasync requiresjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.cache/async-requires.js</h2>\n<p>During the <a href=\"/docs/write-pages/#async-requiresjs\">Write Out Pages</a> bootstrap phase, we output <code class=\"language-text\">.cache/async-requires.js</code>. This file is key to code splitting. It exports a <code class=\"language-text\">components</code> object that maps <a href=\"/docs/behind-the-scenes-terminology/#componentchunkname\">ComponentChunkNames</a> to functions that import the component’s file on disk. E.g</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span>components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"component--src-blog-js\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/site/src/blog.js\"</span> <span class=\"token comment\">/* webpackChunkName: \"component---src-blog-js\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// more components</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The entry point to webpack (<code class=\"language-text\">production-app.js</code>) <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/production-app.js#L12\">references ./async-requires.js</a>. And therefore webpack will analyze it and find the object mapping components to functions that dynamically import page component files. According to dynamic splitting, webpack will then create separate chunks for each of those imported files.</p>\n<p><code class=\"language-text\">async-requires</code> also exports a <code class=\"language-text\">data</code> function that dynamically imports the <a href=\"/docs/write-pages/#datajson\">data.json</a> file so that it too is code split.</p>\n<h2 id=\"chunk-bundle-naming\"><a href=\"#chunk-bundle-naming\" aria-label=\"chunk bundle naming permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chunk bundle naming</h2>\n<p>Great! We’ve told webpack where we want to code split. But how will these be named on disk? Webpack gives you the ability to customize this via the <a href=\"https://webpack.js.org/configuration/output/#output-chunkfilename\">chunkFilename</a> configuration in the <a href=\"https://webpack.js.org/configuration/output/\">output</a> section, which is set by Gatsby in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/webpack.config.js#L131\">webpack.config.js</a> as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[name]-[contenthash].js</code></pre></div>\n<p>Content hash is simply a hash of the contents of the chunk that was code split. But what about <code class=\"language-text\">name</code>? We haven’t told webpack the “name” of the chunk, other than the filename, which can’t be a name since it has slashes in it. Normally, Webpack would replace <code class=\"language-text\">[name]</code> with <code class=\"language-text\">[id]</code> (see <a href=\"https://webpack.js.org/configuration/output/#output-chunkfilename\">webpack docs</a>). But, it gives us the opportunity to specify the name instead as a comment in the <code class=\"language-text\">import block</code>. In the example above, that’s what the <code class=\"language-text\">/* webpackChunkName: &quot;component---src-blog-js&quot; */</code> is doing.</p>\n<h2 id=\"primer-on-chunkgroups-and-chunks\"><a href=\"#primer-on-chunkgroups-and-chunks\" aria-label=\"primer on chunkgroups and chunks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primer on chunkGroups and chunks</h2>\n<p>Before we go on to show how Gatsby maps components to the generated bundle names, we should understand how webpack chunks work. A chunk group represents a logical code split, e.g. a Gatsby page, or the Gatsby core app. The chunk groups might share a bunch of code or libraries. Webpack detects these and creates shared pieces of code. These are chunks, e.g. there might be a chunk for React and other libraries. Then there would be the leftover chunks of core Gatsby JS code for the particular chunk group. This is most easily explained by the below graph.</p>\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: %0 Pages: 1 -->\n<svg width=\"591pt\" height=\"606pt\"\n viewBox=\"0.00 0.00 590.82 606.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 602)\">\n<title>%0</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-602 586.8222,-602 586.8222,4 -4,4\"/>\n<g id=\"clust1\" class=\"cluster\">\n<title>cluster_chunks</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"207.7196,-8 207.7196,-590 574.8222,-590 574.8222,-8 207.7196,-8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-573.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">chunks</text>\n</g>\n<g id=\"clust2\" class=\"cluster\">\n<title>cluster_chunkGroups</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"8,-226 8,-411 187.7196,-411 187.7196,-226 8,-226\"/>\n<text text-anchor=\"middle\" x=\"97.8598\" y=\"-394.4\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">chunkGroups</text>\n</g>\n<!-- id0 -->\n<g id=\"node1\" class=\"node\">\n<title>id0</title>\n<path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M296.5086,-295.8C296.5086,-295.8 486.0332,-295.8 486.0332,-295.8 492.0332,-295.8 498.0332,-301.8 498.0332,-307.8 498.0332,-307.8 498.0332,-358.2 498.0332,-358.2 498.0332,-364.2 492.0332,-370.2 486.0332,-370.2 486.0332,-370.2 296.5086,-370.2 296.5086,-370.2 290.5086,-370.2 284.5086,-364.2 284.5086,-358.2 284.5086,-358.2 284.5086,-307.8 284.5086,-307.8 284.5086,-301.8 290.5086,-295.8 296.5086,-295.8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-353.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">id: 0</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"284.5086,-345.4 498.0332,-345.4 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-328.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">asset: 0&#45;d55d2d6645e11739b63c.js</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"284.5086,-320.6 498.0332,-320.6 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-304\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">common libs (e.g react)</text>\n</g>\n<!-- id1 -->\n<g id=\"node2\" class=\"node\">\n<title>id1</title>\n<path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M297.6867,-388.8C297.6867,-388.8 484.8551,-388.8 484.8551,-388.8 490.8551,-388.8 496.8551,-394.8 496.8551,-400.8 496.8551,-400.8 496.8551,-451.2 496.8551,-451.2 496.8551,-457.2 490.8551,-463.2 484.8551,-463.2 484.8551,-463.2 297.6867,-463.2 297.6867,-463.2 291.6867,-463.2 285.6867,-457.2 285.6867,-451.2 285.6867,-451.2 285.6867,-400.8 285.6867,-400.8 285.6867,-394.8 291.6867,-388.8 297.6867,-388.8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-446.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">id: 1</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"285.6867,-438.4 496.8551,-438.4 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-421.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">asset: 1&#45;4c94a37dc2061cb7beb9.js</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"285.6867,-413.6 496.8551,-413.6 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-397\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">more common libs</text>\n</g>\n<!-- id5 -->\n<g id=\"node3\" class=\"node\">\n<title>id5</title>\n<path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M291.4637,-109.8C291.4637,-109.8 491.0781,-109.8 491.0781,-109.8 497.0781,-109.8 503.0781,-115.8 503.0781,-121.8 503.0781,-121.8 503.0781,-172.2 503.0781,-172.2 503.0781,-178.2 497.0781,-184.2 491.0781,-184.2 491.0781,-184.2 291.4637,-184.2 291.4637,-184.2 285.4637,-184.2 279.4637,-178.2 279.4637,-172.2 279.4637,-172.2 279.4637,-121.8 279.4637,-121.8 279.4637,-115.8 285.4637,-109.8 291.4637,-109.8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-167.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">id: 5</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"279.4637,-159.4 503.0781,-159.4 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-142.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">asset: app&#45;2e49587d85e03a033f58.js</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"279.4637,-134.6 503.0781,-134.6 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-118\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Gatsby core app</text>\n</g>\n<!-- id42 -->\n<g id=\"node4\" class=\"node\">\n<title>id42</title>\n<path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M255.3409,-16.8C255.3409,-16.8 527.2009,-16.8 527.2009,-16.8 533.2009,-16.8 539.2009,-22.8 539.2009,-28.8 539.2009,-28.8 539.2009,-79.2 539.2009,-79.2 539.2009,-85.2 533.2009,-91.2 527.2009,-91.2 527.2009,-91.2 255.3409,-91.2 255.3409,-91.2 249.3409,-91.2 243.3409,-85.2 243.3409,-79.2 243.3409,-79.2 243.3409,-28.8 243.3409,-28.8 243.3409,-22.8 249.3409,-16.8 255.3409,-16.8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-74.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">id: 42</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"243.3409,-66.4 539.2009,-66.4 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-49.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">asset: webpack&#45;runtime&#45;e402cdceeae5fad2aa61.js</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"243.3409,-41.6 539.2009,-41.6 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-25\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">webpack runtime</text>\n</g>\n<!-- id7 -->\n<g id=\"node5\" class=\"node\">\n<title>id7</title>\n<path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M227.7196,-481.8C227.7196,-481.8 554.8222,-481.8 554.8222,-481.8 560.8222,-481.8 566.8222,-487.8 566.8222,-493.8 566.8222,-493.8 566.8222,-544.2 566.8222,-544.2 566.8222,-550.2 560.8222,-556.2 554.8222,-556.2 554.8222,-556.2 227.7196,-556.2 227.7196,-556.2 221.7196,-556.2 215.7196,-550.2 215.7196,-544.2 215.7196,-544.2 215.7196,-493.8 215.7196,-493.8 215.7196,-487.8 221.7196,-481.8 227.7196,-481.8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-539.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">id: 7</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"215.7196,-531.4 566.8222,-531.4 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-514.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">asset: component&#45;&#45;&#45;src&#45;blog&#45;1&#45;js&#45;cebc3ae7596cbb5b0951.js</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"215.7196,-506.6 566.8222,-506.6 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-490\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">js for src/blog/1.js</text>\n</g>\n<!-- id8 -->\n<g id=\"node6\" class=\"node\">\n<title>id8</title>\n<path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M227.7196,-202.8C227.7196,-202.8 554.8222,-202.8 554.8222,-202.8 560.8222,-202.8 566.8222,-208.8 566.8222,-214.8 566.8222,-214.8 566.8222,-265.2 566.8222,-265.2 566.8222,-271.2 560.8222,-277.2 554.8222,-277.2 554.8222,-277.2 227.7196,-277.2 227.7196,-277.2 221.7196,-277.2 215.7196,-271.2 215.7196,-265.2 215.7196,-265.2 215.7196,-214.8 215.7196,-214.8 215.7196,-208.8 221.7196,-202.8 227.7196,-202.8\"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-260.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">id: 8</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"215.7196,-252.4 566.8222,-252.4 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-235.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">asset: component&#45;&#45;&#45;src&#45;blog&#45;2&#45;js&#45;cebc3ae7596cbb5b0951.js</text>\n<polyline fill=\"none\" stroke=\"#000000\" points=\"215.7196,-227.6 566.8222,-227.6 \"/>\n<text text-anchor=\"middle\" x=\"391.2709\" y=\"-211\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">js for src/blog/2.js</text>\n</g>\n<!-- app -->\n<g id=\"node7\" class=\"node\">\n<title>app</title>\n<polygon fill=\"#d3d3d3\" stroke=\"#000000\" points=\"124.8598,-270 70.8598,-270 70.8598,-234 124.8598,-234 124.8598,-270\"/>\n<text text-anchor=\"middle\" x=\"97.8598\" y=\"-247.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">app</text>\n</g>\n<!-- app&#45;&gt;id5 -->\n<g id=\"edge1\" class=\"edge\">\n<title>app&#45;&gt;id5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M124.9515,-234.9996C146.6542,-221.9925 178.2414,-204.4064 207.7196,-193 227.2922,-185.4265 248.5264,-178.7684 269.3742,-173.0403\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"270.4928,-176.364 279.242,-170.3889 268.6763,-169.6038 270.4928,-176.364\"/>\n</g>\n<!-- app&#45;&gt;id42 -->\n<g id=\"edge2\" class=\"edge\">\n<title>app&#45;&gt;id42</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M105.7868,-233.8172C120.792,-201.6142 156.496,-134.6883 207.7196,-100 215.8801,-94.4738 224.6487,-89.611 233.7707,-85.3322\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"235.2746,-88.4941 243.0012,-81.245 232.4404,-82.0935 235.2746,-88.4941\"/>\n</g>\n<!-- component1 -->\n<g id=\"node8\" class=\"node\">\n<title>component1</title>\n<polygon fill=\"#d3d3d3\" stroke=\"#000000\" points=\"179.5796,-378 16.14,-378 16.14,-342 179.5796,-342 179.5796,-378\"/>\n<text text-anchor=\"middle\" x=\"97.8598\" y=\"-355.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">component&#45;&#45;&#45;src&#45;blog&#45;1&#45;js</text>\n</g>\n<!-- component1&#45;&gt;id0 -->\n<g id=\"edge4\" class=\"edge\">\n<title>component1&#45;&gt;id0</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M179.5911,-352.479C208.892,-349.7827 242.5262,-346.6876 274.2313,-343.7701\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"274.8123,-347.2315 284.4495,-342.8298 274.1708,-340.261 274.8123,-347.2315\"/>\n</g>\n<!-- component1&#45;&gt;id1 -->\n<g id=\"edge5\" class=\"edge\">\n<title>component1&#45;&gt;id1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M178.0357,-378.0348C208.0973,-384.7969 242.8874,-392.6226 275.5337,-399.966\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"275.0646,-403.4479 285.5889,-402.2279 276.6008,-396.6185 275.0646,-403.4479\"/>\n</g>\n<!-- component1&#45;&gt;id7 -->\n<g id=\"edge3\" class=\"edge\">\n<title>component1&#45;&gt;id7</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M110.4872,-378.309C128.8885,-403.5575 165.5152,-448.6939 207.7196,-473 210.2551,-474.4602 212.8363,-475.8745 215.457,-477.2443\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"213.9963,-480.4266 224.5104,-481.7322 217.1053,-474.1549 213.9963,-480.4266\"/>\n</g>\n<!-- component2 -->\n<g id=\"node9\" class=\"node\">\n<title>component2</title>\n<polygon fill=\"#d3d3d3\" stroke=\"#000000\" points=\"179.5796,-324 16.14,-324 16.14,-288 179.5796,-288 179.5796,-324\"/>\n<text text-anchor=\"middle\" x=\"97.8598\" y=\"-301.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">component&#45;&#45;&#45;src&#45;blog&#45;2&#45;js</text>\n</g>\n<!-- component2&#45;&gt;id0 -->\n<g id=\"edge7\" class=\"edge\">\n<title>component2&#45;&gt;id0</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M179.5911,-313.521C208.892,-316.2173 242.5262,-319.3124 274.2313,-322.2299\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"274.1708,-325.739 284.4495,-323.1702 274.8123,-318.7685 274.1708,-325.739\"/>\n</g>\n<!-- component2&#45;&gt;id1 -->\n<g id=\"edge8\" class=\"edge\">\n<title>component2&#45;&gt;id1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M175.3667,-324.1025C179.7884,-326.6834 183.9572,-329.6318 187.7196,-333 204.6334,-348.142 190.4595,-365.2539 207.7196,-380 226.9035,-396.3898 251.098,-407.0856 275.5698,-414.0288\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"274.7568,-417.434 285.3188,-416.5999 276.542,-410.6654 274.7568,-417.434\"/>\n</g>\n<!-- component2&#45;&gt;id8 -->\n<g id=\"edge6\" class=\"edge\">\n<title>component2&#45;&gt;id8</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M178.0357,-287.9652C190.0017,-285.2736 202.717,-282.4134 215.748,-279.4822\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"216.7792,-282.8378 225.7673,-277.2284 215.243,-276.0084 216.7792,-282.8378\"/>\n</g>\n</g>\n</svg>\n\n<p>In the above graph, we can see 3 chunk groups: 2 pages and the core Gatsby app. The two pages share a bunch of libraries. Webpack found these common dependencies and created chunks for them. These chunks are id 0 and 1. And you’ll see that both page <code class=\"language-text\">chunkGroups</code> depend on them. Each page also depends on its own chunk which represents the page’s core code (from its src code in the Gatsby site). These would be id 7 for <code class=\"language-text\">component---src-blog-1-js</code> and 8 for <code class=\"language-text\">component---src-blog-2-js</code>.</p>\n<p>We can also see the chunk group for <code class=\"language-text\">app</code>. It turns out that this shares no dependencies with the pages. But it does include the webpack runtime whose name is declared in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/webpack.config.js#L438\">webpack.config.js</a>.</p>\n<p>Remember that the chunk group name was assigned by the <code class=\"language-text\">/* webpackChunkName: .../*</code> in the previous section.</p>\n<h2 id=\"referencing-chunks-in-build-html\"><a href=\"#referencing-chunks-in-build-html\" aria-label=\"referencing chunks in build html permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referencing chunks in build HTML</h2>\n<p>Webpack can now split our code into different bundles, and we’ve named them appropriately. But those bundles will still be named with a content hash. E.g for a component <code class=\"language-text\">component--src-blog-js</code>, the output chunk bundle might be named something like <code class=\"language-text\">component--src-blog-js-2e49587d85e03a033f58.js</code>. Webpack will replace <code class=\"language-text\">import()</code> calls with links to the generated bundle filenames. This works great for our pure JavaScript bundles. But things get complicated when generating our page HTML files.</p>\n<p>HTML file generation is covered under the <a href=\"/docs/html-generation/\">Page HTML Generation</a> docs. In summary, webpack builds <code class=\"language-text\">static-entry.js</code> which produces a <code class=\"language-text\">page-renderer.js</code> bundle. This is a function that accepts a page and renders its HTML. The HTML is enough to drive a site, and enhance SEO, but once the page is loaded, Gatsby also loads the JavaScript bundle so that page rendering occurs clientside from then on. This gives the advantage of fast initial page loads combined with client side rendering for future page clicks.</p>\n<p>To do this, we need to be able to create <code class=\"language-text\">&lt;link&gt;</code> and <code class=\"language-text\">&lt;script&gt;</code> tags in the HTML the Gatsby runtime chunk, and the page chunk (e.g index). But as mentioned above, only webpack knows the name of the generated filename for each chunk. All Gatsby knows is the <code class=\"language-text\">componentChunkName</code>.</p>\n<h4 id=\"webpackstatsjson\"><a href=\"#webpackstatsjson\" aria-label=\"webpackstatsjson permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webpack.stats.json</h4>\n<p>It turns out that webpack provides a way to record the mapping. It provides a compilation hook called <a href=\"https://webpack.js.org/api/compiler-hooks/#done\">done</a> that you can register for. It provides a <a href=\"https://webpack.js.org/api/stats/\">stats</a> data structure that contains all the <code class=\"language-text\">chunkGroups</code> (remember that the chunk Group is the <code class=\"language-text\">componentChunkName</code>). Each chunk group contains a list of the chunks it depends on. Gatsby provides a custom webpack plugin called <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/gatsby-webpack-stats-extractor.js\">GatsbyWebpackStatsExtractor</a> that implements this hook and writes the chunk information to <code class=\"language-text\">/public/webpack.stats.json</code> (under the <code class=\"language-text\">assetsByChunkName</code> key). E.g</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"assetsByChunkName\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"app\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"webpack-runtime-e402cdceeae5fad2aa61.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"app-2e49587d85e03a033f58.js\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"component---src-blog-2-js\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"0.f8e7f9e53550f997bc53.css\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"0-d55d2d6645e11739b63c.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"1.93002d5bafe5ca491b1a.css\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"1-4c94a37dc2061cb7beb9.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"component---src-blog-2-js-cebc3ae7596cbb5b0951.js\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"chunk-mapjson\"><a href=\"#chunk-mapjson\" aria-label=\"chunk mapjson permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>chunk-map.json</h5>\n<p><code class=\"language-text\">webpack.stats.json</code> maps chunk groups (componentChunkNames) to the chunk asset names they depend on. Our <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/webpack.config.js#L234\">Gatsby webpack compiler hook</a> also outputs <code class=\"language-text\">chunk-map.json</code> which is a mapping from chunkGroup to the core chunk for the component, as opposed to the shared chunks (id0 and id1 in <a href=\"/docs/how-code-splitting-works/#primer-on-chunkgroups-and-chunks\">primer diagram</a>). This will render a single component chunk for JavaScript and CSS within each chunk group. E.g</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"app\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"/app-2e49587d85e03a033f58.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"component---src-blog-2-js\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"/component---src-blog-2-js-cebc3ae7596cbb5b0951.css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/component---src-blog-2-js-860f9fbc5c3881586b5d.js\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"referencing-chunks\"><a href=\"#referencing-chunks\" aria-label=\"referencing chunks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referencing Chunks</h4>\n<p>These two files are loaded by <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L16\">static-entry.js</a> so that it can lookup chunk assets for componentChunkNames. This occurs in two places.</p>\n<h5 id=\"construct-link-and-script-tags-for-current-page\"><a href=\"#construct-link-and-script-tags-for-current-page\" aria-label=\"construct link and script tags for current page permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construct link and script tags for current page</h5>\n<p>As mentioned above, <code class=\"language-text\">static-entry.js</code> generates HTML, but also loads the Gatsby JavaScript runtime and the JavaScript for the page we’re generating HTML for. These are added as a <code class=\"language-text\">link</code> tags in the <code class=\"language-text\">&lt;head&gt;</code> (see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\">link tag preloading</a>), and then referenced at the bottom of the body in <code class=\"language-text\">script</code> tags.</p>\n<p>The Gatsby runtime bundle is called <code class=\"language-text\">app</code> (output name from <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/webpack.config.js#L164\">webpack.config.js</a>). We <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L195\">lookup assetsByChunkName</a> by <code class=\"language-text\">app</code> to get its chunk asset files. Then we do the same for the component by looking up the same collection by <code class=\"language-text\">componentChunkName</code> (e.g. <code class=\"language-text\">component---src-blog-2-js</code>). These two chunk asset arrays are merged together. For each chunk in it, we create the following link and add it to the <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L259\">headComponents</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n  <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>script<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app-2e49587d85e03a033f58.js<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/app-2e49587d85e03a033f58.js<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><code class=\"language-text\">rel=&quot;preload&quot;</code> tells the browser to start downloading this resource with a high priority as it will likely be referenced further down in the document. So hopefully by the time we get there, the resource will be returned from the server already.</p>\n<p>Then, at the <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L331\">end of the body</a>, we include the actual script tag that references the preloaded asset.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n  <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app-2e49587d85e03a033f58.js<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app-2e49587d85e03a033f58.js<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">async</span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>If the asset is CSS, we <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L302\">inject it inline in the head</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span>\n  <span class=\"token attr-name\">data-href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/1.93002d5bafe5ca491b1a.css<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>...contents of public/1.93002d5bafe5ca491b1a.css<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<h5 id=\"prefetching-chunks\"><a href=\"#prefetching-chunks\" aria-label=\"prefetching chunks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prefetching chunks</h5>\n<p>As shown above, Gatsby uses “preload” to speed up loading of resources required by the page. These are its CSS and its core JavaScript needed to run the page. But if we stopped there, then when a user clicked a link to another page, we would have to wait for that pages resources to download before showing it. To speed this up, once the current page has loaded, Gatsby looks for all links on the page, and for each starts prefetching the page that the link points to.</p>\n<p>It does this using the <code class=\"language-text\">&lt;link rel=&quot;prefetch&quot; href=&quot;...&quot; /&gt;</code> parameter. When the browser sees this tag, it will start downloading the resource but at an extremely low priority and only when the resources for the current page have finished loading. Check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\">MDN prefetch docs</a> for more.</p>\n<p>Here’s how it works. All links on Gatsby sites use the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-link\">gatsby-link</a> plugin which provides a <code class=\"language-text\">GatsbyLink</code> component that uses reach router. The “to” attribute is the page the browser will navigate to if clicked. So once the Link <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/src/index.js#L57\">componentDidMount</a> callback is invoked, we enqueue the “to” path into the <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/loader.js#L188\">production-app loader</a> for prefetching.</p>\n<p>At this stage, we know the page that we’re navigating to, and can retrieve its <code class=\"language-text\">componentChunkName</code> and <code class=\"language-text\">jsonName</code>, but how do we figure out the generated chunkGroup for the component?</p>\n<p><code class=\"language-text\">static-entry.js</code> <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L20\">requires <code class=\"language-text\">chunk-map.json</code></a> and then <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/static-entry.js#L342\">injects it into the CDATA</a> of the html as <code class=\"language-text\">window.___chunkMapping</code> so that it is available to all code in <a href=\"/docs/production-app/\">production-app.js</a>. E.g:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">/*\n&lt;![\n  CDATA[ */\n    window.___chunkMapping={\n      \"app\":[\n        \"/app-2e49587d85e03a033f58.js\"\n      ],\n      \"component---src-blog-2-js\": [\n        \"/component---src-blog-2-js-cebc3ae7596cbb5b0951.css\",\n        \"/component---src-blog-2-js-860f9fbc5c3881586b5d.js\"\n      ]\n    }\n  */ ]\n]>\n*/</code></pre></div>\n<p>Now the loader can create the full component asset path using <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/loader.js#L51\">chunkMapping</a>. It then dynamically constructs a <code class=\"language-text\">&lt;link rel=&quot;prefetch&quot; ... /&gt;</code> tag and adds it to the DOM (in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/prefetch.js\">prefetch.js</a>).</p>\n<p>You may notice that prefetching doesn’t prefetch the shared chunks (e.g <code class=\"language-text\">id0</code> and <code class=\"language-text\">id1</code>). Why? This is a punt. We’re guessing that shared chunks will have been loaded earlier for other pages. And if not, then the main page loading logic will download it. It just won’t be prefetched.</p>\n<p>One more thing, prefetching can be disabled by implementing the <a href=\"/docs/browser-apis/#disableCorePrefetching\">disableCorePrefetching</a> browser API and returning true. This value is checked in <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/cache-dir/loader.js#L203\">loader.enqueue</a>. An example plugin that implements this is <a href=\"https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-guess-js/src/gatsby-browser.js#L3\">gatsby-plugin-guess-js</a>.</p>","excerpt":"Code splitting in Gatsby occurs during webpack compilation via  Dynamic Splitting . During compilation, if webpack finds an   function…","timeToRead":11,"fields":{"slug":"/docs/how-code-splitting-works/","anchor":"how-code-splitting-works"},"frontmatter":{"title":"Code Splitting and Prefetching","overview":null,"issue":null},"parent":{"__typename":"File","relativePath":"docs/how-code-splitting-works.md"}}},"pageContext":{"slug":"/docs/how-code-splitting-works/"}}